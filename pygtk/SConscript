Import('env')

import platform

srcs = Split("""

	library.cpp compiler.cpp type.cpp module.cpp symchar.cpp
	instance.cpp instanceinterfacedata.cpp
	method.cpp name.cpp
	reporter.cpp simulation.cpp set.cpp units.cpp dimensions.cpp extmethod.cpp
	variable.cpp registry.cpp relation.cpp 
	solver.cpp curve.cpp plot.cpp
	solverparameters.cpp solverparameter.cpp solverparameteriterator.cpp
	solverstatus.cpp solverreporter.cpp
	incidencematrix.cpp
	integrator.cpp
	integratorreporter.cpp
	annotation.cpp
""")

# Build a static library with all the sources

python_env = env.Copy()

if platform.system()=='Windows' and env.get('MSVS'):
	python_env.Append(CCFLAGS=['/EHsc']) # for exceptions (as suggested by a MSVC error msg, dunno if it's right or not -- JP)

swig_has_gccvisibility = False
min,maj,pat = env['SWIGVERSION']
if min==1 and maj==3 and pat>=29:
	swig_has_gccvisibility = True

if env.get('HAVE_GCC'):
	python_env.Append(CPPFLAGS=['-O3'])
	if swig_has_gccvisibility and env.has_key('HAVE_GCCVISIBILITY'):
		python_env.Append(CCFLAGS=['-fvisibility=hidden']);

objs = []

python_env.AppendUnique(CPPPATH=['#base/generic']+env['PYTHON_CPPPATH'])

for s in srcs:
	objs += python_env.SharedObject(s)	

#----------------------------------------------
# SWIG wrapper

def get_new_swig_flags(env):
	min,maj,pat = env['SWIGVERSION']
	flags = []
	if min==1 and maj==3 and pat>=28:
		flags += ['-O']
	return flags

swigobj = python_env.SharedObject('ascpy.i'
	, SWIGFLAGS=['-python','-c++'] + get_new_swig_flags(env)
)
python_env.SideEffect(['ascpy.py','ascpy_wrap.h'],'ascpy$SWIGCXXFILESUFFIX')
python_env.Depends('ascpy.py',['ascpy.i'])
python_env.Clean('ascpy_wrap$SWIGCXXFILESUFFIX',swigobj)
python_env.Clean('ascpy.py','ascpy$SWIGCXXFILESUFFIX')
python_env.Clean('ascpy_wrap.h','ascpy$SWIGCXXFILESUFFIX')

_libs = ['ascend']+env['PYTHON_LIB']
if not env.get('MSVS'):
	_libs.append('stdc++')

swiglib = python_env.SharedLibrary("ascpy",objs + swigobj
	, LIBS = _libs
	, LIBPATH = ['#'] + env['PYTHON_LIBPATH']
	, SHLIBPREFIX = '_'
)

#---------------------------------------------
# CONFIG & runtime shell script for posix

configpy = env.SubstInFile(source='config.py.in')
configh = env.SubstInFile(source='config.h.in')

if platform.system() != "Windows" or env.has_key('IS_MINGW'):
	ascendcmd = env.SubstInFile(source='ascend.in')
	env.AddPostAction(ascendcmd, 'chmod 755 $TARGET')
	ascdevcmd = env.SubstInFile(source='ascdev.in')
	env.AddPostAction(ascdevcmd, 'chmod 755 $TARGET')

#---------------------------------------------
# LITTLE WEE TEST PROGRAM for debuggin the c++ wrapper
#
#libascxx = env.SharedLibrary('ascxx',objs
#	, LIBS = ['ascend'] + env['PYTHON_LIB']
#	, LIBPATH = ['.'] + ['#'] + env['PYTHON_LIBPATH']
#)
#
#ascxxtest = env.Program('ascxxtest',['ascxxtest.cpp']
#	, LIBS = ['ascxx','ascend']
#	, LIBPATH = ['.','#']
#)
#
#env.Alias('ascxx',ascxxtest)

#---------------------------------------------
# INSTALLATION

if env.get('CAN_INSTALL'):
	env.InstallProgram(env['INSTALL_ROOT']+env['INSTALL_BIN'],ascendcmd)

	import glob
	pythonfiles = glob.glob("*.py")

	env.InstallShared(env['INSTALL_ROOT']+env['INSTALL_ASCDATA']+"/",pythonfiles)

	gladefiles = glob.glob("glade/*")
	env.InstallShared(env['INSTALL_ROOT']+env['INSTALL_ASCDATA']+"/glade/",gladefiles)

	env.InstallShared(env['INSTALL_ROOT']+env['INSTALL_ASCDATA']+"/",swiglib)

if platform.system()=="Windows":
	env.Append(NSISDEFINES={'OUTFILE':env['WIN_INSTALLER_NAME']})
	installer = env.Installer('create.nsi')
	Depends(installer,[swiglib,configpy,configh,"../models"])
	env.Alias('installer',installer)

# vim: set syntax=python:

