Import('env')

srcs = Split("""

	library.cpp type.cpp module.cpp symchar.cpp
	instance.cpp instanceinterfacedata.cpp
	method.cpp name.cpp
	reporter.cpp simulation.cpp set.cpp units.cpp dimensions.cpp extmethod.cpp
	variable.cpp relation.cpp
	solver.cpp curve.cpp plot.cpp
	solverparameters.cpp solverparameter.cpp solverparameteriterator.cpp
	solverstatus.cpp solverreporter.cpp
	incidencematrix.cpp

""")

# Build a static library with all the sources

cxxflags = []
cppflags = []

import platform

if platform.system()=='Windows' and env.has_key('MSVS'):
	cxxflags += ['/EHsc'] # for exceptions (as suggested by a MSVC error msg, dunno if it's right or not -- JP)

if env.has_key('HAVE_GCC'):
	cppflags += ['-O3']


objs = []
for s in srcs:
	objs += env.SharedObject(s
		, CPPPATH = ['../../base/generic']+env['PYTHON_CPPPATH']

		, CPPFLAGS = cppflags
		, CCFLAGS = cxxflags
	)	

#----------------------------------------------
# SWIG Builder

def swig_modify_targets(target, source, env):
	target.append('ascpy.py')
	target.append('ascpy_wrap.h')
	return target, source

swig_builder = Builder(
	action='$SWIG $SWIGFLAGS -o $TARGET $SOURCE'
	, emitter=swig_modify_targets
)
env.Append(BUILDERS={'Swig':swig_builder})

#---------------------------------------------

def get_new_swig_flags(env):
	min,maj,pat = env['SWIGVERSION']
	flags = []
	if min==1 and maj==3 and pat>=28:
		flags += ['-O']
	return flags

swiglib = env.SharedLibrary("ascpy",objs + ['ascpy.i']
	, LIBS = ['ascend'] + env['PYTHON_LIB']
	, LIBPATH = ['#'] + env['PYTHON_LIBPATH']
	, SWIGFLAGS=['-python','-c++'] + get_new_swig_flags(env)
	, CPPPATH = ['../../base/generic'] + env['PYTHON_CPPPATH']
	, CPPFLAGS = cppflags
	, CCFLAGS = cxxflags
	, SHLIBPREFIX = '_'
)

#env.Depends(swiglib,'ascpy.py')

#print env['SUBST_DICT']

configpy = env.SubstInFile(source='config.py.in')
configh = env.SubstInFile(source='config.h.in')

ascendcmd = env.SubstInFile(source='ascend.in')

#---------------------------------------------
# INSTALLATION

if env.has_key('CAN_INSTALL') and env['CAN_INSTALL']:
	env.InstallProgram(env['INSTALL_ROOT']+env['INSTALL_BIN'],ascendcmd)

	import glob
	pythonfiles = glob.glob("*.py")

	env.Install(env['INSTALL_ROOT']+env['INSTALL_DATA']+"/ascend/",pythonfiles)

	gladefiles = glob.glob("glade/*")
	env.Install(env['INSTALL_ROOT']+env['INSTALL_DATA']+"/ascend/glade/",gladefiles)

	env.Install(env['INSTALL_ROOT']+env['INSTALL_DATA']+"/ascend/",swiglib)

if env.has_key('WITH_INSTALLER') and env['WITH_INSTALLER']:
	import platform
	if platform.system()=="Windows":
		installer = env.Nsis('create.nsi')
		Depends(installer,[swiglib,configpy,configh,ascendcmd])
