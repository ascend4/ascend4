Import('env')

srcs = Split("""

	library.cpp type.cpp module.cpp symchar.cpp
	instance.cpp instanceinterfacedata.cpp
	method.cpp name.cpp
	reporter.cpp simulation.cpp set.cpp units.cpp dimensions.cpp extmethod.cpp
	variable.cpp relation.cpp
	solver.cpp curve.cpp plot.cpp
	solverparameters.cpp solverparameter.cpp solverparameteriterator.cpp
	solverstatus.cpp solverreporter.cpp
	incidencematrix.cpp

""")

libs = Split("""
	asccompiler ascpackages ascsolver ascutilities ascgeneral 
""")


libpath = [
	'../../base/generic/compiler'
	,'../../base/generic/packages'
	,'../../base/generic/solver'
	,'../../base/generic/utilities'
	,'../../base/generic/general'
]

# Build a static library with all the sources

lib = env.Library("ascxx",srcs
	, LIBS = libs
	, LIBPATH = libpath
	, CPPPATH = ['../../base/generic']+env['PYTHON_CPPPATH']
	, CPPDEFINES = {
		'ASCXX_USE_PYTHON':None
		,'DEFAULT_ASCENDLIBRARY':'\\"'+env['DEFAULT_ASCENDLIBRARY']+'\\"'
	  }
	, CPPFLAGS = ['-O3']
)	

#----------------------------------------------
# SWIG Builder

def swig_modify_targets(target, source, env):
	target.append('ascend.py')
	target.append('ascend_wrap.h')
	return target, source

swig_builder = Builder(
	action='$SWIG $SWIGFLAGS -o $TARGET $SOURCE'
	, emitter=swig_modify_targets
)
env.Append(BUILDERS={'Swig':swig_builder})
#---------------------------------------------


swig = env.Swig(target=['ascend_wrap.cc'],source=['ascend.i']
	, SWIGFLAGS=['-python','-c++']
	, CPPFLAGS = ['-O3']
)


swiglib = env.SharedLibrary("ascend",['ascend_wrap.cc']
	, LIBS = ['ascxx']+libs+env['PYTHON_LIB']
	, LIBPATH = ['.']+libpath+env['PYTHON_LIBPATH']
	, CPPPATH = ['../../base/generic']+env['PYTHON_CPPPATH']
	, CPPDEFINES = {
		'ASCXX_USE_PYTHON':None
		,'DEFAULT_ASCENDLIBRARY':'\\"'+env['DEFAULT_ASCENDLIBRARY']+'\\"'
	  }
	, CPPFLAGS = ['-O3']
	, SHLIBPREFIX = '_'
)

env.Depends(swiglib,'ascend.py')

print env['SUBST_DICT']

env.SubstInFile(source='config.py.in')

