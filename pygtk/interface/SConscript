Import('env')

srcs = Split("""

	library.cpp type.cpp module.cpp symchar.cpp
	instance.cpp instanceinterfacedata.cpp
	method.cpp name.cpp
	reporter.cpp simulation.cpp set.cpp units.cpp dimensions.cpp extmethod.cpp
	variable.cpp relation.cpp
	solver.cpp curve.cpp plot.cpp
	solverparameters.cpp solverparameter.cpp solverparameteriterator.cpp
	solverstatus.cpp solverreporter.cpp
	incidencematrix.cpp

""")

# Build a static library with all the sources

python_env = env.Copy()
python_env.Replace(
	CPPFLAGS=[]
	, CCFLAGS=[]
	, CPPDEFINES=[]
	, LIBS=[]
)

import platform

if platform.system()=='Windows' and env.has_key('MSVS'):
	python_env.Append(CCFLAGS=['/EHsc']) # for exceptions (as suggested by a MSVC error msg, dunno if it's right or not -- JP)

swig_has_gccvisibility = False
min,maj,pat = env['SWIGVERSION']
if min==1 and maj==3 and pat>=29:
	swig_has_gccvisibility = True

if env.has_key('HAVE_GCC'):
	python_env.Append(CPPFLAGS=['-O3'])
	if swig_has_gccvisibility and env.has_key('HAVE_GCCVISIBILITY'):
		python_env.Append(CCFLAGS=['-fvisibility=hidden']);

objs = []

python_env.Append(CPPPATH=['#base/generic']+env['PYTHON_CPPPATH'])

for s in srcs:
	objs += python_env.SharedObject(s)	

#----------------------------------------------
# SWIG Builder

#def swig_modify_targets(target, source, env):
#	target.append('ascpy.py')
#	target.append('ascpy_wrap.h')
#	return target, source
#
#swig_builder = Builder(
#	action='$SWIG $SWIGFLAGS -o $TARGET $SOURCE'
#	, emitter=swig_modify_targets
#)
#python_env.Append(BUILDERS={'Swig':swig_builder})

#---------------------------------------------

def get_new_swig_flags(env):
	min,maj,pat = env['SWIGVERSION']
	flags = []
	if min==1 and maj==3 and pat>=28:
		flags += ['-O']
	return flags

swiglib = python_env.SharedLibrary("ascpy",objs + ['ascpy.i']
	, LIBS = ['ascend'] + env['PYTHON_LIB']
	, LIBPATH = ['#'] + env['PYTHON_LIBPATH']
	, SWIGFLAGS=['-python','-c++'] + get_new_swig_flags(env)
	, SHLIBPREFIX = '_'
)

configpy = env.SubstInFile(source='config.py.in')
configh = env.SubstInFile(source='config.h.in')

ascendcmd = env.SubstInFile(source='ascend.in')

env.Execute(Chmod(ascendcmd, 0755))

#---------------------------------------------
# INSTALLATION

if env.has_key('CAN_INSTALL') and env['CAN_INSTALL']:
	env.InstallProgram(env['INSTALL_ROOT']+env['INSTALL_BIN'],ascendcmd)

	import glob
	pythonfiles = glob.glob("*.py")

	env.Install(env['INSTALL_ROOT']+env['INSTALL_DATA']+"/ascend/",pythonfiles)

	gladefiles = glob.glob("glade/*")
	env.Install(env['INSTALL_ROOT']+env['INSTALL_DATA']+"/ascend/glade/",gladefiles)

	env.Install(env['INSTALL_ROOT']+env['INSTALL_DATA']+"/ascend/",swiglib)

if env.has_key('WITH_INSTALLER') and env['WITH_INSTALLER']:
	import platform
	if platform.system()=="Windows":
		installer = env.Nsis('create.nsi')
		Depends(installer,[swiglib,configpy,configh,ascendcmd])
