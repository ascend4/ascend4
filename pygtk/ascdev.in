#!@PYTHON@
# to debug this program using 'gdb', invoke 'ASC_GDB=1 ascdev'.

import os.path, sys, platform;

def add_at_start(envvar,pathcomponents):
	""" add path components at start of envvar, return 1 if changes made """

	if not os.environ.get(envvar):
		v = SEP.join(pathcomponents)
		os.environ[envvar]=v
		return 1

	restart = 0
	pathcomponents = [os.path.abspath(i) for i in pathcomponents]
	envvals = [os.path.abspath(i) for i in os.environ[envvar].split(SEP)]
	for k in range(0,len(pathcomponents)):
		p = pathcomponents[k]
		if p in envvals[k+1:]:
			envvals.remove(p)
			restart = 1
	for p in [pathcomponents[i] for i in range(len(pathcomponents))[::-1]]:
		if p not in envvals:
			envvals.insert(0,p)
			restart = 1
	os.environ[envvar]=SEP.join(envvals)
	return restart
		
if __name__=='__main__':
	sourceroot="@SOURCE_ROOT@"
	script=os.path.join(sys.argv[0])

	if platform.system()=="Windows":
		LD_LIBRARY_PATH="PATH"
		SEP = ";"
	else:
		LD_LIBRARY_PATH="LD_LIBRARY_PATH"
		SEP = ":"

	restart = []

	# ensure that we have our 'models' dir in the ASCENDLIBRARY path
	modeldirs = [os.path.join(sourceroot,"models")]
	solverdir = os.path.join(sourceroot,"solvers")
	solverdirs = [os.path.join(solverdir,d) for d in ['qrslv','conopt','lrslv','cmslv','lsode','ida']]
	if add_at_start('ASCENDLIBRARY',modeldirs+solverdirs):
		restart.append('ASCENDLIBRARY')

	# ensure that we have our shared libraries in the LD_LIBRARY_PATH
	libdirs = [sourceroot,os.path.join(sourceroot,"pygtk")]
	if add_at_start(LD_LIBRARY_PATH,libdirs):
		restart.append(LD_LIBRARY_PATH)

	# ensure our pygtk dir is in the PYTHONPATH
	pypath = [os.path.join(sourceroot,"pygtk")]
	if add_at_start('PYTHONPATH',pypath):
		restart.append('PYTHONPATH')

	if restart:
		print "\nRestarting with..."
		for v in restart:
			print "   export %s=%s" % (v,os.environ[v])
		if os.environ.get('ASC_GDB'):
			print "   via GDB..."
			os.execvp("gdb",['--symbols=../@SHLIBPREFIX@ascend@SHLIBSUFFIX@','--args','python',script]+sys.argv[1:])
		else:
			print "PYTHON... ",script
			sys.stdout.flush() # needed for rxvt on Windows
			os.execvp("python",[script,script]+sys.argv[1:])
		# the above calls don't return so we can forget about line of enqiry


	print "\nRunning with..."
	for v in [LD_LIBRARY_PATH,'ASCENDLIBRARY','PYTHONPATH']:
		print "   %s = %s" % (v,os.environ[v])
	
	import ascpy
	from gtkbrowser import *
	assetspath =os.path.join(sourceroot,"pygtk","glade")
	print "ASSETS PATH = %s" % assetspath
	B = Browser(assetspath=assetspath)
	B.run()	
