#  A Global Rules file for building ASCEND, MS VC++5.0 version
#  by Mark Thomas
#  July 1997
# 
#  $Revision: 1.2 $
#  $Date: 1997/09/08 20:13:22 $
#  $Author: ballan $
#  $Source: /afs/cs.cmu.edu/project/ascend/Repository/ascend4/Makefile.Rules.vc,v $
#
#
#  This file is combines the make rules required to build ASCEND into a
#  common location to make it easier to propagate changes.  This file
#  expects/accepts the following variables:
#    EXECUTABLE:         The name of an executable to build
#    PURIFIED_EXEC:      The name of a Purified(tm) executable to build
#    QUANTIFIED_EXEC:    The name of a Quantified(tm) executable to build
#
#    EXEC_OBJS:          The objects files required to build $(EXECUTABLE)
#    EXEC_SRCS:          The source files that are used to build $(EXEC_OBJS)
#    EXEC_LIBS:          The libraries that $(EXEC_OBJS) must be linked
#                        against in order to build $(EXECUTABLE)
#
#
#    LIBRARY:            The name of a library to build
#
#    LIB_OBJS:           The object files required to build $(LIBRARY)
#    LIB_SRCS:           The source files hat are used to build $(LIB_OBJS)
#
#
#    DIR_SPECIFIC_DEFS:  Defines (-D flags) that should be used when
#                        compiling source files in the current directory
#    DIR_SPECIFIC_INCS:  Includes (-I flags) that should be used when
#                        compiling source files in the current directory
#




ARCHIVE = $(builddir)\archive



.SUFFIXES:
.SUFFIXES: .c .f .i .obj
.c.obj:
	$(CC) $(CC_SWITCHES) -c $<
.c.i:
	$(CPP) $(CC_SWITCHES) $< > $@
.f.obj:
	$(F77) $(F77_SWITCHES) -c $<



$(EXECUTABLE) _dummy1:: $(EXEC_OBJS)
	$(RM) $@
	set LIB=$(VCTOOLS)\lib
	$(LD) $(LD_FLAGS) $(EXEC_LIBS) -out:$@ $(EXEC_OBJS)

$(PURIFIED_EXEC) _dummy2:: $(EXEC_OBJS)
	$(RM) $@
	$(PURIFY) $(PURIFY_OPTS) $(CC) -o $@ $(LD_FLAGS) \
		$(EXEC_OBJS) $(EXEC_LIBS)

$(QUANTIFIED_EXEC) _dummy3:: $(EXEC_OBJS)
	$(RM) $@
	$(PURIFY) $(PURIFY_OPTS) $(CC) -o $@ $(LD_FLAGS) \
		$(EXEC_OBJS) $(EXEC_LIBS)

$(LIBRARY) _dummy4:: $(ARCHIVE)\$(LIBRARY)

$(ARCHIVE)\$(LIBRARY) _dummy5:: $(LIB_OBJS)
	$(RM) $@
	$(AR) -nologo -out:$@ $(LIB_OBJS)



#  Targets to install ASCEND.  Need to be reworked.

install: install-binaries install-scripts install-libraries install-man

install-make-dirs:
	for i in $(INSTALL_MAKE_DIRS) /dev/null ; do \
		if [ ! $$i = /dev/null ]; then \
			test -d $$i || mkdir $$i ; \
		fi ; \
	done

install-binaries: $(INSTALL_EXEC_LIST)

install-scripts: $(INSTALL_SCRIPT_LIST)

install-libraries: $(INSTALL_LIBRARY_LIST)

install-man: $(INSTALL_MAN_LIST)

$(TARGET_DIR)\$(INSTALLED_TIME): $(ASC_TK_FILES) $(MODEL_FILES) $(HELP_FILES)
	@for i in $? /dev/null ; do \
	  if [ $$i != "/dev/null" ]; then \
	    echo Installing `echo $$i | sed 's,^.*/,,'` "--> $(TARGET_DIR)"; \
	    $(INSTALL_DATA) $$i $(TARGET_DIR) ; \
	  fi ; \
	done
	@echo 'Remove this file to force a reinstall of all files in this dir'\
		> $@



#  A target to make a backup copy of you Makefile.  Useful to do before
#  you rerun configure so you don't lose all the hacks you added.

save-makes::
	-$(CP) Makefile Makefile.SAVED



#  Targets to remove generated files.  `distclean' removes nearly
#  everything generated since you last ran `configure'

clean::
	-@for i in $(ASC_TK_SUBDIRS) $(MODEL_SUBDIRS) $(HELP_SUBDIRS) \
	/dev/null ; do \
	  if [ $$i != "/dev/null" ]; then \
	    (cd $$i ; $(MAKE) -f Makefile.vc clean RM="$(RM)" \
		RULES_FILE="../$(RULES_FILE)"); \
	  fi ; \
	done
	-$(RM) $(ARCHIVE)\$(LIBRARY) $(EXECUTABLE) *.obj *.i core a.out \
		$(PURIFIED_EXEC) $(QUANTIFIED_EXEC) y.output y.tab.c y.tab.h

mostlyclean reallyclean::
	@$(ECHO) Obsolete target. Please use make clean or make distclean.
	$(MAKE) -f Makefile.vc clean
	
distclean:: clean
	-@for i in $(ASC_TK_SUBDIRS) $(MODEL_SUBDIRS) $(HELP_SUBDIRS) \
	/dev/null ; do \
	  if [ $$i != "/dev/null" ]; then \
	    (cd $$i ; $(MAKE) -f Makefile.vc distclean RM="$(RM)" \
		RULES_FILE="../$(RULES_FILE)"); \
	  fi ; \
	done
	-$(RM) Makefile Makefile.SAVED TAGS tags *~ \#* *.bak



#  Targets to generate emacs style (TAGS) and vi style (tags) tables
#  for quick lookup of function definitions and Tcl procedures

TAGS::
	$(RM) $@
	-$(ETAGS) --include=../compiler/TAGS --include=../solver/TAGS \
		--include=../interface/TAGS --include=../packages/TAGS \
		--include=../utilities/TAGS --include=../general/TAGS \
		--language=c *.c *.h *.l *.y
	-$(ETAGS) --append --language=none \
		--regex=/proc[ \t]+\([^ \t]+\)/\1/ *.tcl *.t

tags::
	$(RM) $@
	-$(CTAGS) --defines --typedefs-and-c++ --language=c *.h *.c *.l *.y
	-$(CTAGS) --append --language=none \
		--regex=/proc[ \t]+\([^ \t]+\)/\1/ *.tcl *.t



#  Targets to generate or remove dependency information.  `nodepend'
#  removes dependency information, `depend' generates dependency
#  information, and `depend-nosys' generates dependency information but
#  leaves out dependencies on system header files.

nodepend: $(LIB_SRCS) $(EXEC_SRCS)
	$(DEPEND_RM) $(DEPEND_FLAGS) $(DEPEND_INCLUDES) $?

depend-nosys depend-no-sys: $(LIB_SRCS) $(EXEC_SRCS)
	$(DEPEND_NOSYS) $(DEPEND_FLAGS) $(DEPEND_INCLUDES) $?
	
depend: $(LIB_SRCS) $(EXEC_SRCS)
	$(DEPEND) $(DEPEND_FLAGS) $(DEPEND_INCLUDES) $?
