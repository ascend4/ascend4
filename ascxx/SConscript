#!/usr/bin/env python
Import('env')

import platform, sys, subprocess, re
import packaging.version as pv

srcs = Split("""
	library.cpp compiler.cpp type.cpp module.cpp symchar.cpp
	instance.cpp instanceinterfacedata.cpp
	matrix.cpp method.cpp name.cpp
	reporter.cpp simulation.cpp set.cpp units.cpp dimensions.cpp extmethod.cpp
	variable.cpp registry.cpp relation.cpp 
	solver.cpp curve.cpp plot.cpp
	solverhooks.cpp
	solverparameters.cpp solverparameter.cpp solverparameteriterator.cpp
	solverstatus.cpp solverreporter.cpp
	value.cpp
	incidencematrix.cpp
	integrator.cpp
	integratorreporter.cpp
	annotation.cpp
""")

# Build a static library with all the sources

envp = env.Clone()

# get compile/link settings for libpython, Python.h
print("PYTHON_PKG =",envp['PYTHON_PKG'])
envp.ParseConfig('pkg-config $PYTHON_PKG --cflags --libs')

configh = envp.Substfile(source='config.h.in')

objs = []
for s in srcs:
	objs += envp.SharedObject(s)

#---------------------------------------------
# LITTLE WEE TEST PROGRAMS for debuggin the c++ wrapper
# currently out of order because of need for a separate builddir due to ASCXX_WITH_PYTHON flag taking different 

envx = env.Clone()
envx.ParseConfig('pkg-config $PYTHON_PKG_EMBED --cflags --libs')
print("envx LIBS =",envx['LIBS'])
envx.Append(LIBS=['ascend'],LIBPATH=['#'])
print("envx LIBS =",envx['LIBS'])
ipopttest = envx.Program('testipopt',['testipopt.cpp'] + objs)
conopttest = envx.Program('testconopt',['testconopt.cpp'] + objs)
slvreqtest = envx.Program('testslvreq',['testslvreq.cpp'] + objs)

#---------------------------------------------
# BUILD THE SWIG WRAPPER

# check SWIG version

def get_swig_version(env):
	#print("SWIG='%s'" % env['SWIG'])
	cmd = [env['SWIG'],'-version']
	if sys.version_info[0]==2:
		output = subprocess.check_output(cmd)
	else:
		output = subprocess.check_output(cmd,encoding='utf-8')
	
	re1 = r"SWIG\s+Version\s+(?P<ver>[0-9][^\s]*)\s*$"
	expr = re.compile(re1,re.M);
	m = expr.search(output);
	if not m:
		#print("Got '%s'"%output)
		return None
	return pv.parse(m.group('ver'))

def check_swig_version(context):
	try:
		context.Message("Checking version of SWIG... ")
		ver = get_swig_version(context.env)
		context.env['SWIGVERSION']=ver
		if ver >= pv.parse('3'):
			context.Result("ok, %s" % (ver))
			return True;
		else:
			context.Result("too old, %d.%d.%d" % (maj,min,pat))
			return False;
	except Exception as e:
		context.Result("Failed to detect version, or failed to run SWIG (%s)"% str(e))
		return False;

conf = envp.Configure(custom_tests={'CheckSwig':check_swig_version})

with_python=True
if not conf.CheckCHeader('Python.h'):
	with_python=False
if not conf.CheckSwig():
	with_python=False
	without_python_reason = 'SWIG >= 1.3.24 is required'
else:
	conf.env.Append(SWIGFLAGS=['-python'])

envp = conf.Finish()

print("SWIGVERSION = ",env['SWIGVERSION'])

import SCons.Script
SWIGScanner = SCons.Scanner.ClassicCPP(
	"SWIGScan"
	, ".i"
	, "CPPPATH"
	, '^[ \t]*[%,#][ \t]*(?:include|import)[ \t]*(<|")([^>"]+)(>|")'
)
envp.Append(SCANNERS=[SWIGScanner])

#----------------------------------------------
# SWIG wrapper

def get_new_swig_flags(env):
	flags = []
	if pv.parse(env['SWIGVERSION']) >= pv.parse('1.3.28'):
		flags += ['-O']

	#print "FLAGS=%s" % env.get('GRAPHVIZ_CPPPATH')
	if env.get('WITH_GRAPHVIZ') and env.get('GRAPHVIZ_CPPPATH'):
		flags += ['-I%s' % i for i in env.get('GRAPHVIZ_CPPPATH')]
		
	if env.get('LIBS') and 'msvcr71' in env['LIBS']:
		flags += ['-DHAVE_MSVCR71']
		
	return flags

envs = envp.Clone()
envs.Append(LIBS=['ascend'],LIBPATH=['#'])

if with_python:
    if '-Wall' in envs.get('CCFLAGS'):
        envs['CCFLAGS'] = envs['CCFLAGS'].remove('-Wall')

    if platform.system()=="Windows":
        envs['SHLIBSUFFIX']='.pyd'
        if env.get('LIBS') and 'msvcr71' in env['LIBS']:
            envs.Append(CPPDEFINES=['HAVE_MSVCR71'])
        envs.Append(LINKFLAGS="-static-libgcc ")
        #TDM-GCC does *not* require or support the following:
        #swig_env.Append(LINKFLAGS="-static-libstdc++")

    elif platform.system()=="Darwin":
        envs['SHLIBSUFFIX']='.so'

    swigobjs = []

    for swigf in Split("""
        ascpy.i
    """):
        swigobj = envs.SharedObject(swigf
            , SWIGFLAGS=['-python','-c++'] + get_new_swig_flags(env)
        )
        #swig_env.SideEffect(['ascpy.py','ascpy_wrap.h'],'ascpy$SWIGCXXFILESUFFIX')
        envs.Depends('ascpy$SWIGCXXFILESUFFIX',['ascpy.i','solver.i','plot.i'])
        envs.Clean('ascpy_wrap$SWIGCXXFILESUFFIX',swigobj)
        envs.Clean('ascpy.py','ascpy$SWIGCXXFILESUFFIX')
        envs.Clean('ascpy_wrap.h','ascpy$SWIGCXXFILESUFFIX')

        swigobjs.append(swigobj)
        
    if envs.get('WITH_DMALLOC'):
        envs.Append(LIBS = ['dmalloc'])
        envs.AppendUnique(LIBPATH = [env.get('DMALLOC_LIBPATH')])

    if envs.get('WITH_GRAPHVIZ'):
        envs.Append(LIBS = env['GRAPHVIZ_LIBS'])
        envs.AppendUnique(LIBPATH = [env.get('GRAPHVIZ_LIBPATH')])

    swiglib = envs.SharedLibrary("ascpy",objs + swigobjs
        , SHLIBPREFIX = '_'
    )
else:
	print("Skipping... Python support:", without_python_reason)
        
            
if 0:
	#if platform.system()=='Windows' and env.get('MSVS'):
	#	envp.Append(CCFLAGS=['/EHsc']) # for exceptions (as suggested by a MSVC error msg, dunno if it's right or not -- JP)
	#swig_has_gccvisibility = True
	#
	#if env.get('HAVE_GCC'):
		#python_env.Append(CPPFLAGS=['-O3'])
	#	if swig_has_gccvisibility and 'HAVE_GCCVISIBILITY' in env:
	#		python_env.Append(CCFLAGS=['-fvisibility=hidden']);

	#---------------------------------------------
	# INSTALLATION

	# python compile bytecode

	if env.get('CAN_INSTALL'):
		env.InstallShared(Dir(env.subst("$INSTALL_ROOT$INSTALL_PYTHON_ASCEND")),swiglib)
		env.InstallShared(Dir(env.subst("$INSTALL_ROOT$INSTALL_PYTHON_ASCEND")),'ascpy.py')

# vim:ts=4:sw=4:syntax=python:noet
