Import('env')
import platform

# build the ASCEND IPOPT solver. we will do any configuration testing here now,
# also, only if the solver is requested.

ipopt_test_text = """
#if !defined(_WIN32)
# define FNAME_LCASE_DECOR
#endif

/* note that pkg-config sets the coin-or directory, so no need to prefix here */
#include <IpStdCInterface.h>
int main(){
	Number n;
	IpoptProblem nlp = 0;
	n = 1;
	FreeIpoptProblem(nlp); // probably a crash if you run this
	return 0;
}
"""

def CheckIPOPT(context):
	context.Message( 'Checking for IPOPT... ' )
	print("CPPPATH =",context.env['CPPPATH'])
	print("LIBS =",context.env['LIBS'])
	print("LIBPATH =",context.env['LIBPATH'])
	is_ok = context.TryLink(ipopt_test_text,".c")
	context.Result(is_ok)	
	return is_ok

if env.get('WITH_IPOPT'):
	solver_env = env.Clone()
	solver_env.AppendENVPath('PKG_CONFIG_PATH',"$IPOPT_PREFIX/lib/pkgconfig")
	solver_env.ParseConfig('pkg-config Ipopt --cflags --libs')

	conf = solver_env.Configure(custom_tests={'CheckIPOPT':CheckIPOPT})
	if not conf.CheckIPOPT():
		env['WITH_IPOPT'] = False	
	else:
		solver_env.Append(
			CPPDEFINES=[
				'ASC_WITH_IPOPT'
			]
		)
		solver_env = conf.Finish()
	
		if platform.system()=="Windows":
			solver_env.Append(
				CFLAGS=["-static"]
			)

		solver_env.Append(LIBS=['ascend'],LIBPATH=['#'])

		lib = solver_env.SharedLibrary("ipopt",["asc_ipopt.c"]
			,SHLIBSUFFIX = env['EXTLIB_SUFFIX']
			,SHLIBPREFIX = env['EXTLIB_PREFIX']
		)

		env.Depends(lib,env['libascend'])

		env['extfns'] += [lib]

		if env.get('CAN_INSTALL'):
			dir = Dir(env.subst("$INSTALL_ROOT$INSTALL_SOLVERS"))
			env.InstallShared(dir,lib)

# vim:syntax=python:sw=4:ts=4:noet
