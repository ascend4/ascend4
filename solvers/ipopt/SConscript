Import('env')
import platform, subprocess,shutil, pathlib

# build the ASCEND IPOPT solver. we will do any configuration testing here now,
# also, only if the solver is requested.

ipopt_test_text = """
#if !defined(_WIN32)
# define FNAME_LCASE_DECOR
#endif

/* note that pkg-config sets the coin-or directory, so no need to prefix here */
#include <IpStdCInterface.h>
int main(){
	Number n;
	IpoptProblem nlp = 0;
	n = 1;
	FreeIpoptProblem(nlp); // probably a crash if you run this
	return 0;
}
"""

def CheckIPOPT(context):
	context.Message( 'Checking for IPOPT... ' )

	# check that it exists according to pkgconfig
	try:
		cmd =[shutil.which("pkg-config"),"--libs","--cflags","ipopt"]
		res = subprocess.run(cmd,stdout=subprocess.PIPE,check=True)
		print("PKGCONFIG:",res.stdout)
	except:
		context.Result("no (pkg-config --exists)")
		return False
				
	# get the settings from pkg-config
	context.env.ParseConfig(str(pathlib.Path(shutil.which('pkg-config')))+' --cflags --libs ipopt')

	# test that we can link against it
	is_ok = context.TryLink(ipopt_test_text,".c")
	context.env.Append(CPPDEFINES='ASC_WITH_IPOPT')
	if is_ok:
		context.Result(is_ok)
	else:
		context.Result("no (failed to link)")
	return is_ok

if env.get('WITH_IPOPT'):
	solver_env = env.Clone()
	if env['IPOPT_PREFIX'] not in ['/usr']:
		solver_env.AppendENVPath('PKG_CONFIG_PATH',env.subst("$IPOPT_PREFIX/lib/pkgconfig"))
	
	conf = solver_env.Configure(custom_tests={'CheckIPOPT':CheckIPOPT})
	if not conf.CheckIPOPT():
		conf.env['WITH_IPOPT'] = False
#	else:
#		print("IPOPT LIBS =",conf.env['LIBS'])
#		print("IPOPT LIBPATH =",conf.env['LIBPATH']);
	solver_env = conf.Finish()
	
	if env['WITH_IPOPT']:
		if platform.system()=="Windows":
			solver_env.Append(
				CFLAGS=["-static"]
			)

		solver_env.Append(LIBS=['ascend'],LIBPATH=['#'])

		lib = solver_env.SharedLibrary("ipopt",["asc_ipopt.c"]
			,SHLIBSUFFIX = env['EXTLIB_SUFFIX']
			,SHLIBPREFIX = env['EXTLIB_PREFIX']
		)
		print("solver:",lib)
		
		env.Depends(lib,env['libascend'])

		env['extfns'] += [lib]
		
		if len(solver_env['LIBPATH'])==1:
			plusdir = str(Path(solver_env['LIBPATH']).parent.parent/'bin')
			if len(env.get('DLLDIRS')):
				env['DLLDIRS'] + os.pathsep
			env['DLLDIRS'] += plusdir
			# TODO check that libipopt-3.dll is located here....?
		else:
			print("Unexpected length of LIBPATH in IPOPT solver build")
		if env.get('CAN_INSTALL'):
			dir = Dir(env.subst("$INSTALL_ROOT$INSTALL_SOLVERS"))
			env.InstallShared(dir,lib)
	else:
		print("Skipping... IPOPT solver won't be built.")

# vim:syntax=python:sw=4:ts=4:noet
