(*	ASCEND modelling environment
	Copyright (C) 1997 Benjamin Andrew Allan
	Copyright (C) 2006 Carnegie Mellon University

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2, or (at your option)
	any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330,
	Boston, MA 02111-1307, USA.
*)
REQUIRE "bvp.a4l";
REQUIRE "plot.a4l";
(*
	This model demonstrates how to make a plot using a boundary value problem
	(BVP).

	by Benjamin Allan, May 17 1998.

	@NOTE we avoid tangling plot modeling with the mathematics @ENDNOTE
*)

MODEL plotbvp;

	bt IS_A bvp_test;

	y[pointSet] ALIASES (bt.nodes[0 .. bt.nstep*bt.npoint].y[1])
	WHERE pointSet IS_A set OF integer_constant
	WITH_VALUE (0 .. bt.nstep*bt.npoint);

	x[timeSet] ALIASES (bt.nodes[0 .. bt.nstep*bt.npoint].x)
	WHERE timeSet IS_A set OF integer_constant
	WITH_VALUE (0 .. bt.nstep*bt.npoint);


	Y_curve IS_A plt_curve(pointSet,y,x);

	(* Make Y_curve into the expected array for plt_plot *)
	curves[curve_set] ALIASES (Y_curve) WHERE
	curve_set IS_A set OF integer_constant;

	Plot_Y IS_A plt_plot_integer(curve_set,curves);

METHODS

	METHOD default_self;
		(*
		no defaults required here:
		RUN Plot_Y.default_self;
		RUN Y_curve.default_self;
		*)
		RUN bt.default_self;
		Plot_Y.title := 'd/dx = 2x exp(-2t) cos(t)';
		Plot_Y.XLabel := 'time t';
		Plot_Y.YLabel := 'x';
		Y_curve.legend := 'd/dx';
	END default_self;

	METHOD check_self;
		RUN Plot_Y.check_self;
		RUN Y_curve.check_self;
		RUN bt.check_self;
	END check_self;

	METHOD scale_self;
		RUN bt.scale_self;
	END scale_self;

	METHOD bound_self;
		RUN Plot_Y.bound_self;
		RUN Y_curve.bound_self;
		RUN bt.bound_self;
	END bound_self;

	METHOD default_all;
		RUN default_self;
	END default_all;

	METHOD check_all;
		RUN check_self;
	END check_all;

	METHOD bound_all;
		RUN bound_self;
	END bound_all;

	METHOD scale_all;
		RUN scale_self;
	END scale_all;

	METHOD specify;
		RUN bt.specify;
	END specify;

	METHOD values;
		RUN bt.values;
	END values;

	METHOD on_load;
		RUN reset;
		RUN default_self;
		RUN bound_self;
		RUN scale_self;
		RUN values;
	END on_load;

END plotbvp;
(* :ex: set ts=4: *)
