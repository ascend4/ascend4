(*********************************************************************\
	parplot.lib
	by Ben Allan
	Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1997 Benjamin Andrew Allan

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

\*********************************************************************)

(*********************************************************************\
  $Date: 1997/07/03 14:50:16 $
  $Revision: 1.2 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/libraries/plot.par.lib,v $
\*********************************************************************)

(*=============================================================================*

	 P L O T . P A R .  L  I  B
	 ---------------------------

	AUTHOR:	Ben Allan
		provoked by plot.lib by Peter Piela and Kirk A. Abbott

	DATES:	03/97 - Original code.

	CONTENTS:
		A parameterized plot library mostly compatible
		with plot.lib, but with variable graph titles.

REQUIREs	none!
*)

MODEL plt_point(
	x WILL_BE real;
	y WILL_BE real;
);
END plt_point;

(***************************************************************)

MODEL plt_curve(
	npnts IS_A set OF integer_constant;
	y_data[npnts] WILL_BE real;
	x_data[npnts] WILL_BE real;
);
(* points of matching subscript will be plotted in order of
 * increasing subscript value.
 *)
	legend				IS_A symbol; (* mutable now! *)
	FOR i IN [npnts] CREATE
		pnt[i]	IS_A plt_point(x_data[i],y_data[i]);
	END FOR;
END plt_curve;

(***************************************************************)

MODEL plt_plot_integer(
	curve_set IS_A set OF integer_constant;
	curve[curve_set] WILL_BE plt_curve;
);
	title, XLabel, YLabel IS_A symbol; (* mutable now! *)
	Xlow IS_A real;
	Ylow IS_A real;
	Xhigh IS_A real;
	Yhigh IS_A real;
	Xlog IS_A boolean;
	Ylog IS_A boolean;
END plt_plot_integer;

(***************************************************************)

MODEL plt_plot_symbol(
	curve_set IS_A set OF symbol_constant;
	curve[curve_set] WILL_BE plt_curve;
);
	title, XLabel, YLabel IS_A symbol; (* mutable now! *)
	Xlow IS_A real;
	Ylow IS_A real;
	Xhigh IS_A real;
	Yhigh IS_A real;
	Xlog IS_A boolean;
	Ylog IS_A boolean;
END plt_plot_symbol;

