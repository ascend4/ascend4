(*********************************************************************\
  H_G_thermodynamics.lib
  by Joseph J. Zaher
  Part of the Ascend Library

  This file is part of the Ascend modeling library.

  Copyright (C) 1994

  The Ascend modeling library is free software; you can redistribute
  it and/or modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation; either version 2 of the
  License, or (at your option) any later version.

  The Ascend Language Interpreter is distributed in hope that it will be
  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.

  \*********************************************************************)

(*********************************************************************\
  H_G_thermodynamics.lib
  $Date: 1997/07/03 14:49:34 $
  $Revision: 1.12 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/libraries/H_G_thermodynamics.lib,v $
\*********************************************************************)

(**
  **
  **  T  H  E  R  M  O  D  Y  N  A  M  I  C  S  .  L  I  B
  **  ----------------------------------------------------
  **
  **  AUTHOR:      Joseph J. Zaher
  **
  **  DATES:       07/91 - Original code.
  **               02/92 - Made compatible with new set version of ASCEND.
  **                       Scaled equations to enhance convergence, updated
  **                       vapor pressure correlation, added Pitzer extension
  **                       to vapor mixtures and UNIFAC extension to liquid
  **                       mixtures with help of Bob Huss.
  **               03/92 - Removed stream model.  Library remains purely
  **                       intensive without any assumption to static or
  **                       dynamic modeling.
  **               07/92 - Structural changes to provide a common thermodynamic
  **                       properties root model as the library interface.
  **                       Modified the existing phase distribution model
  **                       to incorporate an intensive mass balance over the
  **                       phases.  Residual quantities for pure vapor 
  **                       components estimate corrections from ideal gas 
  **                       behavior while residual quantities for pure liquid 
  **                       components estimate corrections from incompressible
  **                       fluid behavior.
  **               08/92 - Allowed component names in mixtures to be freely
  **                       specified by user.
  **               03/94 - Made compatible with gnu-ascend.
  **               05/94 - Removed refinement link of models correction and
  **                       and partial_component which should not contain T, 
  **                       P, and R anyway.  The interface to the library
  **                       is now returned to model thermodynamic_properties
  **                       where refinement to pure_component,
  **                       homogeneous_mixture, or heterogeneous_mixture
  **                       is possible.
  **               06/94 - Changed canonical variables from V, H, and S to
  **                       V, H, and G. Also, liquid component model was
  **                       condensed, eliminating instance saturated.
  **
  **               08/94 - Slight structural changes made by Bob Huss to
  **                       allow refinement of non-thermodynamic models,
  **                       and to include Wilson liquid mixture written
  **                       by Boyd Safrit.
  **
  **               03/96 - Changed to be compatible with ASCEND IV and
  **                       fixed SUMS so that empty ones come up
  **                       dimensionally correct. Also grouped constants
  **                       so that simplification has an easy time.
  **                       By Ben Allan.
  **
  **
  **  CONTENTS:    ASCEND structure for calculating the basic set of intensive  
  **               thermodynamic properties molar volume, enthalpy, and 
  **               entropy for single and multiple phase streams of pure and 
  **               mixed components. Specify procedures are included which
  **               have been designed to provide a means of calculating ideal
  **               approximations when base models are used.  For pure
  **               component vapors, the ideal gas law can be obtained whereas
  **               for pure component liquids, incompressibility can be
  **               specified.  Ideal vapor and liquid mixtures are maintained
  **               by setting all partial molar excess properties to zero.
  **               Distribution of components among multiple phases can be
  **               ideally computed using constant relative volatilities.
  **
  **               For more rigorous non-ideal calculations, some generalized
  **               refinements of the base models are provided.  For pure
  **               component vapors, a Pitzer correlation of the two term
  **               virial equation allows a more accurate compressibility and
  **               residual calculation.  The widely used Rackett correlation
  **               is accurate in estimating the effect of temperature on
  **               liquid volumes.  Non-ideal vapor mixtures are computed using
  **               an extension of the Pitzer correlation where the exact
  **               composition dependence of the second virial coefficient is
  **               given by statistical mechanics.  A reliable UNIFAC model
  **               estimates non-ideal liquid mixtures.  Phase equilibrium
  **               can be enforced rigorously among multiple phases which 
  **               in turn will allow calculation of the true relative 
  **               volatilities.
  **
  **  REQUIRES:    "atoms.lib"
  **               "components.lib"
  **
  **)

(* REQUIRE components.lib *)

MODEL thermodynamic_properties;

	T                                       IS_A temperature;
	P                                       IS_A pressure;
	V                                       IS_A molar_volume;
	H                                       IS_A molar_energy;
	G                                       IS_A molar_energy;
	scale				IS_A scaling_constant;


  METHODS
    METHOD clear;
	T.fixed := FALSE;
	P.fixed := FALSE;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
    END clear;
    METHOD specify;
	T.fixed := TRUE;
	P.fixed := TRUE;
	V.fixed := TRUE;
	H.fixed := TRUE;
	G.fixed := TRUE;
    END specify;
    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;
    METHOD scale;
	T.nominal := T;
	P.nominal := P;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	T.lower_bound := 1.0e-8{K};
	P.lower_bound := 1.0e-8{atm};
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	T.upper_bound := T + scale*T.nominal;
	P.upper_bound := P + scale*P.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;




END thermodynamic_properties;


MODEL pure_component REFINES thermodynamic_properties;

	data                                    IS_A td_component_constants;

END pure_component;


MODEL Pitzer_component REFINES pure_component;        

	P*V/((1{GAS_C})*data.Tc) = T/data.Tc + (P/data.Pc)*
	    (0.083 - 0.422*(data.Tc/T)^1.6 + data.omega*
	    (0.139 - 0.172*(data.Tc/T)^4.2));
	H/((1{GAS_C})*data.Tc) = data.H0/(1{GAS_C})/data.Tc +
	    (T - data.T0)     *(data.cpvapa/(1{GAS_C})/data.Tc) +
	    (T^2 - data.T0^2) *(data.cpvapb/2/(1{GAS_C})/data.Tc) +
	    (T^3 - data.T0^3) *(data.cpvapc/3/(1{GAS_C})/data.Tc) +
	    (T^4 - data.T0^4) *(data.cpvapd/4/(1{GAS_C})/data.Tc) +
	    (P/data.Pc)*
	    (0.083 - 1.097*(data.Tc/T)^1.6 + data.omega*
	    (0.139 - 0.894*(data.Tc/T)^4.2));
	G/((1{GAS_C})*data.Tc) = data.G0/(1{GAS_C})/data.Tc - 
	    (T/data.T0 - 1) * (data.H0 - data.G0)/((1{GAS_C})*data.Tc) -
	    (T*ln(T/data.T0) - T +data.T0)         *
		(data.cpvapa/(1{GAS_C})/data.Tc) -
	    (T^2 -   T*(2*data.T0) +data.T0^2)     *
		(data.cpvapb/2/(1{GAS_C})/data.Tc) -
	    (T^3/2 - T*(3/2*data.T0^2) +data.T0^3) *
		(data.cpvapc/3/(1{GAS_C})/data.Tc) -
	    (T^4/3 - T*(4/3*data.T0^3) +data.T0^4) *
		(data.cpvapd/4/(1{GAS_C})/data.Tc) +
	    T*ln(P/data.P0)/data.Tc +
	    (P/data.Pc)*
	    (0.083 - 0.422*(data.Tc/T)^1.6 + data.omega*
	    (0.139 - 0.172*(data.Tc/T)^4.2));

	T.lower_bound := 1.0e-12{K};
	P.lower_bound := 1.0e-12{Pa};
	V := 24{liter/mole};
	

  METHODS
    METHOD specify;
	T.fixed := TRUE;
	P.fixed := TRUE;
    END specify;

END Pitzer_component;


MODEL Rackett_component REFINES pure_component;

	VP                                      IS_A pressure;

	ln(VP/data.Pc)*T/data.Tc*abs(data.Tc - T) =
	    (data.vpa*abs(1.0 - T/data.Tc) +
	    data.vpb*abs(1.0 - T/data.Tc)^1.5 +
	    data.vpc*abs(1.0 - T/data.Tc)^3.0 +
	    data.vpd*abs(1.0 - T/data.Tc)^6.0)*(data.Tc - T);

	V/data.Vliq = 
	    data.Zc^(abs(1.0 - T/data.Tc)^(2/7))/
	    data.Zc^(abs(1.0 - data.Tliq/data.Tc)^(2/7));

	H/((1{GAS_C})*data.Tc) = data.H0/(1{GAS_C})/data.Tc +
	    (T - data.T0)      * (data.cpvapa/(1{GAS_C})/data.Tc)   +
	    (T^2 - data.T0^2)  * (data.cpvapb/2/(1{GAS_C})/data.Tc) +
	    (T^3 - data.T0^3)  * (data.cpvapc/3/(1{GAS_C})/data.Tc) +
	    (T^4 - data.T0^4)  * (data.cpvapd/4/(1{GAS_C})/data.Tc) + 
	    (VP/data.Pc)*
	    (0.083 - 1.097*(data.Tc/T)^1.6 + data.omega*
	    (0.139 - 0.894*(data.Tc/T)^4.2)) -
	    (data.Hv/(1{GAS_C})/data.Tc)*
		abs((data.Tc-T)/(data.Tc-data.Tb))^0.38 +
	    (P - VP)*(data.Vliq/(1{GAS_C})/data.Tc)*
	    (data.Zc^(abs(1.0 - T/data.Tc)^(2/7))/
	    data.Zc^(abs(1.0 - data.Tliq/data.Tc)^(2/7)))*(1.0 -
	    (-2/7)*(T/data.Tc)*(abs(1 - T/data.Tc)^(-5/7))*ln(data.Zc));

	G/((1{GAS_C})*data.Tc) = data.G0/(1{GAS_C})/data.Tc - 
	    (T/data.T0 - 1)    * ((data.H0 - data.G0)/(1{GAS_C})/data.Tc) -
	    (T*ln(T/data.T0) - T + data.T0)         *
		(data.cpvapa/(1{GAS_C})/data.Tc) -
	    (T^2 - T*(2*data.T0) + data.T0^2)       *
		(data.cpvapb/2/(1{GAS_C})/data.Tc) -
	    (T^3/2 - T*(3/2*data.T0^2) + data.T0^3) *
		(data.cpvapc/3/(1{GAS_C})/data.Tc) -
	    (T^4/3 - T*(4/3*data.T0^3) + data.T0^4) *
		(data.cpvapd/4/(1{GAS_C})/data.Tc) +
	    T*ln(VP/data.P0)/data.Tc +
	    (VP/data.Pc)*
	    (0.083 - 0.422*(data.Tc/T)^1.6 + data.omega*
	    (0.139 - 0.172*(data.Tc/T)^4.2)) +
	    (P - VP)*(data.Vliq/(1{GAS_C})/data.Tc)*
	    (data.Zc^(abs(1.0 - T/data.Tc)^(2/7))/
	    data.Zc^(abs(1.0 - data.Tliq/data.Tc)^(2/7)));

	VP.lower_bound := 1.0e-12{Pa};
	V := 0.1{liter/mole};


  METHODS
    METHOD clear;
	T.fixed := FALSE;
	P.fixed := FALSE;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
	VP.fixed := FALSE;
    END clear;
    METHOD specify;
	T.fixed := TRUE;
	P.fixed := TRUE;
    END specify;
    METHOD scale;
	T.nominal := T;
	P.nominal := P;
	VP.nominal := VP;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	T.lower_bound := 1.0e-8{K};
	P.lower_bound := 1.0e-8{atm};
	VP.lower_bound := 1.0e-8{atm};
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	T.upper_bound := T + scale*T.nominal;
	P.upper_bound := P + scale*P.nominal;
	VP.upper_bound := VP + scale*VP.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;


END Rackett_component;


MODEL partial_component;

	V                                       IS_A molar_volume;
	H                                       IS_A molar_energy;
	G                                       IS_A molar_energy;
	scale				IS_A scaling_constant;

  METHODS
    METHOD clear;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
    END clear;
    METHOD specify;
	V.fixed := TRUE;
	H.fixed := TRUE;
	G.fixed := TRUE;
    END specify;
    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;
    METHOD scale;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;

END partial_component;

MODEL mixture;

	components 			IS_A set OF symbol_constant;
	y[components]			IS_A mole_fraction;
	T                               IS_A temperature;
	P                               IS_A pressure;
	V                               IS_A molar_volume;
	H                               IS_A molar_energy;
	G                               IS_A molar_energy;
	scale				IS_A scaling_constant;

(* data[components] will be initialized only if we define real components in
   our mixture. In this model data[components] contains a bunch of non 
   initialized constants, but this does not affect the behaviour of our model *)

        data[components]                IS_A component_constants;

	SUM[y[i] | i IN components] = 1.0;

  METHODS
    METHOD clear;
	T.fixed := FALSE;
	P.fixed := FALSE;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
	y[components].fixed := FALSE;
    END clear;
    METHOD specify;
	T.fixed := TRUE;
	P.fixed := TRUE;
	V.fixed := TRUE;
	H.fixed := TRUE;
	G.fixed := TRUE;
	y[components-[CHOICE[components]]].fixed := TRUE;
    END specify;
    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;
    METHOD scale;
	FOR i IN components DO
	    y[i].nominal := y[i];
	END FOR;
	T.nominal := T;
	P.nominal := P;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	T.lower_bound := 1.0e-8{K};
	P.lower_bound := 1.0e-8{atm};
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	T.upper_bound := T + scale*T.nominal;
	P.upper_bound := P + scale*P.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;



END mixture;

MODEL homogeneous_mixture REFINES mixture;
END homogeneous_mixture;

MODEL td_homogeneous_mixture REFINES homogeneous_mixture;
	
	data[components] IS_REFINED_TO td_component_constants;
	pure[components]                        IS_A pure_component;
	partial[components]                     IS_A partial_component;

	T, pure[components].T ARE_THE_SAME;
	P, pure[components].P ARE_THE_SAME;     
	pure[components] ARE_ALIKE;
mix_V:	V* (data[CHOICE[components]].Pc/
	((1{GAS_C})*data[CHOICE[components]].Tc)) =
	    SUM[y[i]*partial[i].V | i IN components]*
	    (data[CHOICE[components]].Pc/
		((1{GAS_C})*data[CHOICE[components]].Tc));

mix_H:	H/((1{GAS_C})*data[CHOICE[components]].Tc) =
	    SUM[y[i]*partial[i].H | i IN components]/
            ((1{GAS_C})*data[CHOICE[components]].Tc);

mix_G:	G/((1{GAS_C})*data[CHOICE[components]].Tc) = 
	    SUM[y[i]*partial[i].G | i IN components]/
            ((1{GAS_C})*data[CHOICE[components]].Tc);

	FOR i IN components CREATE
	    data[i], pure[i].data ARE_THE_SAME;
	END FOR;
	y[components].lower_bound := 1.0e-12;

  METHODS
    METHOD clear;
	RUN pure[components].clear;
	RUN partial[components].clear;
	y[components].fixed := FALSE;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
    END clear;
    METHOD specify;
	RUN pure[components].specify;
	RUN partial[components].specify;
	y[components].fixed := TRUE;
	y[CHOICE[components]].fixed := FALSE;
    END specify;
    METHOD scale;
	RUN pure[components].scale;
	RUN partial[components].scale;
	FOR i IN components DO
	    y[i].nominal := y[i];
	END FOR;
	T.nominal := T;
	P.nominal := P;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	T.lower_bound := 1.0e-8{K};
	P.lower_bound := 1.0e-8{atm};
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	T.upper_bound := T + scale*T.nominal;
	P.upper_bound := P + scale*P.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;

END td_homogeneous_mixture;


MODEL Pitzer_mixture REFINES td_homogeneous_mixture;

	pure[components]                        IS_REFINED_TO Pitzer_component;

	FOR i IN components CREATE
	excess_V[i]:
	    (partial[i].V - pure[i].V)*(data[i].Pc/((1{GAS_C})*data[i].Tc)) = 
		-1.0*(0.083 - 0.422*(data[i].Tc/T)^1.6 + data[i].omega*
		(0.139 - 0.172*(data[i].Tc/T)^4.2))*(1.0 - y[i])^2 +
		0.50*(1.0 - y[i])*
		SUM[y[j]*((1.0 + (data[j].Vc/data[i].Vc)^(1/3))^3/
		(1.0 + data[j].Zc/data[i].Zc))*
		(0.083 - 0.422*(sqrt(data[i].Tc*data[j].Tc)/T)^1.6 +
		0.5*(data[i].omega + data[j].omega)*
		(0.139 - 0.172*(sqrt(data[i].Tc*data[j].Tc)/T)^4.2))
		| j IN components - [i]];
	excess_H[i]:
	    (partial[i].H - pure[i].H)/((1{GAS_C})*data[i].Tc) = 
		-(P/data[i].Pc)*
		(0.083 - 1.097*(data[i].Tc/T)^1.6 + data[i].omega*
		(0.139 - 0.894*(data[i].Tc/T)^4.2))*(1.0 - y[i])^2 +
		(1.0 - y[i])*(P/(data[i].Pc*2))*
		SUM[y[j]*((1.0 + (data[j].Vc/data[i].Vc)^(1/3))^3/
		(1.0 + data[j].Zc/data[i].Zc))*
		(0.083 - 1.097*(sqrt(data[i].Tc*data[j].Tc)/T)^1.6 +
		0.5*(data[i].omega + data[j].omega)*
		(0.139 - 0.894*(sqrt(data[i].Tc*data[j].Tc)/T)^4.2))
		| j IN components - [i]];
	excess_G[i]:
	    (partial[i].G - pure[i].G - (1{GAS_C})*T*ln(y[i]))/
		((1{GAS_C})*data[i].Tc) = 
		-(P/data[i].Pc)*
		(0.083 - 0.422*(data[i].Tc/T)^1.6 + data[i].omega*
		(0.139 - 0.172*(data[i].Tc/T)^4.2))*(1.0 - y[i])^2 +
		(1.0 - y[i])*(P/(data[i].Pc*2))*
		SUM[y[j]*((1.0 + (data[j].Vc/data[i].Vc)^(1/3))^3/
		(1.0 + data[j].Zc/data[i].Zc))*
		(0.083 - 0.422*(sqrt(data[i].Tc*data[j].Tc)/T)^1.6 +
		0.5*(data[i].omega + data[j].omega)*
		(0.139 - 0.172*(sqrt(data[i].Tc*data[j].Tc)/T)^4.2))
		| j IN components - [i]];
	END FOR;
	V := 24{liter/mole};
	partial[components].V := 24{liter/mole};
	pure[components].V := 24{liter/mole};
	

  METHODS
    METHOD specify;
	RUN pure[components].specify;
	RUN partial[components].specify;
	y[components].fixed := TRUE;
	y[CHOICE[components]].fixed := FALSE;
	partial[components].V.fixed := FALSE;
	partial[components].H.fixed := FALSE;
	partial[components].G.fixed := FALSE;
    END specify;

END Pitzer_mixture;


MODEL UNIFAC_mixture REFINES td_homogeneous_mixture;

	pure[components]                        IS_REFINED_TO Rackett_component;
	subgroups                               IS_A set OF symbol_constant;
	groups                                  IS_A set OF integer_constant;
	comps[subgroups]                        IS_A set OF symbol_constant;
	rv[components]                          IS_A UNIFAC_size;
	qs[components]                          IS_A UNIFAC_size;
	Jv[components]                          IS_A factor;
	Ls[components]                          IS_A factor;
	theta[subgroups]                        IS_A factor;
	eta[subgroups]                          IS_A factor;
	uc                                      IS_A UNIFAC_constants;

	subgroups :== UNION[data[i].subgroups | i IN components];
	groups :== UNION[data[i].groups | i IN components];
	FOR k IN subgroups CREATE
	    comps[k] :== [i IN components | k IN data[i].subgroups];
	END FOR;
	FOR k IN subgroups CREATE  
	UNI_theta[k]:
	    theta[k] = uc.Q[k]*SUM[(data[i].nu[k]*y[i] | i IN comps[k]),0];
	UNI_eta[k]:
	    eta[k] =
		SUM[(theta[m] | m IN subgroups*uc.sub[uc.group[k]]),0] +
		SUM[SUM[theta[m]*exp(-uc.a[g][uc.group[k]]/T)
		| m IN subgroups*uc.sub[g]]
		| g IN groups - [uc.group[k]]];
	END FOR;

	FOR i IN components CREATE
	    rv[i] :== SUM[0, data[i].nu[k]*uc.R[k] | k IN data[i].subgroups];
	    qs[i] :== SUM[0, data[i].nu[k]*uc.Q[k] | k IN data[i].subgroups];
	END FOR;
	FOR i IN components CREATE
	UNI_rv[i]:
	    rv[i] = Jv[i]*SUM[rv[j]*y[j] | j IN components];
	UNI_qs[i]:
	    qs[i] = Ls[i]*SUM[qs[j]*y[j] | j IN components];

		partial[i].V, pure[i].V	ARE_THE_SAME;
(* debug:
	UNI_ideal_V[i]: partial[i].V = pure[i].V; (* debug *)
 replace with equality *)

	UNI_excess_H[i]:
	    (partial[i].H - pure[i].H)/((1{GAS_C})*data[i].Tc) = 
		SUM[(theta[k]*
		SUM[SUM[
		((uc.a[g][uc.group[k]] -
                  uc.a[uc.group[n]][uc.group[k]])/data[i].Tc)*
                SUM[data[i].nu[m]*uc.Q[m]
                | m IN data[i].subgroups*uc.sub[g]]*
		exp(-(uc.a[g][uc.group[k]] + uc.a[uc.group[n]][uc.group[k]])/T)
                *theta[n]
		| g IN data[i].groups - [uc.group[n]]]
		| n IN subgroups]/sqr(eta[k])
		| k IN subgroups),0] -
		SUM[((data[i].nu[k]*uc.Q[k]/(
		SUM[data[i].nu[m]*uc.Q[m] 
                | m IN data[i].subgroups*uc.sub[uc.group[k]]] +
		SUM[SUM[data[i].nu[m]*uc.Q[m]*exp(-uc.a[g][uc.group[k]]/T)
		| m IN data[i].subgroups*uc.sub[g]]
		| g IN data[i].groups - [uc.group[k]]]))*
		SUM[SUM[
		((uc.a[g][uc.group[k]] -
		  uc.a[uc.group[n]][uc.group[k]])/data[i].Tc)*
		SUM[data[i].nu[m]*uc.Q[m] | m IN data[i].subgroups*uc.sub[g]]*
		exp(-(uc.a[g][uc.group[k]] + uc.a[uc.group[n]][uc.group[k]])/T)
                *theta[n]
		| g IN data[i].groups - [uc.group[n]]]
		| n IN subgroups]/eta[k]
		| k IN data[i].subgroups),0];

	UNI_excess_G[i]:
	    (partial[i].G - pure[i].G - (1{GAS_C})*T*ln(y[i]))/
	    ((1{GAS_C})*data[i].Tc) = 
		(1.0 - Jv[i] + ln(Jv[i]) -
		5.0*qs[i]*(1.0 - Jv[i]/Ls[i] + ln(Jv[i]/Ls[i])) +
		qs[i]*(1 - ln(Ls[i])))*T/data[i].Tc -
		SUM[theta[k]*(
		SUM[data[i].nu[m]*uc.Q[m]
		| m IN data[i].subgroups*uc.sub[uc.group[k]]] +
		SUM[SUM[data[i].nu[m]*uc.Q[m]*exp(-uc.a[g][uc.group[k]]/T)
		| m IN data[i].subgroups*uc.sub[g]]
		| g IN data[i].groups - [uc.group[k]]])/eta[k]
		| k IN subgroups]*T/data[i].Tc +
		SUM[data[i].nu[k]*uc.Q[k]*ln((
		SUM[data[i].nu[m]*uc.Q[m] 
		| m IN data[i].subgroups*uc.sub[uc.group[k]]] +
		SUM[SUM[data[i].nu[m]*uc.Q[m]*exp(-uc.a[g][uc.group[k]]/T)
		| m IN data[i].subgroups*uc.sub[g]]
		| g IN data[i].groups - [uc.group[k]]])/eta[k])
		| k IN data[i].subgroups]*T/data[i].Tc;
	END FOR;

	Jv[components].lower_bound := 1.0e-12;
	Ls[components].lower_bound := 1.0e-12;
	theta[subgroups].lower_bound := 0.0;
	eta[subgroups].lower_bound := 0.0;
	V := 0.1{liter/mole};
	partial[components].V := 0.1{liter/mole};
	pure[components].V := 0.1{liter/mole};

  METHODS
    METHOD clear;
	RUN pure[components].clear;
	RUN partial[components].clear;
	y[components].fixed := FALSE;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
	Jv[components].fixed := FALSE;
	Ls[components].fixed := FALSE;
	theta[subgroups].fixed := FALSE;
	eta[subgroups].fixed := FALSE;
    END clear;
    METHOD specify;
	RUN pure[components].specify;
	RUN partial[components].specify;
	y[components].fixed := TRUE;
	y[CHOICE[components]].fixed := FALSE;
	partial[components].V.fixed := FALSE;
	partial[components].H.fixed := FALSE;
	partial[components].G.fixed := FALSE;
    END specify;
    METHOD scale;
	RUN pure[components].scale;
	RUN partial[components].scale;
	FOR i IN components DO
	    Ls[i].nominal := Ls[i];
	    Jv[i].nominal := Jv[i];
	    Ls[i].upper_bound := Ls[i]+ scale*Ls[i].nominal;
	    Jv[i].upper_bound := Jv[i] + scale*Jv[i].nominal;
	    y[i].nominal := y[i];
	END FOR;
	FOR j IN subgroups DO
	    theta[j].nominal := theta[j];
	    eta[j].nominal := eta[j];
	    theta[j].upper_bound := theta[j] + scale*theta[j].nominal;
	    eta[j].upper_bound := eta[j] + scale*eta[j].nominal;
	END FOR;
	T.nominal := T;
	P.nominal := P;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	T.lower_bound := 1.0e-8{K};
	P.lower_bound := 1.0e-8{atm};
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	T.upper_bound := T + scale*T.nominal;
	P.upper_bound := P + scale*P.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;

END UNIFAC_mixture;

MODEL Wilson_mixture REFINES td_homogeneous_mixture;
       (* this model requires that T > 0 *)

	pure[components]			IS_REFINED_TO Rackett_component;
	lambda[components][components]		IS_A factor;

	FOR i IN components CREATE
	    FOR j IN components CREATE
		lambda[i][j] = (pure[j].V/pure[i].V)*
		    exp(-pure[i].data.del_ip[pure[j].data.formula]/
		    (1{GAS_C})/T);
	    END FOR;
	END FOR;

	FOR i IN components CREATE
	    partial[i].V, pure[i].V		ARE_THE_SAME;

	    partial[i].G - pure[i].G - (1{GAS_C})*T*ln(y[i]) = 
	    (1{GAS_C})*T*(-ln(
		SUM[y[j]*lambda[i][j]
		| j IN components]) + 1 -
		SUM[(y[k]*lambda[k][i]) / (
		SUM[y[j]*lambda[k][j]
		| j IN components])
		| k IN components]);

	    partial[i].H - pure[i].H = 
                (SUM[y[j]*lambda[i][j]*
                         pure[i].data.del_ip[pure[j].data.formula]
		| j IN components]) /
		(SUM[y[s]*lambda[i][s]
		| s IN components]) - 
		(SUM[y[k]*lambda[k][i] | k IN components]*
		SUM[SUM[y[l]*lambda[m][l]*
                             pure[m].data.del_ip[pure[l].data.formula]
		| l IN components]
                | m IN components]) / (
		SUM[SUM[y[n]*lambda[o][n]
		| n IN components]
		| o IN components])^2 +
		(SUM[y[p]*lambda[p][i]*
                 pure[p].data.del_ip[pure[i].data.formula] 
                 | p IN components]) /
		 (SUM[SUM[y[q]*lambda[r][q] 
                 | q IN components] 
                 | r IN components]);
	END FOR;
	V := 0.1{liter/mole};
	partial[components].V := 0.1{liter/mole};
	pure[components].V := 0.1{liter/mole};

  METHODS
    METHOD clear;
	RUN pure[components].clear;
	RUN partial[components].clear;
	y[components].fixed := FALSE;
	lambda[components][components].fixed := FALSE;
	V.fixed := FALSE;
	G.fixed := FALSE;
	H.fixed := FALSE;
    END clear;
    METHOD specify;
	RUN pure[components].specify;
	RUN partial[components].specify;
	y[components].fixed := TRUE;
	y[CHOICE[components]].fixed := FALSE;
	partial[components].V.fixed := FALSE;
	partial[components].G.fixed := FALSE;
	partial[components].H.fixed := FALSE;
    END specify;
    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;
    METHOD scale;
	RUN pure[components].scale;
	RUN partial[components].scale;
	FOR i IN components DO
	    FOR j IN components DO
		lambda[i][j].nominal :=
		    lambda[i][j];
		lambda[i][j].lower_bound := lambda[i][j] -
		    scale*lambda[i][j].nominal;
		lambda[i][j].upper_bound := lambda[i][j] +
		    scale*lambda[i][j].nominal;
	    END FOR;
	    
	    y[i].nominal := y[i];
	END FOR;
	T.nominal := T;
	P.nominal := P;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	T.lower_bound := 1.0e-8{K};
	P.lower_bound := 1.0e-8{atm};
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	T.upper_bound := T + scale*T.nominal;
	P.upper_bound := P + scale*P.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;
END Wilson_mixture;

MODEL heterogeneous_mixture REFINES mixture;
(* alpha_mixture *)

	reference			IS_A symbol_constant;
	phases 				IS_A set OF symbol_constant;
	mix[phases]			IS_A homogeneous_mixture;
	alpha[phases-[reference]][components] 	 IS_A relative_volatility;
	ave_alpha[phases-[reference]]		 IS_A relative_volatility;
	phi[phases]			IS_A fraction;

	FOR i IN components CREATE
            FOR j IN phases CREATE
                data[i], mix[j].data[i]    ARE_THE_SAME;
            END FOR;
        END FOR;

	components, mix[phases].components ARE_THE_SAME;
	FOR i IN components CREATE
	    y[i] = SUM[phi[j]*mix[j].y[i] | j IN phases];
	    FOR j IN phases - [reference] CREATE
		ave_alpha[j]*mix[j].y[i] =
		    alpha[j][i]*mix[reference].y[i];
	    END FOR;
	END FOR;

  METHODS
    METHOD clear;
	RUN mix[phases].clear;
	y[components].fixed := FALSE;
	alpha[phases-[reference]][components].fixed := FALSE;
	ave_alpha[phases-[reference]].fixed := FALSE;
	phi[phases].fixed := FALSE;
    END clear;
    METHOD specify;
	RUN mix[phases].specify;
	alpha[phases - [reference]][components].fixed := TRUE;
	y[components-[CHOICE[components]]].fixed := TRUE;
	mix[phases].y[components].fixed := FALSE;
	phi[phases-[reference]].fixed := TRUE;
    END specify;
    METHOD scale;
	FOR i IN components DO
	    y[i].nominal := y[i];
	    FOR j IN phases - [reference] DO
		alpha[j][i].nominal := alpha[j][i];
		alpha[j][i].lower_bound := 1e-8;
		alpha[j][i].upper_bound := alpha[j][i] +
		    scale*alpha[j][i].nominal;
	    END FOR;

	END FOR;
	RUN mix[phases].scale;

    END scale;

END heterogeneous_mixture;



MODEL td_heterogeneous_mixture REFINES heterogeneous_mixture;
(* td_alpha_mixture *)

	mix[phases]		IS_REFINED_TO  td_homogeneous_mixture;
	T, mix[phases].T ARE_THE_SAME;
	P, mix[phases].P ARE_THE_SAME;
hetmix_V:
	V*(data[CHOICE[components]].Pc/
		((1{GAS_C})*data[CHOICE[components]].Tc)) =
	    SUM[phi[j]*mix[j].V | j IN phases]*
	    (data[CHOICE[components]].Pc/
		((1{GAS_C})*data[CHOICE[components]].Tc));

hetmix_H:
	H/((1{GAS_C})*data[CHOICE[components]].Tc) =
	    SUM[phi[j]*mix[j].H | j IN phases]/
		((1{GAS_C})*data[CHOICE[components]].Tc);

hetmix_G:
	G/((1{GAS_C})*data[CHOICE[components]].Tc) = 
	    SUM[phi[j]*mix[j].G | j IN phases]/
		((1{GAS_C})*data[CHOICE[components]].Tc);

	components, mix[phases].components ARE_THE_SAME;

	V := 30{liter/mol};
	
  METHODS
    METHOD clear;
	RUN mix[phases].clear;
	y[components].fixed := FALSE;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
	alpha[phases-[reference]][components].fixed := FALSE;
	ave_alpha[phases-[reference]].fixed := FALSE;
	phi[phases].fixed := FALSE;
    END clear;
    METHOD specify;
	RUN mix[phases].specify;
	alpha[phases - [reference]][components].fixed := TRUE;
	y[components].fixed := TRUE;
	y[CHOICE[components]].fixed := FALSE;
	mix[phases].y[components].fixed := FALSE;
	phi[phases].fixed := TRUE;
	phi[reference].fixed := FALSE;
    END specify;
    METHOD scale;
	FOR i IN components DO
	    y[i].nominal := y[i];
	    FOR j IN phases - [reference] DO
		alpha[j][i].nominal := alpha[j][i];
		alpha[j][i].lower_bound := 1e-8;
		alpha[j][i].upper_bound := alpha[j][i] +
		    scale*alpha[j][i].nominal;
	    END FOR;

	END FOR;
	RUN mix[phases].scale;

	T.nominal := T;
	P.nominal := P;
	V.nominal := V;
	H.nominal := abs(H);
	G.nominal := abs(G);
	T.lower_bound := 1.0e-8{K};
	P.lower_bound := 1.0e-8{atm};
	V.lower_bound := 1.0e-8{liter/g_mole};
	H.lower_bound := H - scale*H.nominal;
	G.lower_bound := G - scale*G.nominal;
	T.upper_bound := T + scale*T.nominal;
	P.upper_bound := P + scale*P.nominal;
	V.upper_bound := V + scale*V.nominal;
	H.upper_bound := H + scale*H.nominal;
	G.upper_bound := G + scale*G.nominal;
    END scale;

END td_heterogeneous_mixture;


MODEL equilibrium_mixture REFINES td_heterogeneous_mixture;

	FOR i IN components CREATE
	    FOR j IN phases - [reference] CREATE
		mix[j].partial[i].G, mix[reference].partial[i].G ARE_THE_SAME;
(* debug replace
		(mix[j].partial[i].G - mix[reference].partial[i].G) /
		1e+5{J/mole} = 0;
*)
	    END FOR;
	END FOR;

  METHODS
    METHOD specify;
	RUN mix[phases].specify;
	y[components].fixed := TRUE;
	y[CHOICE[components]].fixed := FALSE;
	mix[phases].y[components].fixed := FALSE;
	alpha[phases - [reference]][components].fixed := FALSE;
	ave_alpha[phases - [reference]] := 1.0;
	ave_alpha[phases - [reference]].fixed := TRUE;
	phi[phases].fixed := FALSE;
	phi[reference].fixed := TRUE;
	T.fixed := FALSE;
    END specify;

END equilibrium_mixture;



MODEL murphree_equilibrium_mixture REFINES td_heterogeneous_mixture;

	(*         ASSUMES vapor-liquid pd, with liquid reference *)

	vap_eq					IS_A Pitzer_mixture;
	equil_alpha[components]			IS_A relative_volatility;
	ref_y[components]			IS_A fraction; 
	murph_eff				IS_A factor;


	vap_eq, mix['vapor']			ARE_ALIKE;

	T, vap_eq.T				ARE_THE_SAME;
	P, vap_eq.P				ARE_THE_SAME;
	components, vap_eq.components		ARE_THE_SAME;
	FOR i IN components CREATE
	    data[i],
		vap_eq.data[i]			ARE_THE_SAME;
	END FOR;

	SUM[ref_y[components]] = 1;
	FOR i IN components CREATE 

	    vap_eq.y[i] = equil_alpha[i]*mix[reference].y[i];
	    vap_eq.partial[i].G,
		mix[reference].partial[i].G	ARE_THE_SAME;
	END FOR;	                             

	FOR i IN components - [CHOICE[components]] CREATE
	    murph_eff*(vap_eq.y[i] - ref_y[i]) =
		mix['vapor'].y[i] - ref_y[i];
	END FOR;

  METHODS
    METHOD clear;
	RUN mix[phases].clear;
	V.fixed := FALSE;
	H.fixed := FALSE;
	G.fixed := FALSE;
	y[components].fixed := FALSE;
	alpha[phases-[reference]][components].fixed := FALSE;
	ave_alpha[phases-[reference]].fixed := FALSE;
	phi[phases].fixed := FALSE;
	RUN vap_eq.clear;
	equil_alpha[components].fixed := FALSE;
	ref_y[components].fixed := FALSE;
	murph_eff.fixed := FALSE;
    END clear;
    METHOD specify;
	RUN mix[phases].specify;
	y[components].fixed := TRUE;
	y[CHOICE[components]].fixed := FALSE;
	mix[phases].y[components].fixed := FALSE;
	alpha[phases - [reference]][components].fixed := FALSE;
	ave_alpha[phases - [reference]] := 1.0;
	ave_alpha[phases - [reference]].fixed := TRUE;
	phi[phases].fixed := FALSE;
	phi[reference].fixed := TRUE;
	RUN vap_eq.specify;
	vap_eq.y[components].fixed := FALSE;
	equil_alpha[components].fixed := FALSE;
	ref_y[components - [CHOICE[components]]].fixed := TRUE;
	murph_eff.fixed := TRUE;
	T.fixed := FALSE;
    END specify;

END murphree_equilibrium_mixture;

