(*********************************************************************\
                        system.lib
                        by Benjamin A. Allan
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

\*********************************************************************)

(*********************************************************************\
  $Date: 1997/09/08 18:10:06 $
  $Revision: 1.5 $
  $Author: ballan $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/libraries/system.lib,v $
\*********************************************************************)

(*=============================================================================*

    S Y S T E M  .  L  I  B
    -------------------------

    AUTHOR:      Benjamin A. Allan

    DATES:       06/94 - Original Code
                 02/95 - Definitions for discrete variables added by 
                         Craig Schmidt (CWS).

    CONTENTS:	 Basic definitions for relation, solver_var,
		 and generic_real.  This file is necessary for all
		 other ASCEND models to work on ASCEND3C.
                 If integration with the new DAE interface (blsode)
                 is desired, ivpsystem.lib should be loaded instead.
                 This file is strictly for algebraic modeling.

    REQUIRES:

*=============================================================================*)

DEFINITION relation

    included IS_A boolean;
    included := TRUE;

END relation;


DEFINITION logic_relation

    included IS_A boolean;
    included := TRUE;

END logic_relation;

ATOM solver_var REFINES real
	DEFAULT 0.5 {?};

    lower_bound	IS_A real;
    upper_bound IS_A real;
    nominal	IS_A real;
    fixed	IS_A boolean;

    fixed := FALSE;
    lower_bound := -1e20 {?};
    upper_bound := 1e20 {?};
    nominal := 0.5 {?};

END solver_var;

ATOM boolean_var REFINES boolean
	DEFAULT TRUE;

    nominal	IS_A boolean;
    fixed	IS_A boolean;
    fixed := FALSE;
    nominal := TRUE;

END boolean_var;

ATOM generic_real REFINES solver_var
	DIMENSIONLESS
	DEFAULT 0.5;
	lower_bound := -1e20;
	upper_bound := 1e20;
	nominal := 0.5;
END generic_real;
 
(*=============================================================================*

  Modified by CWS, 2/95
  
  solver_int is an integer variable for an MILP solver
       lower bound almost always 0
       relaxed indicates if the var should be treated as a normal solver_var
  solver_binary is a binary variable for a MILP solver
       lower bound must be 0, and upper bound must be 1
  solver_semi is a semicontinous variable for use in SCICONIC
       this var can have a value between 1 and the arbitrary upper bound, or 0.
       (note that SCICONIC requires the lower bound to be 1)
       if is_zero = true, then the current value is taken as 0
  
*=============================================================================*)
 
 
ATOM solver_int REFINES solver_var
	DIMENSIONLESS
	DEFAULT 0.0;

	relaxed IS_A boolean;

	lower_bound := 0.0;
	upper_bound := 1000000.0;
	nominal := 0.5;
END solver_int;

ATOM solver_binary REFINES solver_int
	DIMENSIONLESS
	DEFAULT 0.0;

	lower_bound := 0.0;
	upper_bound := 1.0;
	nominal := 0.5;
	
END solver_binary;

ATOM solver_semi REFINES solver_var
	DEFAULT 1.0 {?};

	is_zero IS_A boolean;
	relaxed IS_A boolean;

	lower_bound := 1 {?};
	upper_bound := 1e20 {?};
	nominal := 1.0 {?};
	
END solver_semi;



MODEL cmuascend();
(* this MODEL does nothing except provide a root
 * for a collection of loosely related models.
 * If it happens to reveal a few bugs in the software,
 * and perhaps masks others, well, what me worry? 
 * BAA, 8/97.
 *)
END cmuascend;

