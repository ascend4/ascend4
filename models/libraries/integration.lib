(*********************************************************************\
                        integration.lib
                        by Peter Piela, Boyd T. Safrit, Joseph J. Zaher
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1991,1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

\*********************************************************************)

(*********************************************************************\
  $Date: 1997/07/03 14:50:05 $
  $Revision: 1.7 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/libraries/integration.lib,v $
\*********************************************************************)
(*=============================================================================*

    I N T E G R A T I O N . L I B
    -----------------------------

    AUTHORS:     Peter Piela
                 Boyd T. Safrit
                 Joseph J. Zaher

    DATES:       07/91 - Original code.
                 08/94 - Added the observations to LSODE.
                 09/94 - Added ivp as base type for all initial value problem
                         solvers. baa.
                 10/94 - Added other integration methods to supplement lsode
                         and provide a means for dynamic optimization.
                 04/96 - Modified for the use of constants and function abs

    CONTENTS:    Contains the ivp & lsode base type definition as well
                 as the derivatives model definition that is required
                 in the ivp model.  This provides an efficient means of
                 integrating initial value problems.  For boundary value
                 problems and for dynamic optimization, a general integration
                 model is supplied which enables users to specify any of a
                 number of alternative integration techniques.  The user
                 should be aware, however, that using the general integration
                 model will substantially increase the size of a problem.
                 When possible, lsode is preferable to use.

    REQUIRES:   "system.lib"
*)


(* REQUIRE atoms.lib *)

(* ******************************************************************** *)
(* *************************   derivatives  *************************** *)
(* ******************************************************************** *)
MODEL derivatives;
   (*   Generic definition of the system,
        Dy[i] = dydx[i], i=1..n_eq, D = d/dx.    *)

   n_eq                                 IS_A integer_constant; (*number of ODE's*)
   dydx[1..n_eq], y[1..n_eq], x         IS_A solver_var;

   (* The number of monitored variables *)
   n_obs                                IS_A integer_constant;

   (* obs[1..n_obs] is the array of additional variables that
      the user is interested in. n_obs can be 0. *)
   obs[1..n_obs]                        IS_A solver_var;

   METHODS
       METHOD clear;
           x.fixed := FALSE;
           y[1..n_eq].fixed := FALSE;
           obs[1..n_obs].fixed := FALSE;
           dydx[1..n_eq].fixed := FALSE;
       END clear;
       METHOD specify;
           (*Always TRUE for LSODE interface.  The state variables must be set
             TRUE, while their derivatives are FALSE.*)
           x.fixed := TRUE;
           y[1..n_eq].fixed := TRUE;
           dydx[1..n_eq].fixed := FALSE;
       END specify;
END derivatives;


(* ******************************************************************** *)
(* ***************************  ivp  ********************************** *)
(* ******************************************************************** *)
MODEL ivp;
(*      Define the interface that is used between ASCEND
        and LSODE.      *)
   d                                    IS_A derivatives;
   nstep                                IS_A integer_constant;

   (*y[step number, equation number], x[step number]*)

   y[0..nstep][1..d.n_eq], x[0..nstep]  IS_A solver_var;

   (*obs[step number, observation number] is the array of additional
     variables that the user is interested in monitoring during the
     course of the integration.*)
   obs[0..nstep][1..d.n_obs]            IS_A solver_var;

   x[0..nstep], d.x                     ARE_ALIKE;

   FOR i IN [1..d.n_eq] CREATE
      y[0..nstep][i], d.y[i]            ARE_ALIKE;
   END FOR; (*FOR*)
 
   FOR i IN [1..d.n_eq] CREATE
      y[0][i], d.y[i]                   ARE_THE_SAME;
   END FOR; (*FOR*)

   FOR i IN [1..d.n_obs] CREATE
      obs[0..nstep][i], d.obs[i]      ARE_ALIKE;
   END FOR; (*FOR*)

   FOR i IN [1..d.n_obs] CREATE
      obs[0][i], d.obs[i]               ARE_THE_SAME;
   END FOR; (*FOR*)

METHODS
   METHOD clear;
      x[0..nstep].fixed := FALSE;
      y[0..nstep][1..d.n_eq].fixed := FALSE;
      obs[0..nstep][1..d.n_obs].fixed := FALSE;
      RUN d.clear;
   END clear;
   METHOD specify;
      RUN d.specify;
   END specify;
   METHOD fix_x_and_y;
      RUN d.specify;
   END fix_x_and_y;
END ivp;

MODEL lsode REFINES ivp;

   (*You must specify an RTOL and ATOL for each Y.*)

   (*relative tolerance on y[i]*)
   rtol[1..d.n_eq]                      IS_A real;

   (*absolute tolerance on y[i]*)
   atol[1..d.n_eq]                      IS_A real;

END lsode;


MODEL propagation;
                         
    n_point, n_order, n_eq              IS_A integer_constant;
    eval[0..n_point]                    IS_A derivatives;
    initial, final                      IS_A derivatives;
    h                                   IS_A solver_var;
        
        eval[0..n_point] ARE_ALIKE;
        h, eval[0].x ARE_ALIKE;
        initial, eval[0] ARE_THE_SAME;
        final, eval[n_point] ARE_THE_SAME;
        n_eq, eval[0].n_eq ARE_THE_SAME;
        final.x = initial.x + h;

    METHODS
        METHOD clear;
            RUN eval[0..n_point].clear;
            h.fixed := FALSE;
        END clear;
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
        END specify;
        METHOD reset;
            RUN clear;
            RUN specify;
        END reset;
END propagation;

MODEL euler REFINES propagation;
                        
    n_point                             :== 1;
    n_order                             :== 1;

        FOR i IN [1..n_eq] CREATE
            eval[1].y[i] = eval[0].y[i] + h*eval[0].dydx[i];
        END FOR;

    METHODS
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
            eval[1..n_point].y[1..n_eq].fixed := FALSE;
            eval[1..n_point].x.fixed := FALSE;
        END specify;

END euler;
                
MODEL trapezoid REFINES propagation;
            
    n_point                             :== 1;
    n_order                             :== 2;
            
        FOR i IN [1..n_eq] CREATE
            eval[1].y[i] = eval[0].y[i] + (1.0/2.0)*h*
                (eval[0].dydx[i] + eval[1].dydx[i]);
        END FOR;

    METHODS
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
            eval[1..n_point].y[1..n_eq].fixed := FALSE;
            eval[1..n_point].x.fixed := FALSE;
        END specify;

END trapezoid;

MODEL midpoint REFINES propagation;

    n_point                             :== 2;
    n_order                             :== 2;
               
        eval[1].x = initial.x + (1.0/2.0)*h;
        FOR i IN [1..n_eq] CREATE
            eval[1].y[i] = eval[0].y[i] + (1.0/2.0)*h*
                eval[0].dydx[i];
            eval[2].y[i] = eval[0].y[i] + h*
                eval[1].dydx[i];
        END FOR;

    METHODS
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
            eval[1..n_point].y[1..n_eq].fixed := FALSE;
            eval[1..n_point].x.fixed := FALSE;
        END specify;

END midpoint;

MODEL simpsons REFINES propagation;

    n_point                             :== 2;
    n_order                             :== 4;

        eval[1].x = initial.x + (1.0/2.0)*h;
        FOR i IN [1..n_eq] CREATE    
            eval[1].y[i] = eval[0].y[i] + (1.0/2.0)*h*
                ((5.0/12.0)*eval[0].dydx[i] + 
                (8.0/12.0)*eval[1].dydx[i] - 
                (1.0/12.0)*eval[2].dydx[i]);
            eval[2].y[i] = eval[0].y[i] + h*
                ((1.0/6.0)*eval[0].dydx[i] + 
                (4.0/6.0)*eval[1].dydx[i] + 
                (1.0/6.0)*eval[2].dydx[i]);
        END FOR;
              
    METHODS
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
            eval[1..n_point].y[1..n_eq].fixed := FALSE;
            eval[1..n_point].x.fixed := FALSE;
        END specify;

END simpsons;

MODEL runge_kutta_gill REFINES propagation;
            
    n_point                             :== 4;
    n_order                             :== 4;
             
        eval[1].x, eval[2].x ARE_THE_SAME;
        eval[3].x, eval[4].x ARE_THE_SAME;
        eval[1].x = initial.x + (1.0/2.0)*h;
        FOR i IN [1..n_eq] CREATE 
            eval[1].y[i] = eval[0].y[i] + (1.0/2.0)*h*
                eval[0].dydx[i];
            eval[2].y[i] = eval[0].y[i] + (1.0/2.0)*h*
                (0.41421356*eval[0].dydx[i] + 
                0.58578644*eval[1].dydx[i]);
            eval[3].y[i] = eval[0].y[i] + h*
                (-0.707106781*eval[1].dydx[i] +
                1.707106781*eval[2].dydx[i]);
            eval[4].y[i] = eval[0].y[i] + h*
                (0.166666667*eval[0].dydx[i] + 
                0.097631073*eval[1].dydx[i] +
                0.569035590*eval[2].dydx[i] + 
                0.166666667*eval[3].dydx[i]);
        END FOR; 

    METHODS
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
            eval[1..n_point].y[1..n_eq].fixed := FALSE;
            eval[1..n_point].x.fixed := FALSE;
        END specify;

END runge_kutta_gill;

MODEL gauss REFINES propagation;

    n_point                             :== 4;
    n_order                             :== 6;

        eval[1].x = initial.x + 0.11270167*h;
        eval[2].x = initial.x + 0.50000000*h;
        eval[3].x = initial.x + 0.88729833*h;
        FOR i IN [1..n_eq] CREATE
            eval[1].y[i] = initial.y[i] + 0.11270167*h*
                (1.23236*eval[1].dydx[i] -
                0.31922*eval[2].dydx[i] +
                0.08686*eval[3].dydx[i]);
            eval[2].y[i] = initial.y[i] + 0.50000000*h*
                (0.60053*eval[1].dydx[i] +
                0.44444*eval[2].dydx[i] -
                0.04497*eval[3].dydx[i]);
            eval[3].y[i] = initial.y[i] + 0.88729833*h*
                (0.30203*eval[1].dydx[i] +
                0.54144*eval[2].dydx[i] +
                0.15653*eval[3].dydx[i]);
            eval[4].y[i] = initial.y[i] + h*
                (0.27778*eval[1].dydx[i] +
                0.44444*eval[2].dydx[i] +
                0.27778*eval[3].dydx[i]);
        END FOR;

    METHODS
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
            eval[1..n_point].y[1..n_eq].fixed := FALSE;
            eval[1..n_point].x.fixed := FALSE;
        END specify;

END gauss;

MODEL lobatto REFINES propagation;

    n_point                             :== 4;
    n_order                             :== 8;

        eval[1].x = initial.x + 0.11270167*h;
        eval[2].x = initial.x + 0.50000000*h;
        eval[3].x = initial.x + 0.88729833*h;
        FOR i IN [1..n_eq] CREATE
            eval[1].y[i] = initial.y[i] + 0.11270167*h*
                (0.428010*eval[0].dydx[i] +
                0.602339*eval[1].dydx[i] -
                0.044301*eval[2].dydx[i] +
                0.029587*eval[3].dydx[i] -
                0.015635*eval[4].dydx[i]);
            eval[2].y[i] = initial.y[i] + 0.50000000*h*
                (-0.06250*eval[0].dydx[i] +
                0.68122*eval[1].dydx[i] +
                0.44444*eval[2].dydx[i] -
                0.12566*eval[3].dydx[i] +
                0.06250*eval[4].dydx[i]);
            eval[3].y[i] = initial.y[i] + 0.88729833*h*
                (0.001986*eval[0].dydx[i] +
                0.309303*eval[1].dydx[i] +
                0.506524*eval[2].dydx[i] +
                0.236552*eval[3].dydx[i] -
                0.054365*eval[4].dydx[i]);
            eval[4].y[i] = initial.y[i] + h*
                (0.277778*eval[1].dydx[i] +
                0.444444*eval[2].dydx[i] +
                0.277778*eval[3].dydx[i]);
        END FOR;

    METHODS
        METHOD specify;
            RUN eval[0..n_point].specify;
            h.fixed := TRUE;
            final.x.fixed := FALSE;
            eval[1..n_point].y[1..n_eq].fixed := FALSE;
            eval[1..n_point].x.fixed := FALSE;
        END specify;

END lobatto;

MODEL integration;
                                                    
    nstep                               IS_A integer_constant;
    step[1..nstep]                      IS_A propagation;
    initial, final                      IS_A derivatives;

        FOR i IN [1..nstep-1] CREATE              
            step[i].final, step[i+1].initial ARE_THE_SAME;
        END FOR;
        initial, step[1].initial ARE_THE_SAME;
        final, step[nstep].final ARE_THE_SAME;

    METHODS
        METHOD clear;
            RUN step[1..nstep].clear;
        END clear;
        METHOD specify;
            FOR i IN [1..nstep] DO
                RUN step[nstep - i + 1].specify;
            END FOR;
        END specify;
        METHOD reset;
            RUN clear;
            RUN specify;
        END reset;

END integration;
