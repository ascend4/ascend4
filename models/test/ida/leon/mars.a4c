REQUIRE "ivpsystem.a4l";
REQUIRE "johnpye/thermo_types.a4c";
REQUIRE "johnpye/airprops.a4c";
REQUIRE "atoms.a4l";

(*
A Mars Rover Airlock!
*)


(* first some models of air as an ideal gas *)

MODEL ideal_gas_base;
	M IS_A molar_weight_constant;	
	c_p IS_A specific_heat_capacity;
	s IS_A specific_entropy;
	h IS_A specific_enthalpy;
	v IS_A specific_volume;
	T IS_A temperature;
	p IS_A pressure;
	R IS_A specific_gas_constant;

	R :== 1{GAS_C} / M;
	p * v = R * T;

METHODS
METHOD bound_self;
	s.lower_bound := -5 {kJ/kg/K};
END bound_self;
END ideal_gas_base;


(*
	Ideal air assuming ideal gas and constant cp.
*)
MODEL simple_ideal_air
REFINES ideal_gas_base;

	M :== 28.958600656 {kg/kmol};

	c_p = 1.005 {kJ/kg/K};

	T_ref IS_A temperature_constant;
	p_ref IS_A pressure_constant;

	s = c_p * ln(T / T_ref) - R * ln(p / p_ref);
	h = c_p * (T - T_ref);

	T_ref :== 273.15 {K};
	p_ref :== 1 {bar};

METHODS
METHOD on_load;
	RUN ClearAll;
	RUN bound_self;
	FIX T, p;
	T := 300 {K};
	p := 1 {bar};
END on_load;	
END simple_ideal_air;

(*
	Ideal air, using a quartic polynomial for c_p as given in Moran & Shapiro
	4th Ed.
*)
MODEL ideal_air_poly REFINES ideal_gas_base;
	M :== 28.958600656 {kg/kmol};

	a[0..4] IS_A real_constant;
	a[0] :== 3.653;
	a[1] :== -1.337e-3{1/K};
	a[2] :== 3.294e-6{1/K^2};
	a[3] :== -1.913e-9{1/K^3};
	a[4] :== 0.2763e-12{1/K^4};

	T_ref IS_A temperature_constant;
	p_ref IS_A pressure_constant;
	h_ref IS_A real_constant;
	s_ref IS_A real_constant;

	T_ref :== 300 {K};
	p_ref :== 1 {bar};
	h_ref :== -4.40119 {kJ/kg};
	s_ref :== 0. {kJ/kg/K};

	c_p * M = 1{GAS_C} * SUM[a[i]*T^i | i IN [0..4]];

	(h - h_ref) * M = 1{GAS_C} * SUM[a[i]/(i+1) * T^(i+1) | i IN[0..4]];
	
	s0 IS_A specific_entropy;
	s0 = R * (a[0]*ln(T/T_ref) + SUM[a[i]/i * (T - T_ref)^i | i IN[1..4]]) + 1.294559 {kJ/kg/K} + 0.38191663487 {kJ/kg/K};

	s = s0 - R * ln(p/p_ref);

METHODS
METHOD bound_self;
	RUN ideal_gas_base::bound_self;
	s0.lower_bound := -1e20 {kJ/kg/K};
END bound_self;
METHOD on_load;
	RUN ClearAll;
	RUN bound_self;
	FIX T, p;
	T := 200 {K};
	p := 1 {bar};
END on_load;	
END ideal_air_poly;

IMPORT "johnpye/datareader/datareader";
MODEL drconf;
	filename IS_A symbol_constant;
	format IS_A symbol_constant;
	parameters IS_A symbol_constant;
END drconf;
	
MODEL ideal_air_table REFINES ideal_gas_base;
	M :== 28.958600656 {kg/kmol};

	dataparams IS_A drconf;
	dataparams.filename :== 'johnpye/idealair.csv';
	dataparams.format :== 'CSV';
	dataparams.parameters :== '1,4,6';
	
	s0 IS_A specific_entropy;	
	u IS_A specific_energy;
	p_ref IS_A pressure;

	data: datareader(
		T : INPUT;
		u, s0 :OUTPUT;
		dataparams : DATA
	);

	h = u + R * T; 

	s = s0 - R * ln(p/p_ref);
END ideal_air_table;
	
(*
	Thermo properties
*)
MODEL air_state;
	air IS_A ideal_air_poly;
	p ALIASES air.p;
	T ALIASES air.T;
	h ALIASES air.h;
	s ALIASES air.s;
	v ALIASES air.v;
METHODS
	METHOD default;
		p := 10{bar};
		p.nominal := 42 {bar};
		h := 2000 {kJ/kg};

		T := 400 {K};
		v.nominal := 10 {L/kg};
		s := 4 {kJ/kg/K};
	END default;
	METHOD solve;
		EXTERNAL do_solve(SELF);
	END solve;
	METHOD on_load;
		RUN default_all;
		FIX p, h;
	END on_load;
END air_state;


(* a simple connector that includes calculation of steam properties *)
MODEL air_node;
	state IS_A air_state;
	p ALIASES state.p;
	h ALIASES state.h;
	v ALIASES state.v;
	T ALIASES state.T;
	s ALIASES state.s;
	mdot IS_A mass_rate;
METHODS
	METHOD default;
		mdot.nominal := 2 {kg/s};
	END default;
	METHOD solve;
		EXTERNAL do_solve(SELF);
	END solve;
	METHOD on_load;
		RUN default; RUN reset; RUN values;
		FIX p,h;
	END on_load;
END air_node;

MODEL air_equipment;
	inlet "in: inlet air stream" IS_A air_node;
	outlet "out: outlet air stream" IS_A air_node;

	inlet.mdot, outlet.mdot ARE_THE_SAME;
	mdot ALIASES inlet.mdot;
END air_equipment;


MODEL compressor REFINES air_equipment;
	NOTES
		'block' SELF {Simple model of a compressor using isentropic efficiency}
	END NOTES;

	dp IS_A delta_pressure;
	inlet.p + dp = outlet.p;

	outlet_is IS_A air_state;
	outlet_is.p, outlet.p ARE_THE_SAME;

	outlet_is.s, inlet.s ARE_THE_SAME;
	eta IS_A fraction;

	r IS_A factor;
	r * inlet.p = outlet.p;
	
	eta_eq:eta * (inlet.h - outlet.h) = (inlet.h - outlet_is.h);

	(* work done on the environment, will be negative *)
	Wdot IS_A energy_rate;
	Wdot_eq:Wdot * eta = mdot * (inlet.h - outlet_is.h);

	w IS_A specific_energy;
	w_eq:w = eta * (outlet.h - inlet.h);

END compressor;

MODEL test_comp REFINES compressor;

METHODS
	METHOD on_load;
		FIX inlet.T;
		FIX inlet.p;

		inlet.T := 290 {K};
		inlet.p := 1 {bar};

		FIX r;
		FIX eta;
		FIX mdot;

		r := 10;
		eta := 0.8;
	END on_load;

END test_comp;


