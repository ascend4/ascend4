REQUIRE "system.a4l";
REQUIRE "basemodel.a4l";
IMPORT "bboxtest";

MODEL test1multi( coef IS_A real_constant; );

	npts IS_A integer_constant;
	npts :== 4;
	x[1..npts][1..3] IS_A generic_real;
	y[1..npts][1..3] IS_A generic_real;

(* do a gratuitous array of relations just to verify that rel arrays aren't busted too.  *)

	FOR i IN [1..npts-1] CREATE
		FOR j IN [1..3] CREATE
			tie_x[i][j]: x[i][j] = x[i+1][j];
		END FOR;
	END FOR;
		
(*
    bbox:  y = coef*x;
*)
	(* the simple repeated npts times *)
	FOR i IN [1..npts] CREATE
		bbox[i]: bboxtest( x[i][1..3] : INPUT ; 
				y[i][1..3] : OUTPUT ;
				coef : DATA);
	END FOR;

	(* the odd repeated npts triangle of times. 
	Verifies that each instance gets its own argument
	evaluation in FOR processing.
	 *)
	FOR i IN [1..npts] CREATE
		FOR j IN [1..i] CREATE
			xT[i][j] IS_A generic_real;
			yT[i][j] IS_A generic_real;
		END FOR;
	END FOR;
	FOR i IN [1..npts] CREATE
		bboxT[i]: bboxtest( xT[i][1..i] : INPUT ; 
				yT[i][1..i] : OUTPUT ;
				coef : DATA);
	END FOR;

METHODS 

	METHOD default_self;
		y[1..npts][1..3]	:= -1.0 ;
		x[1..npts][1..3]	:= 1.0 ;
		FOR i IN [1..npts] DO
			FOR j IN [1..i] DO
				xT[i][j] := 1.0;
				yT[i][j] := -1.0;
			END FOR;
		END FOR;
	END default_self;

	METHOD reset;
		EXTERNAL asc_free_all_variables(SELF);
		RUN specify;
	END reset;

	METHOD specify;
		FOR i IN [1..npts-1] DO
			FOR j IN [1..3] DO
				tie_x[i][j].included := FALSE;
			END FOR;
		END FOR;
		FIX x[1..npts][1..3];
		FREE y[1..npts][1..3];
		FOR i IN [1..npts] DO
			FOR j IN [1..i] DO
				FIX xT[i][j];
				FREE yT[i][j];
			END FOR;
		END FOR;
	END specify;

	METHOD default_all;
		RUN default_self;
	END default_all;

END test1multi;

MODEL test2multi
REFINES testcmumodel;

	one IS_A real_constant;
	one :== 1.0;

	t1 IS_A test1multi(one);

METHODS

METHOD specify;
	RUN t1.reset;
END specify;

METHOD default_self;
	RUN t1.default_self;
END default_self;

METHOD default_all;
	RUN default_self;
END default_all;

END test2multi;

MODEL test1(
	coef IS_A real_constant;
);
	x[1..3] IS_A generic_real;
	y[1..3] IS_A generic_real;
	z[1..3] IS_A generic_real;


(* The equivalent is:
    bbox[i]:  y[i] = coef*x[i];
*)
	bbox: bboxtest( x[1..3] : INPUT ; 
			y[1..3] : OUTPUT ;
			coef : DATA);

(* here we have it in z, but negative to readily see the difference *) 
	FOR j IN [1..3] CREATE
		rel[j]: z[j] = -coef * x[j];
	END FOR;

METHODS 

	METHOD default_self;
		z[1..3]	:= -200.0 ;
		y[1..3]	:= -100.0 ;
		x[1..3]	:= 1.0 ;
	END default_self;

	METHOD reset;
		EXTERNAL asc_free_all_variables(SELF);
		RUN specify;
	END reset;

	METHOD specify;
		FIX x[1..3];
		FREE y[1..3];
		FREE z[1..3];
	END specify;

	METHOD default_all;
		RUN default_self;
	END default_all;

END test1;


MODEL test2
REFINES testcmumodel;

	one IS_A real_constant;
	one :== 1.0;
	two IS_A real_constant;
	two :== 2.0;

	t1 IS_A test1(one);

	t2 IS_A test1(two);

	t_merge_xy IS_A test1(two);
	t_merge_xy.x[1], t_merge_xy.y[1] ARE_THE_SAME;

	t_merge_x IS_A test1(two);
	t_merge_x.x[1..2] ARE_THE_SAME;

	t_merge_y IS_A test1(two);
	t_merge_y.y[1..2] ARE_THE_SAME;

	t_shift_xy IS_A test1(two);
	t_shift_xy.x[2], t_shift_xy.y[1] ARE_THE_SAME;

METHODS

METHOD specify;
	RUN t1.reset;
	RUN t2.reset;
	RUN t_merge_x.reset;
	RUN t_merge_xy.reset;
	RUN t_merge_y.reset;
	FREE t_merge_y.x[2];
	RUN t_shift_xy.reset;
END specify;

METHOD default_self;
	RUN t1.default_self;
	RUN t2.default_self;
	RUN t_merge_x.default_self;
	RUN t_merge_xy.default_self;
	RUN t_merge_y.default_self;
	RUN t_shift_xy.default_self;
END default_self;

METHOD default_all;
	RUN default_self;
END default_all;

END test2;


MODEL test1Array
REFINES testcmumodel;

	one IS_A real_constant;
	one :== 1.0;

	t[1..3] IS_A test1(one);

METHODS

METHOD specify;
	RUN t[1..3].reset;
END specify;

METHOD default_self;
	RUN t[1..3].default_self;
END default_self;

METHOD default_all;
	RUN default_self;
END default_all;

END test1Array;


MODEL test2Array REFINES testcmumodel;

	a[1..3] IS_A test2;

METHODS

METHOD reset;
	RUN a[1..3].reset;
END reset;

METHOD specify;
	RUN a[1..3].specify;
END specify;

METHOD default_all;
	RUN default_self;
END default_all;

METHOD default_self;
	RUN a[1..3].default_self;
END default_self;

END test2Array;


MODEL test1_normal(coef IS_A real_constant;);

	x[1..3] IS_A generic_real;
	y[1..3] IS_A generic_real;

	FOR i IN [1..3]  CREATE
		bbox[i]:  y[i] = coef*x[i];
	END FOR;

METHODS 

	METHOD default_self;
		y[1..3]	:= -1.0 ;
		x[1] := 1;
		x[2] := 2;
		x[3] := 3;
	END default_self;

	METHOD default_all;
		RUN default_self;
	END default_all;

	METHOD specify;
		FIX x[1..3];
		FREE y[1..3];
	END specify;


END test1_normal;

MODEL test2_normal
REFINES testcmumodel;
	one IS_A real_constant;
	one :== 1.0;
	two IS_A real_constant;
	two :== 2.0;

	t1 IS_A test1_normal(one);

	t2 IS_A test1_normal(two);

	t_merge_xy IS_A test1_normal(two);
	t_merge_xy.x[1], t_merge_xy.y[1] ARE_THE_SAME;

	t_merge_x IS_A test1_normal(two);
	t_merge_x.x[1..2] ARE_THE_SAME;

	t_merge_y IS_A test1_normal(two);
	t_merge_y.y[1..2] ARE_THE_SAME;

	t_shift_xy IS_A test1_normal(two);
	t_shift_xy.x[2], t_shift_xy.y[1] ARE_THE_SAME;

METHODS

	METHOD specify;
		RUN t1.reset;
		RUN t2.reset;
		RUN t_merge_x.reset;
		RUN t_merge_xy.reset;
		RUN t_merge_y.reset;
		FREE t_merge_y.x[2];
		RUN t_shift_xy.reset;
	END specify;

	METHOD default_self;
		RUN t1.default_self;
		RUN t2.default_self;
		RUN t_merge_x.default_self;
		RUN t_merge_xy.default_self;
		RUN t_merge_y.default_self;
		RUN t_shift_xy.default_self;
	END default_self;

	METHOD default_all;
		RUN default_self;
	END default_all;

END test2_normal;


MODEL testrefinement_base_normal
REFINES testcmumodel;
	one IS_A real_constant;
	one :== 1.0;
	two IS_A real_constant;
	two :== 2.0;

	t1 IS_A test1_normal(one);
	t2 IS_A test1_normal(two);
	t_merge_xy IS_A test1_normal(two);
	t_merge_x IS_A test1_normal(two);
	t_merge_y IS_A test1_normal(two);
	t_shift_xy IS_A test1_normal(two);

(* we'll do this bit interactively by refinement to detect bugs in the multipass
   scheme of instantiation.
	t_merge_xy.x[1], t_merge_xy.y[1] ARE_THE_SAME;
	t_merge_x.x[1..2] ARE_THE_SAME;
	t_merge_y.y[1..2] ARE_THE_SAME;
	t_shift_xy.x[2], t_shift_xy.y[1] ARE_THE_SAME;
*)

METHODS

	METHOD specify;
		RUN t1.reset;
		RUN t2.reset;
		RUN t_merge_x.reset;
		RUN t_merge_xy.reset;
		RUN t_merge_y.reset;
		RUN t_shift_xy.reset;
	END specify;

	METHOD default_self;
		RUN t1.default_self;
		RUN t2.default_self;
		RUN t_merge_x.default_self;
		RUN t_merge_xy.default_self;
		RUN t_merge_y.default_self;
		RUN t_shift_xy.default_self;
	END default_self;

	METHOD default_all;
		RUN default_self;
	END default_all;

END testrefinement_base_normal;

MODEL testrefinement_normal
REFINES testrefinement_base_normal;
	t_merge_xy.x[1], t_merge_xy.y[1] ARE_THE_SAME;
	t_merge_x.x[1..2] ARE_THE_SAME;
	t_merge_y.y[1..2] ARE_THE_SAME;
	t_shift_xy.x[2], t_shift_xy.y[1] ARE_THE_SAME;

METHODS

	METHOD specify;
		RUN t1.reset;
		RUN t2.reset;
		RUN t_merge_x.reset;
		RUN t_merge_xy.reset;
		RUN t_merge_y.reset;
		RUN t_shift_xy.reset;
		FREE t_merge_y.x[2];
	END specify;

END testrefinement_normal;

MODEL testrefinement_base
REFINES testcmumodel;
	one IS_A real_constant;
	one :== 1.0;
	two IS_A real_constant;
	two :== 2.0;

	t1 IS_A test1(one);
	t2 IS_A test1(two);
	t_merge_xy IS_A test1(two);
	t_merge_x IS_A test1(two);
	t_merge_y IS_A test1(two);
	t_shift_xy IS_A test1(two);

(* we'll do this bit interactively by refinement to detect bugs in the multipass
   scheme of instantiation.
	t_merge_xy.x[1], t_merge_xy.y[1] ARE_THE_SAME;
	t_merge_x.x[1..2] ARE_THE_SAME;
	t_merge_y.y[1..2] ARE_THE_SAME;
	t_shift_xy.x[2], t_shift_xy.y[1] ARE_THE_SAME;
*)

METHODS

	METHOD specify;
		RUN t1.reset;
		RUN t2.reset;
		RUN t_merge_x.reset;
		RUN t_merge_xy.reset;
		RUN t_merge_y.reset;
		RUN t_shift_xy.reset;
	END specify;

	METHOD default_self;
		RUN t1.default_self;
		RUN t2.default_self;
		RUN t_merge_x.default_self;
		RUN t_merge_xy.default_self;
		RUN t_merge_y.default_self;
		RUN t_shift_xy.default_self;
	END default_self;

	METHOD default_all;
		RUN default_self;
	END default_all;

END testrefinement_base;

MODEL testrefinement
REFINES testrefinement_base;
	t_merge_xy.x[1], t_merge_xy.y[1] ARE_THE_SAME;
	t_merge_x.x[1..2] ARE_THE_SAME;
	t_merge_y.y[1..2] ARE_THE_SAME;
	t_shift_xy.x[2], t_shift_xy.y[1] ARE_THE_SAME;

METHODS

	METHOD specify;
		RUN t1.reset;
		RUN t2.reset;
		RUN t_merge_x.reset;
		RUN t_merge_xy.reset;
		RUN t_merge_y.reset;
		RUN t_shift_xy.reset;
		FREE t_merge_y.x[2];
	END specify;

END testrefinement;

(* simple test of relation sharing for blackboxes *)
MODEL test2Shared
REFINES testcmumodel;

	one IS_A real_constant;
	one :== 1.0;
	two IS_A real_constant;
	two :== 2.0;

	t1 IS_A test1(one); (* unique *)

	t2 IS_A test1(two); (* 1st copy *)

	t3 IS_A test1(two); (* constructed by anoncopy*)

METHODS

METHOD specify;
	RUN t1.reset;
	RUN t2.reset;
	RUN t3.reset;
END specify;

METHOD default_self;
	RUN t1.default_self;
	RUN t2.default_self;
	RUN t3.default_self;

	FOR i IN [1..3] DO
		t3.x[i] := 2+i*0.5;
	END FOR;

END default_self;

METHOD default_all;
	RUN default_self;
END default_all;

END test2Shared;

