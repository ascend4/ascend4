(*	ASCEND modelling environment
	Copyright (C) 2007, 2008, 2009, 2010 Carnegie Mellon University

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2, or (at your option)
	any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)(*

	These definitions are mostly copied from John Pye's johnpe/rankine.a4c, annotated and 
	extended to support Canvas Based Modelling of Rankine Cycle.

	Author: Grivan Thapar

	Note from johnpye/rankine.a4c:
	A number of Rankine-cycle (steam turbine power cycle) models of increasing
	complexity, following the general development of Moran & Shapiro, Ã‡engel,
	and others.
*)

REQUIRE "atoms.a4l";
REQUIRE "johnpye/thermo_types.a4c";

IMPORT "freesteam";
IMPORT "sensitivity/solve";

MODEL steam_state;
	p IS_A pressure;
	h IS_A specific_enthalpy;

	T IS_A temperature;
	v IS_A specific_volume;
	s IS_A specific_entropy;
	x IS_A fraction;

	props: freesteam_Tvsx_ph(
		p,h : INPUT;
		T,v,s,x : OUTPUT
	);
METHODS
	METHOD default;
		p := 10{bar};
		p.nominal := 42 {bar};
		h := 2000 {kJ/kg};

		T := 400 {K};
		v.nominal := 10 {L/kg};
		s := 4 {kJ/kg/K};
		x := 0.8;
	END default;
	METHOD solve;
		EXTERNAL do_solve(SELF);
	END solve;
	METHOD on_load;
		RUN default_all;
		FIX p, h;
	END on_load;
END steam_state;

MODEL steam_node;
	state IS_A steam_state;
	p ALIASES state.p;
	h ALIASES state.h;
	v ALIASES state.v;
	T ALIASES state.T;
	s ALIASES state.s;
	x ALIASES state.x;
	mdot IS_A mass_rate;
METHODS
	METHOD default;
		mdot.nominal := 2 {kg/s};
	END default;
	METHOD solve;
		EXTERNAL do_solve(SELF);
	END solve;
	METHOD on_load;
		RUN default_all; RUN reset; RUN values;
		FIX p,h;
	END on_load;
END steam_node;

MODEL steam_equipment;
	inlet "in: inlet steam stream" IS_A steam_node;
	outlet "out: outlet steam stream" IS_A steam_node;

	inlet.mdot, outlet.mdot ARE_THE_SAME;
	mdot ALIASES inlet.mdot;
END steam_equipment;

(*------------------------------------------------------------------------------
  PUMP COMPONENT
*)

MODEL pump_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple model of a pump using isentropic efficiency}
	END NOTES;

	(*Parameter Definitions*)
	inlet_pressure "param: Inlet Steam Node Pressure" ALIASES inlet.p;	
	inlet_specific_enthalpy "param: Inlet Steam Node Specific Enthalpy" ALIASES inlet.h;
	outlet_pressure "param: Outlet Steam Node Pressure" ALIASES outlet.p;
	outlet_specific_enthalpy "param: Outlet Steam Node Specific Enthalpy" ALIASES outlet.h;
	inlet_temperature "param: Inlet Steam Node temperature" ALIASES inlet.T;
	outlet_temperature "param: Outlet Steam Node temperature" ALIASES inlet.T;	
	eta "param: Efficiency" IS_A fraction;
	mass_rate "param: Mass Rate" ALIASES mdot;
	(*End of Parameter Definitions*)
	
	dp IS_A delta_pressure;
	inlet.p + dp = outlet.p;

	outlet_is IS_A steam_state;
	outlet_is.p, outlet.p ARE_THE_SAME;

	outlet_is.s, inlet.s ARE_THE_SAME;
	
	eta_eq:eta * (inlet.h - outlet.h) = (inlet.h - outlet_is.h);

	(* work done on the environment, will be negative *)
	Wdot IS_A energy_rate;
	Wdot_eq:Wdot = mdot * w;


	w IS_A specific_energy;
	w_eq:w * eta = (outlet.h - inlet.h);

(*
	NOTES
		'inline' inlet {in:}
		'inline' outlet {out:}
	END NOTES;
*)
END pump_simple;

(*------------------------------------------------------------------------------
  BOILER COMPONENT
*)

(*
	simple model assumes no pressure drop, but heating losses due to
	flue gas temperature
*)

MODEL boiler_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple boiler model}
	END NOTES;

	(*Parameter Definitions*)
	inlet_pressure "param: Inlet Steam Node Pressure" ALIASES inlet.p;	
	inlet_specific_enthalpy "param: Inlet Steam Node Specific Enthalpy" ALIASES inlet.h;
	outlet_pressure "param: Outlet Steam Node Pressure" ALIASES outlet.p;
	outlet_specific_enthalpy "param: Outlet Steam Node Specific Enthalpy" ALIASES outlet.h;
	inlet_temperature "param: Inlet Steam Node temperature" ALIASES inlet.T;
	outlet_temperature "param: Outlet Steam Node temperature" ALIASES outlet.T;
	eta "param: Efficiency" IS_A fraction;
	mass_rate "param: Mass Rate" ALIASES mdot;
	(*End of Parameter Definitions*)

	inlet.p, outlet.p ARE_THE_SAME;
	Qdot_fuel IS_A energy_rate;

	q IS_A specific_energy;
	q = (outlet.h - inlet.h);

	Qdot IS_A energy_rate;
	Qdot = mdot * q;

	Qdot = eta * Qdot_fuel;
END boiler_simple;

(*------------------------------------------------------------------------------
  TURBINE COMPONENT
*)
MODEL condenser_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple condenser model}
		'inline' inlet {in: yahoooo}
	END NOTES;

	(*Parameter Definitions*)
	inlet_pressure "param: Inlet Steam Node Pressure" ALIASES inlet.p;	
	inlet_specific_enthalpy "param: Inlet Steam Node Specific Enthalpy" ALIASES inlet.h;
	outlet_pressure "param: Outlet Steam Node Pressure" ALIASES outlet.p;
	outlet_specific_enthalpy "param: Outlet Steam Node Specific Enthalpy" ALIASES outlet.h;
	inlet_temperature "param: Inlet Steam Node temperature" ALIASES inlet.T;
	outlet_temperature "param: Outlet Steam Node temperature" ALIASES inlet.T;
	inlet_quality "param: Inlet Steam Node Quality" ALIASES inlet.x;
	outlet_quality "param: Outlet Steam Node Quality" ALIASES outlet.x;
	eta "param: Efficiency" IS_A fraction;
	mass_rate "param: Mass Rate" ALIASES mdot;
	(*End of Parameter Definitions*)

	inlet.p, outlet.p ARE_THE_SAME;
	Qdot IS_A energy_rate;

	cons_en: Qdot = mdot * (outlet.h - inlet.h);
	
END condenser_simple;

(*------------------------------------------------------------------------------
  TURBINE COMPONENT
*)

MODEL turbine_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple turbine model}
	END NOTES; 

	(*Parameter Definitions*)
	inlet_pressure "param: Inlet Steam Node Pressure" ALIASES inlet.p;	
	inlet_specific_enthalpy "param: Inlet Steam Node Specific Enthalpy" ALIASES inlet.h;
	outlet_pressure "param: Outlet Steam Node Pressure" ALIASES outlet.p;
	outlet_specific_enthalpy "param: Outlet Steam Node Specific Enthalpy" ALIASES outlet.h;
	inlet_temperature "param: Inlet Steam Node temperature" ALIASES inlet.T;
	outlet_temperature "param: Outlet Steam Node Temperature" ALIASES inlet.T;
	eta "param: Efficiency" IS_A fraction;
	mass_rate "param: Mass Rate" ALIASES mdot;
	(*End of Parameter Definitions*)

	dp IS_A delta_pressure;
	inlet.p + dp = outlet.p;
	
	outlet_is IS_A steam_state;
	outlet_is.p, outlet.p ARE_THE_SAME;
	outlet_is.s, inlet.s ARE_THE_SAME;

	eta_eq:eta * (inlet.h - outlet_is.h) = (inlet.h - outlet.h);

	(* work done on the environment, will be positive *)
	Wdot IS_A energy_rate;
	Wedot_eq:Wdot = mdot * w;

	w IS_A specific_energy;
	w_eq:w = inlet.h - outlet.h;

END turbine_simple;
