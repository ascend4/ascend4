(*	ASCEND modelling environment

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2, or (at your option)
	any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330,
	Boston, MA 02111-1307, USA.
*)
REQUIRE "atoms.a4l";
(*
This model is from W A Dollase & W I Newman (1984) 'Statistically most probable
stoichiometric formulae', American Mineralogist (69) 553-556, accessed online at
http://www.minsocam.org/msa/collectors_corner/arc/formula.htm

As of 21 Dec 2010, this file crashes ASCEND if run with IPOPT as the solver.

Model written by Roger Mason, with contributions from John Pye.
*)


(*
A general container for the equations of Dollase & Newman
*)
MODEL formula_base;
	n IS_A integer_constant;   (* number of elements *)
	m IS_A integer_constant;   (* number of constraints *)
	n :== 4;
	m :== 3;

	w[1..n] IS_A factor;       (* weight of oxide, per cation *)
	C[1..m][1..n] IS_A factor; (* constraint coefficients *)
	Cs[1..m] IS_A factor;      (* constraint sums *)
	x[1..n] IS_A  fraction;    (* oxide component concentration *)
	N[1..n] IS_A factor;       (* numbers of moles of each oxide *)
	k IS_A  factor;            (* 'normalisation factor, to be determinied' *)

	y[1..n] IS_A fraction;     (* given weight fraction analyte *)
	s[1..n] IS_A factor;       (* standard deviation in given weight fraction *)

	(* objective function *)
	objective: MINIMIZE SUM[ (y[i] - x[i])^2/s[i]^2 | i IN [1..n]]; (* 1 *)

	(* molecular structure constraints *)
	FOR j IN [1..m] CREATE
		Cs[j] = SUM[ C[j][i]*N[i] | i IN [1..n]]; (* 2 *)
	END FOR;

	FOR i IN [1..n] CREATE
		N[i] = k * x[i]/w[i]; (* 3 *)
	END FOR;

	(* sum of concentrations must equal unity *)
	1 = SUM[ x[i] | i IN [1..n]]; (* 5 *)

END formula_base;

(*
A specific example implementing the above equation: plagioclase feldspar.
*)
MODEL formula REFINES formula_base;

METHODS
METHOD specify;
	FIX C[1..3][1..4];
	FIX Cs[1..4];
	FIX w[1..4];
	FIX y[1..4];
	FIX s[1..4];

	FIX k;
END specify;
METHOD values;
	(* there are 8 total oxygens, *)
	Cs[1] := 8.0;
	C[1][1] := 0.5;
	C[1][2] := 1.0;
	C[1][3] := 1.5;
	C[1][4] := 2.0;

	(* four atoms in tetrahedral sites, and *)
	Cs[2] := 4.0;
	C[2][1] := 0.0;
	C[2][2] := 0.0;
	C[2][3] := 1.0;
	C[2][4] := 1.0;

	(* the sum of Na + Ca is equal to one. *)
	Cs[3] := 1.0;
	C[3][1] := 1.0;
	C[3][2] := 1.0;
	C[3][3] := 0.0;
	C[3][4] := 0.0;

	(* cation weights *)
	w[1] := 30.9895; (* 22.9898 + 15.9994*(1/2) *)
	w[2] := 56.0774;	(* 40.078 + 15.9994 *)
	w[3] := 50.9806;	(* 26.9815 + 15.9994*(3/2) *)
	w[4] := 60.0843;	(* 28.0855 + 15.9994*(2/1) *)

	y[1] := 11.19/100 {};
	y[2] := 1.07/100  {};
	y[3] := 20.35/100 {};
	y[4] := 67.39/100 {};

	k := 2.62925;

	s[1] := 0.05 {};
	s[2] := 0.05 {};
	s[3] := 0.05 {};
	s[4] := 0.05 {};

END values;
METHOD default_self;
	x[1] := 11.29/100 {};
	x[2] := 1.01/100  {};
	x[3] := 20.31/100 {};
	x[4] := 67.30/100 {};
END default_self;

METHOD on_load;
	RUN reset;
	RUN values;
	RUN specify;
END on_load;

METHOD self_test;
END self_test;

END formula;


