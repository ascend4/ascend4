(** A set of models to test basic blackbox functionality.
    The C model it drives is very simple, so corner cases of
    finite differenced jacobians are not going to show up.
*)
REQUIRE "system.a4l";
REQUIRE "basemodel.a4l";
IMPORT "bboxtest"; (* yi = coef*xi test *)

MODEL bbox 
(
	coef IS_A real_constant;
	n IS_A integer_constant;
)
REFINES testcmumodel ;

	x[1..n], y[1..n] IS_A generic_real;

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        coef : DATA);
	
METHODS

METHOD default_all;
	RUN default_self;
END default_all;
METHOD default_self;
	FOR i IN [1..n] DO
		x[i] := 1+i;
		y[i] := -x[i];
	END FOR;
END default_self;

METHOD specify;
	y[1..n].fixed := FALSE;
	x[1..n].fixed := TRUE;
END specify;

METHOD specify_reverse;
	x[1..n].fixed := FALSE;
	y[1..n].fixed := TRUE;
END specify_reverse;

END bbox;

MODEL oldstylebbox REFINES testcmumodel;
	coef IS_A real_constant;
	coef :== 2;
	n IS_A integer_constant;
	x[1..n], y[1..n] IS_A generic_real;

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        coef : DATA);
	
METHODS

METHOD default_all;
	RUN default_self;
END default_all;
METHOD default_self;
	FOR i IN [1..n] DO
		x[i] := 1+i;
		y[i] := -x[i];
	END FOR;
END default_self;

METHOD specify;
	y[1..n].fixed := FALSE;
	x[1..n].fixed := TRUE;
END specify;

METHOD specify_reverse;
	x[1..n].fixed := FALSE;
	y[1..n].fixed := TRUE;
END specify_reverse;

END oldstylebbox;

(* unexpect fail! instantiator bug in handling absorbed isas or
typedef bug in catching them. *)
MODEL bbox3_broken REFINES bbox(
	coef :== 2.0;
	n :== 3;
);
END bbox3_broken;

MODEL bbox3;

	coef IS_A real_constant;
	n IS_A integer_constant;
	coef :== 2.0;
	n :== 3;

	x[1..n], y[1..n] IS_A generic_real;

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        coef : DATA);
	
METHODS

METHOD default_all;
	RUN default_self;
END default_all;
METHOD default_self;
	FOR i IN [1..n] DO
		x[i] := 1+i;
		y[i] := -x[i];
	END FOR;
END default_self;

METHOD specify;
	y[1..n].fixed := FALSE;
	x[1..n].fixed := TRUE;
END specify;

METHOD specify_reverse;
	x[1..n].fixed := FALSE;
	y[1..n].fixed := TRUE;
END specify_reverse;
END bbox3;

(*  undefined formal args *)
MODEL parsefail0;
	n IS_A integer_constant;
	n :== 3;

(*
	x[1..n], y[1..n] IS_A generic_real;
*)

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        coef : DATA);
END parsefail0;

(*  incorrect input formal args *)
MODEL parsefail1;
	coef IS_A real_constant;
	n IS_A integer_constant;
	n :== 3;
	coef :== 1.0;

	x[1..n], y[1..n] IS_A generic_real;

	bbox: bboxtest( x[1], x[2..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        coef : DATA);
END parsefail1;

(*  incorrect output formal args *)
MODEL parsefail2;
	coef IS_A real_constant;
	n IS_A integer_constant;
	n :== 3;
	coef :== 1.0;

	x[1..n], y[1..n] IS_A generic_real;

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1], y[2..n] : OUTPUT ;
                        coef : DATA);
END parsefail2;

(*  no data formal args *)
MODEL parsefail3;
	coef IS_A real_constant;
	n IS_A integer_constant;
	n :== 3;
	coef :== 1.0;

	x[1..n], y[1..n] IS_A generic_real;

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1], y[2..n] : OUTPUT ) ;

END parsefail3;

(*  bbox referenced in ATS *)
MODEL parsefail4;
	coef IS_A real_constant;
	n IS_A integer_constant;
	n :== 3;
	coef :== 1.0;
	x[1..n], y[1..n] IS_A generic_real;

	bbox2: bboxtest( x[1..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        coef : DATA);
	bbox1: bboxtest( x[1..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        coef : DATA);

	bbox1, bbox2 ARE_THE_SAME;
	
(* the following is already caught by typelint.
	FOR i IN [1] CREATE
		r1[i]: x[1] = x[1];
		r2[i]: x[1] = x[1];
	END FOR;
	r1, r2 ARE_THE_SAME;
*)

END parsefail4;

(*  mismatched arg counts check-- tests bbox, not ascend. *)
MODEL fail1;
	coef IS_A real_constant;
	n IS_A integer_constant;
	n :== 3;
	coef :== 1.0;
	x[1..n], y[1..n+1] IS_A generic_real;

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1..n+1] : OUTPUT ;
                        coef : DATA);
END fail1;

(*  incorrect data arg check -- tests bbox, not ascend.*)
MODEL fail2;
	coef IS_A real_constant;
	n IS_A integer_constant;
	n :== 3;
	coef :== 1.0;
	x[1..n], y[1..n] IS_A generic_real;

	bbox: bboxtest( x[1..n] : INPUT ;
                        y[1..n] : OUTPUT ;
                        x[1] : DATA);
END fail2;


(*  simple single bbox forward solve *)
MODEL pass1 REFINES bbox3; 
END pass1;

(*  simple single bbox reverse solve *)
MODEL pass2 REFINES bbox3; 
METHODS
METHOD specify;
	RUN specify_reverse;
END specify;
END pass2;

(*  simple double bbox solve *)
MODEL pass3 ; 
	b1 IS_A bbox3;
	b2 IS_A bbox3;
METHODS 
METHOD default_all;
	RUN b1.default_self;
	RUN b2.default_self;
END default_all;
METHOD specify;
	RUN b1.specify;
	RUN b2.specify;
END specify;
END pass3;
 
(*  simple double bbox reverse solve *)
MODEL pass4 REFINES pass3; 
METHODS 
METHOD specify;
	RUN b1.specify_reverse;
	RUN b2.specify_reverse;
END specify;
END pass4;

(*  linked double bbox solve *)
MODEL pass5 REFINES pass3 ; 
	b1.y[1] = b2.y[2];
METHODS
METHOD specify;
	RUN b1.specify;
	RUN b2.specify;
	b1.x[1].fixed := FALSE;
END specify;
END pass5;

(*  linked double bbox reverse solve *)
MODEL pass6 REFINES pass5; 
METHODS
METHOD specify;
	RUN b1.specify_reverse;
	RUN b2.specify_reverse;
	b1.y[1].fixed := FALSE;
END specify;
END pass6;

(*  merged input solve *)
MODEL pass7 REFINES pass1; 
	x[1..2] ARE_THE_SAME;
END pass7;

(*  merged input reverse solve *)
MODEL pass8 REFINES pass7; 
METHODS
METHOD specify;
	RUN specify_reverse;
	y[1].fixed := FALSE;
END specify;
END pass8;

(*  merged output solve *)
MODEL pass9 REFINES pass1; 
	y[1..2] ARE_THE_SAME;
METHODS
METHOD specify;
	RUN pass1::specify;
	x[1].fixed := FALSE;
END specify;
END pass9;

(*  merged output reverse solve *)
MODEL pass10 REFINES pass9; 
METHODS
METHOD specify;
	RUN specify_reverse;
END specify;
END pass10;

(*  merged input/output solve *)
MODEL pass11 REFINES pass1; 
	y[1], x[1] ARE_THE_SAME; (* always self consistent in theory unless you think you fixed both to distinct values. *)
METHOD specify;
	RUN pass1::specify;
	x[1].fixed := FALSE;
END specify;
END pass11;

(*  merged input/output reverse solve *)
MODEL pass12 REFINES pass11 ; 
METHODS
METHOD specify;
	RUN specify_reverse;
	y[1].fixed := FALSE;
END specify;
END pass12;

(*  cross-merged input/output solve *)
MODEL pass13 REFINES pass1; 
	y[1],x[2] ARE_THE_SAME; (* generally infeasible *)
METHODS
METHOD values_feasible;
	x[1..2] := 7; (* could be any constant. result will be y1==y2 *)
END values_feasible;
METHOD values_infeasible;
	x[1] := x[2] +1; (* could be any constant. result will be solve fail *)
END values_infeasible;
METHOD default_all;
	RUN default_self;
	RUN values_feasible;
END default_all;
END pass13;

(*  cross-merged input/output reverse solve *)
MODEL pass14 REFINES pass13; 
METHODS
METHOD specify;
        RUN specify_reverse;
END specify;

END pass14;

(*  array of models containing bboxes. *)
MODEL pass20 ;
	ma[1..3] IS_A bbox3;
METHODS
METHOD specify;
	RUN ma[1..3].specify;
END specify;
END pass20;

(*  dense array of black boxes wrong syntax*)
MODEL parsefail21 ; 
	coef IS_A real_constant;
	coef :== 1.0;
	ba[1..3]: bboxtest(x[1..3],y[1..3],coef);
END parsefail21;

(*  dense array of black boxes right syntax*)
MODEL pass22 ; 
	coef IS_A real_constant;
	coef :== 2.0;
        npts IS_A integer_constant;
        npts :== 4;
        x[1..npts][1..3] IS_A generic_real;
        y[1..npts][1..3] IS_A generic_real;

        (* the simple repeated npts times for different data. *)
        FOR i IN [1..npts] CREATE
                bbox[i]: bboxtest( x[i][1..3] : INPUT ;
                                y[i][1..3] : OUTPUT ;
                                coef : DATA);
        END FOR;

END pass22;

(*  triangular array of black boxes *)
MODEL pass23 ; 
	npts IS_A integer_constant;
	npts :== 4;
	coef IS_A real_constant;
	coef :== 3;

        (* the odd repeated npts triangle of times.
        Verifies that each instance gets its own argument
        evaluation in FOR processing.
         *)
        FOR i IN [1..npts] CREATE
                FOR j IN [1..i] CREATE
                        xT[i][j] IS_A generic_real;
                        yT[i][j] IS_A generic_real;
                END FOR;
        END FOR;
        FOR i IN [1..npts] CREATE
                bboxT[i]: bboxtest( xT[i][1..i] : INPUT ;
                                yT[i][1..i] : OUTPUT ;
                                coef : DATA);
        END FOR;
METHODS

        METHOD default_self;
                FOR i IN [1..npts] DO
                        FOR j IN [1..i] DO
                                xT[i][j] := 1.0;
                                yT[i][j] := -1.0;
                        END FOR;
                END FOR;
        END default_self;
        METHOD reset;
                EXTERNAL asc_free_all_variables(SELF);
                RUN specify;
        END reset;

        METHOD specify;
                FOR i IN [1..npts] DO
                        FOR j IN [1..i] DO
                                FIX xT[i][j];
                                FREE yT[i][j];
                        END FOR;
                END FOR;
        END specify;

        METHOD default_all;
                RUN default_self;
        END default_all;

END pass23;

(*  bbox referenced in WHEN *)
MODEL pass31 ; 
(* FIXME need a test for WHEN contained bbox *)
END pass31;

(*  bbox referenced in SATISFIED *)
MODEL pass41 ; 
(* FIXME need a test for SATISFIED referred bbox element *)
END pass41;

(*  bbox referenced in SELECT *)
MODEL pass51 ; 
(* FIXME need a test for SELECT contained bbox *)
END pass51;

(*  bboxes in reinstantiate merge of boxes *)
MODEL pass61 REFINES pass3; 
	b1, b2 ARE_THE_SAME;
END pass61;

(*  bbox that becomes feasible to compile after reinstantiation to assign constants. *)
MODEL pass62 REFINES oldstylebbox; 
	n :== 3;
END pass62;

(*  bbox in reinstantiate merge of input/output *)
MODEL pass64 REFINES pass1; 
	x[2],y[2] ARE_THE_SAME;
END pass64;

(*  bbox in reinstantiate merge of inputs *)
MODEL pass65 REFINES pass1; 
	x[3],x[2] ARE_THE_SAME;
END pass65;

(*  bboxes in reinstantiate merge of outputs *)
MODEL pass66 REFINES pass1; 
	y[3],y[1] ARE_THE_SAME;
END pass66;

(*  bboxes in reinstantiate cross-link merge of input/output *)
MODEL pass67 REFINES pass1; 
	x[2],y[3] ARE_THE_SAME;
END pass67;
