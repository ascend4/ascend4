REQUIRE "ivpsystem.a4l";
REQUIRE "johnpye/thermo_types.a4c";

IMPORT "freesteam";
IMPORT "johnpye/extpy/extpy";
IMPORT "johnpye/solvernotes";
IMPORT "johnpye/solve";

MODEL simple_state;
	p IS_A pressure;
	h IS_A specific_enthalpy;
	T IS_A temperature;
	s IS_A specific_entropy;
	iapws97: iapws97_Ts_ph(
		p, h : INPUT;
		T, s : OUTPUT
	);
END simple_state;

(* 
	Enhanced version of johnpye/thermalequilibrium.a4c. This model uses
	real steam properties from http://freesteam.sf.net/. You will need to 
	build the freesteam ASCEND hooks. See the freesteam site for instructions.

	NOTE: set the starting step to 0.1 and the minimum step to 0.01 s, and
	integrate from 0 to 3000 s.
*)
ADD NOTES IN thermalequilibrium2;
	'solver' name {QRSlv}
	'QRSlv' iterationlimit {50}
	'QRSlv' singtol {1e-10}
	(* following are not implemented yet *)
	'LSODE' minstep {0.01} 
	'LSODE' firststep {0.1}
	'LSODE' duration {3000}
END NOTES;

MODEL thermalequilibrium2;
	S[1..2] IS_A simple_state;
	m[1..2] IS_A mass;
	h IS_A heat_transfer_coefficient;
	A IS_A area;

	p ALIASES S[1].p;
	S[2].p = S[1].p;

	Q IS_A energy_rate;
	Q = h*A*(S[1].T - S[2].T); (* rate of heat transfer from 1 to 2 *)
	m[1]*dhdt[1] = -Q;
	m[2]*dhdt[2] = +Q;
	
	dhdt[1..2] IS_A delta_specific_power;

	t IS_A time;
METHODS
METHOD specify;
	FIX	h, A, m[1..2], S[1..2].h, p;
END specify;	
METHOD values;
	A := 1 {m^2};
	h := 10 {W/m^2/K};

	p := 1 {bar};

	m[1] := 2 {kg};
	S[1].h := 200 {kJ/kg};
	m[2] := 10 {kg};
	S[2].h := 3500 {kJ/kg};
END values;
METHOD ode_init;
	FOR i IN [1..2] DO
		S[i].h.ode_id := i;
		dhdt[i].ode_id := i;
		S[i].h.ode_type := 1;
		dhdt[i].ode_type := 2;
	END FOR;

	Q.obs_id := 2;
	S[1].T.obs_id := 3;
	S[2].T.obs_id := 4;

	t.ode_type := -1;
	t := 0 {s};
END ode_init;
METHOD on_load;
	EXTERNAL solve(SELF);
	RUN reset;
	RUN values;
	EXTERNAL solvernotes(SELF);
	EXTERNAL solve(SELF);
	RUN ode_init;
END on_load;

END thermalequilibrium2;

