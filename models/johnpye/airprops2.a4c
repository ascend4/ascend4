(*	Air properties calculator for ASCEND modelling environment
	Copyright (C) John Pye 2014

 	This program is free software; you can redistribute it
	and/or modify it under the terms of the GNU General Public
	License as published by the Free Software Foundation; either
	version 2 of the License, or (at your option) any later
	version.

	This program is distributed in the hope that it will be
	useful, but WITHOUT ANY WARRANTY; without even the implied
	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
	PURPOSE.  See the GNU General Public License for more
	details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)
REQUIRE "atoms.a4l";
REQUIRE "johnpye/moltensalt.a4c";

(*
	Ideal-gas air, together with some power-law correlations for
	viscosity and conductivity of uncertain accuracy, obtained from
	http://dx.doi.org/10.1615/AtoZ.a.air_properties_of

	THIS MODEL IS STILL IN DEVELOPMENT AND DOESN'T WORK YET!!!
*)
MODEL airprops2 REFINES thermophysical_fluid_base;
	M IS_A real_constant;
	M :== 28.97{kg/kmol};
	R IS_A real_constant;
	R :== 1{GAS_C} / M;
	T_c IS_A temperature_constant;
	T_c :== 132.5 {K};
	p_c IS_A pressure_constant;
	p_c :== 3.77 {MPa};

	(* coefficients of zero-pressure ideal gas equation *)
	n IS_A integer_constant;
	n :== 4;
	a[0..n-1] IS_A real_constant;
	a[0] :== 28.11;
	a[1] :== 0.1967e-2;
	a[2] :== 0.4802e-5;
	a[3] :== -1.966e-9;
	cp_eq: cp * M = 1{kJ/kmol/K} * SUM[a[i] * (T/1{K})^i | i IN [0..n-1]];

	(* ideal gas equation *)
	rho_eq: p = rho * R * T;

	h_ref IS_A specific_enthalpy;
	s_ref IS_A specific_entropy;

	h_eq: (h - h_ref) * M = 1{kJ/kmol} * SUM[a[i]/(i+1) * (T/1{K})^(i+1) | i IN [0..n-1]];
	s_eq: (s - s_ref) * M = 1{kJ/kmol/K} * a[0]*ln(T/1{K}) - R*ln(p/1{Pa}) + SUM[a[i]/i * (T/1{K})^i | i IN [2..n-1]];

	(* viscosity *)
	mustar IS_A viscosity;
	(* Lo et al, 1966, doi:10.1021/je60031a020 *)
	z1_eq: mustar = 4.38e-3{cP} * (1.01e-3 * T - 0.093)^(5./9);
	z2_eq: mu - mustar = 5.76e-3{cP} * (rho * R * T_c / p_c)^1.126;
METHODS
	METHOD bound_self;
		h_ref.lower_bound := -1e99 {kJ/kg};
		s_ref.lower_bound := -1e99 {kJ/kg/K};
		h.lower_bound := -1e99 {kJ/kg};
		s.lower_bound := -1e99 {kJ/kg/K};
		u.lower_bound := -1e99 {kJ/kg};
	END bound_self;
	METHOD on_load;
		RUN ClearAll;
		RUN bound_self;
		FIX h_ref := -295.504033483 {kJ/kg};
		FIX s_ref := 108.501816216 {kJ/kg/K};
		FIX T := 273{K};
		FIX p := 100{atm};
	END on_load;
END airprops2;
 
