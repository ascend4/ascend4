REQUIRE "atoms.a4l";
REQUIRE "johnpye/thermo_types.a4c";

IMPORT "freesteam";

(* Model of simple Rankine cycle with boiler, turbine, condenser, pump *)

(*------------------------------------------------------------------------------
  BACKGROUND STUFF
*)

(*
	Thermo properties -- IAPWS-IF97
*)
MODEL steam_state;
	p IS_A pressure;
	h IS_A specific_enthalpy;

	T IS_A temperature;
	v IS_A specific_volume;
	s IS_A specific_entropy;
	x IS_A fraction;

	props: freesteam_Tvsx_ph(
		p,h : INPUT;
		T,v,s,x : OUTPUT
	);
METHODS
	METHOD default;
		p := 10{bar};
		p.nominal := 42 {bar};
		h := 2000 {kJ/kg};

		T := 400 {K};
		v.nominal := 10 {L/kg};
		s := 4 {kJ/kg/K};
		x := 0.8;
	END default;
	METHOD solve;
		EXTERNAL do_solve(SELF);
	END solve;
	METHOD on_load;
		RUN default_all;
		FIX p, h;
	END on_load;
END steam_state;

(* a simple connector that includes calculation of steam properties *)
MODEL steam_node;
	state IS_A steam_state;
	p ALIASES state.p;
	h ALIASES state.h;
	v ALIASES state.v;
	T ALIASES state.T;
	s ALIASES state.s;
	x ALIASES state.x;
	mdot IS_A mass_rate;
METHODS
	METHOD default;
		mdot.nominal := 2 {kg/s};
	END default;
	METHOD solve;
		EXTERNAL do_solve(SELF);
	END solve;
	METHOD on_load;
		RUN default_all; RUN reset; RUN values;
		FIX p,h;
	END on_load;
END steam_node;

MODEL steam_equipment;
	inlet "in: inlet steam stream" IS_A steam_node;
	outlet "out: outlet steam stream" IS_A steam_node;

	cons_mass:inlet.mdot = outlet.mdot;
	mdot ALIASES inlet.mdot;
END steam_equipment;

(*------------------------------------------------------------------------------
  PUMP COMPONENT
*)

MODEL pump_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple model of a pump using isentropic efficiency}
	END NOTES;

	dp IS_A delta_pressure;
	inlet.p + dp = outlet.p;

	outlet_is IS_A steam_state;
	outlet_is.p, outlet.p ARE_THE_SAME;

	outlet_is.s, inlet.s ARE_THE_SAME;
	eta IS_A fraction;
	
	eta_eq:eta * (inlet.h - outlet.h) = (inlet.h - outlet_is.h);

	(* work done on the environment, will be negative *)
	Wdot IS_A energy_rate;
	Wdot_eq:Wdot = eta * mdot * (inlet.h - outlet.h);

	w IS_A specific_energy;
	w_eq:w = eta * (outlet.h - inlet.h);

(*
	NOTES
		'inline' inlet {in:}
		'inline' outlet {out:}
	END NOTES;
*)
END pump_simple;
MODEL pump_simple_test REFINES pump_simple;
	(* no equations here *)
METHODS
METHOD on_load;
	FIX inlet.p;
	FIX inlet.h;
	FIX outlet.p;
	FIX eta;
	FIX mdot;

	inlet.p := 5 {bar};
	inlet.h := 400 {kJ/kg};
	outlet.p := 100 {bar};
	eta := 0.65;
	mdot := 900 {t/d};
END on_load;
END pump_simple_test;

(*------------------------------------------------------------------------------
  TURBINE COMPONENT
*)

MODEL turbine_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple turbine model}
	END NOTES;

	dp IS_A delta_pressure;
	inlet.p + dp = outlet.p;
	
	outlet_is IS_A steam_state;
	outlet_is.p, outlet.p ARE_THE_SAME;
	outlet_is.s, inlet.s ARE_THE_SAME;

	eta IS_A fraction;
	eta_eq:eta * (inlet.h - outlet_is.h) = (inlet.h - outlet.h);
	
	(* work done on the environment, will be positive *)
	Wdot IS_A energy_rate;
	Wedot_eq:Wdot = mdot * (inlet.h - outlet.h);

	w IS_A specific_energy;
	w_eq:w = inlet.h - outlet.h;

END turbine_simple;

MODEL turbine_simple_test REFINES turbine_simple;
	(* no equations here *)
METHODS
METHOD on_load;
	FIX inlet.p;
	FIX inlet.h;
	FIX outlet.p;
	FIX eta;
	FIX mdot;

	inlet.p := 100 {bar};
	inlet.h := 3000 {kJ/kg};
	outlet.p := 5 {bar};
	eta := 0.85;
	mdot := 900 {t/d};
END on_load;
END turbine_simple_test;

(*------------------------------------------------------------------------------
  BOILER COMPONENT
*)

(*
	simple model assumes no pressure drop, but heating losses due to
	flue gas temperature
*)
MODEL boiler_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple boiler model}
	END NOTES;

	inlet.p, outlet.p ARE_THE_SAME;
	Qdot_fuel IS_A energy_rate;
	Qdot IS_A energy_rate;

	Qdot = mdot * (outlet.h - inlet.h);

	eta IS_A fraction;
	Qdot = eta * Qdot_fuel;
END boiler_simple;

MODEL boiler_simple_test REFINES boiler_simple;
	(* nothing here *)
METHODS
METHOD on_load;
	FIX inlet.p;
	FIX inlet.h;
	FIX eta;
	FIX outlet.h;
	FIX mdot;

	inlet.p := 100 {bar};
	inlet.h := 500 {kJ/kg};

	eta := 0.8;
	outlet.h := 3000 {kJ/kg};
	mdot := 900 {t/d};
END on_load;
END boiler_simple_test;

(*------------------------------------------------------------------------------
  CONDENSER COMPONENT
*)

(*
	this is really simple (fluid props permitting): just work out the heat
	that must be expelled to get the water down to a certain state
*)
MODEL condenser_simple REFINES steam_equipment;
	NOTES
		'block' SELF {Simple condenser model}
		'inline' inlet {in: yahoooo}
	END NOTES;

	inlet.p, outlet.p ARE_THE_SAME;
	Qdot IS_A energy_rate;

	cons_en: Qdot = mdot * (outlet.h - inlet.h);
	
END condenser_simple;

MODEL condenser_simple_test REFINES condenser_simple;
	(* nothing here *)
METHODS
METHOD on_load;
	FIX inlet.p, inlet.x;
	FIX outlet.h;
	FIX mdot;

	inlet.p := 5 {bar};
	inlet.x := 0.95;
	outlet.h := 500 {kJ/kg};
	mdot := 900 {t/d};
END on_load;
END condenser_simple_test;

(*------------------------------------------------------------------------------
  FEEDWATER HEATER
*)

(*
	open heater does not have inlet.mdot==outlet.mdot, so not a refinement
	of 'steam_equipment'.
*)
MODEL heater_open;
	NOTES
		'block' SELF {Simple open feedwater heater model}
	END NOTES;

	inlet "in:" IS_A steam_node;
	inlet_heat "in:" IS_A steam_node;
	outlet "out:" IS_A steam_node;
	
	inlet_heat.p, inlet.p, outlet.p ARE_THE_SAME;

	(* cons. mass *)
	cons_mass: inlet.mdot + inlet_heat.mdot = outlet.mdot;

	(* cons. energy *)
	cons_en: inlet.mdot * inlet.h + inlet_heat.mdot * inlet_heat.h = outlet.mdot * outlet.h;

END heater_open;

MODEL heater_open_test REFINES heater_open;
	(* nothing here *)
METHODS
METHOD on_load;
	FIX inlet.p, inlet.h;
	inlet.p := 40 {bar};
	inlet.h := 634 {kJ/kg};
	FIX inlet_heat.h;
	inlet_heat.h := 2960 {kJ/kg};
	
	FIX outlet.mdot; 
	outlet.mdot := 900 {t/d};
	
	FIX inlet.mdot;
	inlet.mdot := 700 {t/d};
END on_load;
END heater_open_test;

(*------------------------------------------------------------------------------
  TEE PIECE
*)

(*
	it's not a car :-)
*)
MODEL tee;
	NOTES
		'block' SELF {Model of a branching of two flow streams}
	END NOTES;

	inlet "in:" IS_A steam_node;
	outlet "out:" IS_A steam_node;
	outlet_branch "out:" IS_A steam_node;

	inlet.p, outlet.p, outlet_branch.p ARE_THE_SAME;
	inlet.h, outlet.h, outlet_branch.h ARE_THE_SAME;

	(* cons. mass *)
	cons_mass: inlet.mdot = outlet.mdot + outlet_branch.mdot;

	phi IS_A fraction;
	phi_eq: phi * inlet.mdot = outlet_branch.mdot;

END tee;	

(*------------------------------------------------------------------------------
  OVERALL CYCLE
*)

(*
	simplest possible rankine cycle
*)
MODEL rankine;

	BO IS_A boiler_simple;
	TU IS_A turbine_simple;
	CO IS_A condenser_simple;
	PU IS_A pump_simple;

	BO.outlet, TU.inlet ARE_THE_SAME;
	TU.outlet, CO.inlet ARE_THE_SAME;
	CO.outlet, PU.inlet ARE_THE_SAME;
	PU.outlet, BO.inlet ARE_THE_SAME;

	Qdot_loss ALIASES CO.Qdot;

	T_H ALIASES BO.outlet.T;
	T_C ALIASES CO.outlet.T;

	eta IS_A fraction;
	eta * (BO.Qdot_fuel - PU.Wdot) = TU.Wdot;

	eta_carnot IS_A fraction;
	eta_carnot = 1 - T_C / T_H;

	mdot ALIASES TU.mdot;
	x_turb_out ALIASES TU.outlet.x;
METHODS
(* first test case: just some plausible values *)
METHOD specify_1;
	RUN ClearAll;
	FIX PU.inlet.p;
	FIX PU.inlet.h;
	FIX PU.outlet.p;
	FIX BO.outlet.h;
	FIX TU.eta;
	FIX PU.eta;
	FIX BO.eta;
	FIX mdot;
END specify_1;
METHOD values_1;
	PU.inlet.p := 1 {bar};
	PU.inlet.h := 104.9 {kJ/kg};
	PU.outlet.p := 250 {bar};
	BO.outlet.h := 3772 {kJ/kg};
	TU.eta := 0.85;
	PU.eta := 0.65;
	BO.eta := 0.9;
	mdot := 900 {t/d};	
END values_1;
(*
	second test case: numbers from Example 2.1, K Weston, 'Energy Conversion',
	1992, http://www.personal.utulsa.edu/~kenneth-weston/
*)
METHOD specify;
	RUN ClearAll;
	FIX PU.outlet.p;
	FIX BO.outlet.T;
	FIX PU.inlet.p;
	FIX PU.inlet.h;
	FIX TU.eta;
	FIX PU.eta;
	FIX BO.eta;
	FIX mdot;
END specify;
METHOD values;
	PU.outlet.p := 2000 {psi};
	BO.outlet.T := 1460 {R}; BO.outlet.h := 3400 {kJ/kg};
	PU.inlet.p := 1 {psi};
	PU.inlet.h := 69.73 {btu/lbm};
	TU.eta := 1.0;
	PU.eta := 1.0;
	BO.eta := 1.0;
	mdot := 900 {t/d};
END values;
METHOD on_load;
	RUN specify;
	RUN values;
END on_load;
METHOD self_test;
	(* check the results against those from K Weston's book *)
	(* note that we have NOT neglected pump work in this case! *)
	ASSERT abs(eta - 0.4294) < 0.0005;
	ASSERT abs(eta_carnot - 0.6152) < 0.0005;
	ASSERT abs(TU.outlet.x - 0.7736) < 0.0005;
	ASSERT abs(TU.w - 603.1 {btu/lbm}) < 0.7 {btu/lbm};
END self_test;
END rankine;

(*------------------------------------------------------------------------------
  REHEAT RANKINE CYCLE
*)
MODEL rankine_reheat;

	BO1 IS_A boiler_simple;
	BO2 IS_A boiler_simple;
	TU1 IS_A turbine_simple;
	TU2 IS_A turbine_simple;
	CO IS_A condenser_simple;
	PU IS_A pump_simple;

	BO1.outlet, TU1.inlet ARE_THE_SAME;
	TU1.outlet, BO2.inlet ARE_THE_SAME;
	BO2.outlet, TU2.inlet ARE_THE_SAME;
	TU2.outlet, CO.inlet ARE_THE_SAME;
	CO.outlet, PU.inlet ARE_THE_SAME;
	PU.outlet, BO1.inlet ARE_THE_SAME;

	BO1.eta, BO2.eta ARE_THE_SAME;

	(* boiler peak temperature is reached for both main and reheat... *)
	BO1.outlet.T, BO2.outlet.T ARE_THE_SAME;

	mdot ALIASES PU.mdot;

	T_H ALIASES BO1.outlet.T;
	T_C ALIASES CO.outlet.T;

	eta IS_A fraction;
	eta * (BO1.Qdot_fuel + BO2.Qdot_fuel - PU.Wdot) = TU1.Wdot + TU2.Wdot;

	eta_carnot IS_A fraction;
	eta_carnot = 1 - T_C / T_H;

METHODS
(*
	The on_load scenario reproduces the same calculation from 
	K Weston, op. cit., Example 2.5, p. 51.
*)
METHOD on_load;
	FIX BO1.eta;
	BO1.eta := 1.0;
	FIX TU1.eta, TU2.eta;
	TU1.eta := 1.0;
	TU2.eta := 1.0;
	FIX PU.eta;
	PU.eta := 1.0;
	FIX PU.inlet.p;
	PU.inlet.p := 1 {psi};
	FIX PU.inlet.h;
	PU.inlet.h := 69.73 {btu/lbm};
	FIX BO1.outlet.T;
	BO1.outlet.T := 1460 {R};
	BO1.outlet.h := 3000 {kJ/kg}; (* guess *)
	TU1.outlet.h := 3000 {kJ/kg}; (* guess *)
	FIX PU.outlet.p;
	PU.outlet.p := 2000 {psi};
	FIX mdot;
	mdot := 900 {t/d};

	(* this value here is what defines the intermediate pressure *)
	FIX TU1.outlet.T;
	TU1.outlet.T := 860 {R};

	TU2.inlet.h := 3000 {kJ/kg}; (* guess *)
END on_load;
METHOD self_test;
	ASSERT abs(eta - 0.443) < 0.0005;
	ASSERT abs(TU2.outlet.x - 0.926) < 0.0015;
	ASSERT abs(TU1.w + TU2.w) - 763.1 {btu/lbm} < 1 {btu/lbm};
END self_test;
END rankine_reheat;

(*------------------------------------------------------------------------------
  REGENERATIVE RANKINE CYCLE
*)
(*
	Add a boiler feedwater heater and two-stage turbine.

	This model is hard to solve! One solution seems to be to 
	1. load it, run on_load.
	2. attempt to solve
	3. disable equation HE.cons_en
	4. free HE.outlet.x
	5. solve again.
*)
MODEL rankine_regen;

	BO IS_A boiler_simple;
	TU1 IS_A turbine_simple;
	BL IS_A tee; (* bleed *)
	TU2 IS_A turbine_simple;
	CO IS_A condenser_simple;
	HE IS_A heater_open;
	PU1 IS_A pump_simple;
	PU2 IS_A pump_simple;

	(* main loop *)
	BO.outlet, TU1.inlet ARE_THE_SAME;
	TU1.outlet, BL.inlet ARE_THE_SAME;
	BL.outlet, TU2.inlet ARE_THE_SAME;
	TU2.outlet, CO.inlet ARE_THE_SAME;
	CO.outlet, PU1.inlet ARE_THE_SAME;
	PU1.outlet, HE.inlet ARE_THE_SAME;
	HE.outlet, PU2.inlet ARE_THE_SAME;
	PU2.outlet, BO.inlet ARE_THE_SAME;

	(* bleed stream *)
	BL.outlet_branch, HE.inlet_heat ARE_THE_SAME;
	phi ALIASES BL.phi;
	p_bleed ALIASES TU1.outlet.p;

	mdot ALIASES BO.mdot;

	T_H ALIASES BO.outlet.T;
	T_C ALIASES CO.outlet.T;

	eta IS_A fraction;
	eta_eq:eta * (BO.Qdot_fuel) = TU1.Wdot + TU2.Wdot + PU1.Wdot + PU2.Wdot;

	Wdot_TU1 ALIASES TU1.Wdot;
	Wdot_TU2 ALIASES TU2.Wdot;
	Wdot_PU1 ALIASES PU1.Wdot;
	Wdot_PU2 ALIASES PU2.Wdot;
	Qdot_fuel ALIASES BO.Qdot_fuel;

	eta_carnot IS_A fraction;
	eta_carnot = 1 - T_C / T_H;

	(* some checking output... *)

	phi_weston IS_A fraction;
	phi_weston_eq:phi_weston * (TU1.outlet.h - PU1.outlet.h) = (PU2.inlet.h - PU1.outlet.h);
	phi_eq:phi_weston = phi;

	w_net IS_A specific_energy;
	w_net_eq: TU1.mdot * w_net = TU1.mdot * (TU1.inlet.h - TU1.outlet.h) + TU2.mdot * (TU2.inlet.h - TU2.outlet.h);

	q_a IS_A specific_energy;
	q_a = TU1.inlet.h - PU2.outlet.h;

	Wdot IS_A energy_rate;
	Wdot = TU1.Wdot + TU2.Wdot + PU1.Wdot + PU2.Wdot;

	cons_en: HE.inlet.mdot * HE.inlet.h + HE.inlet_heat.mdot * HE.inlet_heat.h = HE.outlet.mdot * HE.outlet.h;

METHODS
METHOD default_self;
	BO.outlet.h := 4000 {kJ/kg};
	p_bleed := 37 {bar};
	TU1.outlet.h := 2300 {kJ/kg};
	CO.cons_en.included := FALSE;
	CO.cons_mass.included := FALSE;
END default_self;
METHOD on_load;
	RUN moran_ex_8_5;
(* note:
	acheived solution with the following variables fixed:
		BO.eta
		TU1.eta
		TU2.eta
		PU1.eta
		PU2.eta
		BO.outlet.p = TU1.inlet.p
		TU2.outlet_is.p = TU2.outlet.p
		PU2.inlet.x = HE.outlet.x
		Wdot

		REMOVE TU1.outlet.T = p_bleed
		REMOVE HE.outlet.p (redundant)
*)
END on_load;
METHOD moran_ex_8_5;
	RUN default_self;
	(*
		This is Example 8.5 from Moran and Shapiro, 'Fundamentals of
		Engineering Thermodynamics', 4th Ed.
	*)
	RUN ClearAll;
	(* component efficiencies *)
	FIX BO.eta;  BO.eta := 1.0;
	FIX TU1.eta; TU1.eta := 0.85;
	FIX TU2.eta; TU2.eta := 0.85;
	FIX PU1.eta; PU1.eta := 1.0;
	FIX PU2.eta; PU2.eta := 1.0;
	(* turbine conditions *)
	FIX TU1.inlet.p; TU1.inlet.p := 8. {MPa};
	FIX TU1.inlet.T; TU1.inlet.T := 480 {K} + 273.15 {K};
	FIX TU1.outlet.p; TU1.outlet.p := 0.7 {MPa};
	FIX TU2.outlet.p; TU2.outlet.p := 0.008 {MPa};
	(* heater conditions *)
	(* FIX HE.outlet.p; HE.outlet.p := 0.7 {MPa}; *)
	FIX HE.outlet.x; HE.outlet.x := 0.001;
	FIX Wdot; Wdot := 100 {MW};
END moran_ex_8_5;	
METHOD weston_ex_2_6;
	(*
		The scenario here is example 2.6 from K Weston (op. cit.), p. 55.
	*)
	RUN ClearAll;

	(* all ideal components *)
	FIX BO.eta;  BO.eta := 1.0;
	FIX TU1.eta; TU1.eta := 1.0;
	FIX TU2.eta; TU2.eta := 1.0;
	FIX PU1.eta; PU1.eta := 1.0;
	FIX PU2.eta; PU2.eta := 1.0;

	(* mass flow rate is arbitrary *)
	FIX mdot;
	mdot := 10 {kg/s};
	
	(* max pressure constraint *)
	FIX PU2.outlet.p;
	PU2.outlet.p := 2000 {psi};
	PU2.outlet.h := 1400 {btu/lbm}; (* guess *)

	(* boiler max temp *)
	FIX BO.outlet.T;
	BO.outlet.T := 1460 {R};
	BO.outlet.h := 1400 {btu/lbm}; (* guess *)

	(* intermediate temperature setting *)
	FIX TU1.outlet.p;
	TU1.outlet.p := 200 {psi};
	(* FIX TU1.outlet.T;
	TU1.outlet.T := 860 {R}; (* 400 °F *)
	TU1.outlet.h := 3000 {kJ/kg}; (* guess *) *)

	(* minimum pressure constraint *)
	FIX CO.outlet.p;
	CO.outlet.p := 1 {psi};

	(* condenser outlet is saturated liquid *)
	FIX CO.outlet.h;
	CO.outlet.h := 69.73 {btu/lbm};

	(* remove the redundant balance equations *)
	HE.cons_mass.included := TRUE;
	HE.cons_en.included := TRUE;
	BL.cons_mass.included := FALSE;
	phi_weston_eq.included := TRUE;
	phi_eq.included := FALSE;
	cons_en.included := FALSE;

	(* fix the bleed ratio *)
	FIX BL.phi;
	BL.phi := 0.251;

	(* FIX BL.outlet.h;
	BL.outlet.h := 355.5 {btu/lbm}; *)
	
END weston_ex_2_6;
METHOD self_test;
	ASSERT abs(TU1.inlet.s - 1.5603 {btu/lbm/R}) < 0.01 {btu/lbm/R};
	ASSERT abs(TU1.outlet.s - 1.5603 {btu/lbm/R}) < 0.01 {btu/lbm/R};
	ASSERT abs(TU2.outlet.s - 1.5603 {btu/lbm/R}) < 0.01 {btu/lbm/R};
	ASSERT abs(PU1.inlet.s - 0.1326 {btu/lbm/R}) < 0.001 {btu/lbm/R};
	ASSERT abs(PU1.outlet.s - 0.1326 {btu/lbm/R}) < 0.002 {btu/lbm/R};
	ASSERT abs(PU2.inlet.s - 0.5438 {btu/lbm/R}) < 0.002 {btu/lbm/R};
	ASSERT abs(PU2.outlet.s - 0.5438 {btu/lbm/R}) < 0.002 {btu/lbm/R};

	ASSERT abs(TU1.inlet.h - 1474.1 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(TU1.outlet.h - 1210.0 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(TU2.outlet.h - 871.0 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(PU1.inlet.h - 69.73 {btu/lbm}) < 0.001 {btu/lbm};
	ASSERT abs(PU1.outlet.h - 69.73 {btu/lbm}) < 1.0 {btu/lbm};
	ASSERT abs(PU2.inlet.h - 355.5 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(PU2.outlet.h - 355.5 {btu/lbm}) < 8 {btu/lbm};

	ASSERT abs(w_net - 518.1 {btu/lbm}) < 0.3 {btu/lbm};

	ASSERT abs(w_net * mdot - (TU1.Wdot + TU2.Wdot)) < 1 {W};

	ASSERT abs(q_a - 1118.6 {btu/lbm}) < 7 {btu/lbm};

	ASSERT abs(eta - 0.463) < 0.003;

	ASSERT abs(phi - 0.251) < 0.001;
END self_test;
END rankine_regen;

MODEL rankine_compare;
	simple IS_A rankine;
	regen IS_A rankine_regen;
	simple.BO.inlet.p, regen.BO.inlet.p ARE_THE_SAME;
	simple.BO.inlet.h, regen.BO.inlet.h ARE_THE_SAME;
	simple.BO.Qdot_fuel, regen.BO.Qdot_fuel ARE_THE_SAME;
	simple.CO.outlet.T, regen.CO.outlet.T ARE_THE_SAME;
	simple.BO.eta, regen.BO.eta ARE_THE_SAME;
	simple.TU.eta, regen.TU1.eta, regen.TU2.eta ARE_THE_SAME;
	simple.PU.eta, regen.PU1.eta, regen.PU2.eta ARE_THE_SAME;
	simple.mdot, regen.mdot ARE_THE_SAME;
METHODS
METHOD on_load;
	RUN ClearAll;
	RUN regen.on_load;
END on_load;
END rankine_compare;


