REQUIRE "johnpye/fprops/rankine_fprops.a4c";

(*
	TODO FIXME this model still doesn't include thermophysical property calculation
	(ie, fprops_lam and fprops_mu)
*)

MODEL viscosity_eq;
	mu IS_A viscosity;
	T IS_A temperature;
	cd IS_A fluid;

	calc_mu: fprops_mu_T_incomp(
		T : INPUT;
		mu : OUTPUT;
		cd : DATA
	);
METHODS
METHOD default;
	IF cd.component == 'sodium' THEN
		RUN enable;
	ELSE
		RUN disable;
		FIX mu := 0.024 {cP}; (* you should set your own value for this *)
	END IF;
END default;
METHOD default_self;
	RUN default;
END default_self;
METHOD enable;
	calc_mu[1].included := TRUE;
	FREE mu;
END enable;
METHOD disable;
	calc_mu[1].included := FALSE;
	FIX mu;
END disable;	
END viscosity_eq;


MODEL viscosity_eq_test REFINES viscosity_eq;
	cd.component :== 'sodium';
	cd.type :== 'incomp';
METHODS
METHOD on_load;
	RUN viscosity_eq::default_self;
	FIX T := 1000 {K};
END on_load;
METHOD self_test;
	ASSERT abs(mu - 1.81e-4 {Pa*s})< 0.005e-4 {Pa*s};
END self_test;
END viscosity_eq_test;


MODEL pipe_adiabatic REFINES stream_equipment;
	D "inside diameter" IS_A distance;
	A "flow cross-sectional area" IS_A area;
	L "pipe length" IS_A distance;
	eps "pipe roughness" IS_A distance;

	(* energy equation, ignoring potential energy *)
	A = 0.25{PI}*D^2;
	Vel_in, Vel_out IS_A speed;
	Vel_in * A = mdot * inlet.v;
	Vel_out * A = mdot * outlet.v;
	en_eqn: inlet.h + 0.5*Vel_in^2 = outlet.h + 0.5*Vel_out^2;

	(* pressure drops *)
	Re "Reynolds number" IS_A positive_factor;
	f_D "Friction factor (Darcy)" IS_A positive_factor;
	mu "dynamic viscosity" IS_A viscosity;
	Re = Vel_in * D / inlet.v / mu;
	(* Swamee-Jain eqn *)
	f_D = 0.25 / (log10(eps/(D*3.7) +5.74/Re^0.9))^2; (* note: constant f assumed over length, calculated with inlet spec vol *)
	(* momentum equation *)
	mom_eqn: (inlet.p - outlet.p) = (0.5 * Vel_in^2 / inlet.v) * f_D * (L/D);

	calc_mu IS_A viscosity_eq;
	calc_mu.cd, cd ARE_THE_SAME;
	calc_mu.T, inlet.T ARE_THE_SAME;
	mu, calc_mu.mu ARE_THE_SAME;

	ke_in, ke_out IS_A specific_energy;
	ke_in = 0.5 * Vel_in^2;
	ke_out = 0.5 * Vel_out^2;

	Vel_sonic_out "speed of sound at fluid outlet" IS_A speed;
	rho_out IS_A mass_density;
	rho_out = 1 / outlet.v;
	calc_w: fprops_w_Trho(
		outlet.T, rho_out : INPUT;
		Vel_sonic_out : OUTPUT;
		outlet.cd : DATA
	);
	T_in_C IS_A delta_temperature;
	T_in_C = inlet.T - 273.15 {K};
	T_out_C IS_A delta_temperature;
	T_out_C = outlet.T - 273.15 {K};
METHODS
METHOD default_self;
	RUN stream_equipment::default_self;
	Re.nominal := 100e5;
	RUN calc_mu.default_self;
END default_self;	
END pipe_adiabatic;


MODEL pipe_adiabatic_test REFINES pipe_adiabatic;
	cd.component :== 'water';
	cd.type :== 'helmholtz';
METHODS
METHOD on_load;
	RUN pipe_adiabatic::default_self;
	FIX D := 10 {mm};
	FIX L := 5 {m};
	FIX mdot := 0.1 {kg/s};
	FIX inlet.p := 35 {bar};
	FIX inlet.T := 370 {K} + 273.15 {K};

	FIX mu := 0.024 {cP};
	FIX eps := 0.09 {mm};

	(* initial guesses *)
	f_D := 0.0001;
	inlet.h := 4000 {kJ/kg};
	outlet.h := 4000 {kJ/kg};
END on_load;
END pipe_adiabatic_test;


MODEL pipe_adiabatic_test_sodium REFINES pipe_adiabatic;
	cd.component :== 'sodium';
	cd.type :== 'incomp';
METHODS
METHOD on_load;
	RUN pipe_adiabatic::default_self;
	RUN calc_mu.enable;
	FIX D := 10 {mm};
	FIX L := 5 {m};
	FIX mdot := 0.1 {kg/s};
	FIX inlet.p := 35 {bar};
	FIX inlet.T := 370 {K} + 273.15 {K};

	FIX eps := 0.09 {mm};

	(* initial guesses *)
	f_D := 0.0001;
	inlet.h := 514. {kJ/kg};
	outlet.h := 1146. {kJ/kg};
END on_load;
END pipe_adiabatic_test_sodium;


MODEL pipe_heat_loss REFINES pipe_adiabatic;
	D_o IS_A distance;
	t IS_A distance;
	D_o = D + 2*t;
	
	T_amb IS_A temperature;
	h "pipe external convection coeff" IS_A heat_transfer_coefficient;
	emiss "pipe external emissivity" IS_A fraction;
	Q IS_A energy_rate;
	Q = - h * L*1{PI}*D_o * (inlet.T - T_amb) - 1{SIGMA_C}*emiss*(inlet.T^4 - T_amb^4);

	(* energy equation, ignoring potential energy *)
	(* note that the pipe_adiabatic::en_eqn must be de-included in METHODS *)
	en_eqn_Q: Q/mdot + inlet.h + 0.5*Vel_in^2 = outlet.h + 0.5*Vel_out^2;
METHODS
METHOD default_self;
	RUN pipe_adiabatic::default_self;
	en_eqn.included := FALSE;
	en_eqn_Q.included := TRUE;
	RUN calc_mu.disable;
END default_self;	
END pipe_heat_loss;


MODEL pipe_heat_loss_test REFINES pipe_heat_loss;
	cd.component :== 'water';
	cd.type :== 'helmholtz';
METHODS
METHOD on_load;
	RUN pipe_heat_loss::default_self;
	FIX D := 10 {mm};
	FIX t := 1 {mm};
	FIX L := 5 {m};
	FIX mdot := 0.1 {kg/s};
	FIX inlet.p := 35 {bar};
	FIX inlet.T := 370 {K} + 273.15 {K};

	FIX mu := 0.024 {cP};
	FIX eps := 0.09 {mm};
	FIX emiss := 0.8;

	FIX h := 20 {W/m^2/K};
	FIX T_amb := 20 {K} + 273.15{K};

	(* initial guesses *)
	f_D := 0.0001;
	inlet.h := 4000 {kJ/kg};
	outlet.h := 4000 {kJ/kg};
END on_load;
END pipe_heat_loss_test;


MODEL pipe_sequence REFINES stream_equipment;
	L_tot IS_A distance;
	n IS_A integer_constant;

	P[1..n] IS_A pipe_heat_loss;
	FOR i IN [1..n-1] CREATE
		P[i].outlet, P[i+1].inlet ARE_THE_SAME;
	END FOR;
	inlet, P[1].inlet ARE_THE_SAME;
	outlet, P[n].outlet ARE_THE_SAME;

	P[1..n].eps ARE_THE_SAME;
	P[1..n].emiss ARE_THE_SAME;
	emiss ALIASES P[1].emiss;
	P[1..n].h ARE_THE_SAME;
	P[1..n].T_amb ARE_THE_SAME;
	h ALIASES P[1].h;
	T_amb ALIASES P[1].T_amb;
METHODS
METHOD default_self;
	FOR i IN [1..n] DO
		RUN P[i].default_self;
	END FOR;
END default_self;
METHOD enable_calc_mu;
	FOR i IN [1..n] DO
		RUN P[i].calc_mu.enable;
	END FOR;
END enable_calc_mu;
END pipe_sequence;

MODEL pipe_sequence_test REFINES pipe_sequence;
	n :== 5;

	cd.component :== 'sodium';	
	cd.type :== 'incomp';
METHODS
METHOD on_load;
	RUN default_self;
	FIX L_tot := 50 {m};
	FIX P[1].eps := 0.09 {mm};
	FIX P[1].D := 150 {mm};
	FIX P[2..n].D := 100 {mm};
	FIX P[1].t := 2 {mm};
	FIX P[2..n].t := 2 {mm};
	FIX h := 20 {W/m^2/K};
	FIX emiss := 0.8;
	FIX T_amb := 20 {K} + 273.15 {K};
	FIX P[1].L := 5 {m};
	FIX P[2..n].L := (L_tot - P[1].L) / (n - 1);
	FIX P[1].inlet.p := 35 {bar};
	FIX P[1].inlet.T := 500 {K} + 273.15 {K};
	FIX P[1].mdot := 60 {kg/s};

	IF cd.component == 'sodium' THEN
		P[1].inlet.h := 400 {kJ/kg};
		RUN enable_calc_mu;
	ELSE
		P[1].inlet.h := 4000 {kJ/kg};
		FIX P[1..n].mu := 0.024 {cP};
	END IF;
	P[1].outlet.h := 4000 {kJ/kg};
	RUN enable_calc_mu;
	SOLVER QRSlv;
	OPTION convopt 'RELNOM_SCALE';
END on_load;
END pipe_sequence_test;
