REQUIRE "johnpye/fprops/rankine_fprops.a4c";

(*------------------------------------------------------------------------------
  REGENERATIVE RANKINE CYCLE
*)
(*
	Add a boiler feedwater heater and two-stage turbine.
*)
MODEL rankine_regen_water;

	BO IS_A boiler_simple;
	TU1 IS_A turbine_simple;
	BL IS_A tee; (* bleed *)
	TU2 IS_A turbine_simple;
	CO IS_A condenser_simple;
	HE IS_A heater_open;
	PU1 IS_A pump_simple;
	PU2 IS_A pump_simple;

	BO.cd.component :== 'water';

	(* main loop *)
	BO.outlet, TU1.inlet ARE_THE_SAME;
	TU1.outlet, BL.inlet ARE_THE_SAME;
	BL.outlet, TU2.inlet ARE_THE_SAME;
	TU2.outlet, CO.inlet ARE_THE_SAME;
	CO.outlet, PU1.inlet ARE_THE_SAME;
	PU1.outlet, HE.inlet ARE_THE_SAME;
	HE.outlet, PU2.inlet ARE_THE_SAME;
	PU2.outlet, BO.inlet ARE_THE_SAME;

	(* bleed stream *)
	BL.outlet_branch, HE.inlet_heat ARE_THE_SAME;
	phi ALIASES BL.phi;
	p_bleed ALIASES TU1.outlet.p;

	p_bleed_ratio IS_A fraction;
	p_bleed_ratio * (TU1.inlet.p - TU2.outlet.p) = (TU1.outlet.p - TU2.outlet.p);
	
	mdot ALIASES BO.mdot;
	cd ALIASES BO.inlet.cd;

	T_H ALIASES BO.outlet.T;
	T_C ALIASES CO.outlet.T;

	eta IS_A fraction;
	eta_eq:eta * (BO.Qdot_fuel) = TU1.Wdot + TU2.Wdot + PU1.Wdot + PU2.Wdot;

	Wdot_TU1 ALIASES TU1.Wdot;
	Wdot_TU2 ALIASES TU2.Wdot;
	Wdot_PU1 ALIASES PU1.Wdot;
	Wdot_PU2 ALIASES PU2.Wdot;
	Qdot_fuel ALIASES BO.Qdot_fuel;

	eta_carnot IS_A fraction;
	eta_carnot_eq: eta_carnot = 1 - T_C / T_H;

	eta_turb_tot IS_A fraction;
	TU_out_is IS_A stream_state;
	TU_out_is.cd, TU1.inlet.cd ARE_THE_SAME;
	TU_out_is.p, TU2.outlet.p ARE_THE_SAME;
	TU_out_is.s, TU1.inlet.s ARE_THE_SAME;
	eta_turb_eq:eta_turb_tot * (TU1.inlet.h - TU_out_is.h) = (TU1.inlet.h - TU2.outlet.h);

	(* some checking output... *)

	phi_weston IS_A fraction;
	phi_weston_eq:phi_weston * (TU1.outlet.h - PU1.outlet.h) = (PU2.inlet.h - PU1.outlet.h);
	phi_eq:phi_weston = phi;

	q_a IS_A specific_energy;
	q_a_eq: q_a = TU1.inlet.h - PU2.outlet.h;

	Wdot IS_A energy_rate;
	Wdot_eq: Wdot = TU1.Wdot + TU2.Wdot + PU1.Wdot + PU2.Wdot;

	cons_en: HE.inlet.mdot * HE.inlet.h + HE.inlet_heat.mdot * HE.inlet_heat.h = HE.outlet.mdot * HE.outlet.h;

	x_turb_out ALIASES TU2.outlet.x;
METHODS
METHOD default_self;
	RUN BO.default_self;
	RUN TU1.default_self;
	RUN TU2.default_self;
	RUN CO.default_self;
	RUN PU1.default_self;
	RUN PU2.default_self;
	BO.outlet.h := 4000 {kJ/kg};
	p_bleed := 37 {bar};
	TU1.outlet.h := 2300 {kJ/kg};
	BL.cons_mass.included := FALSE;
	(*HE.cons_mass.included := FALSE;*)
	HE.cons_en.included := FALSE;
	cons_en.included := FALSE;
	HE.inlet.v := 100 {m^3/kg};
	HE.inlet.p.nominal := 40 {bar};
	HE.inlet.v.nominal := 1 {L/kg};
	HE.inlet.h.nominal := 100 {kJ/kg};
END default_self;
METHOD solarpaces2010;
	RUN ClearAll;
	RUN default_self;
	(* component efficiencies *)
	FIX BO.eta;  BO.eta := 1.0;
	FIX TU1.eta; TU1.eta := 0.85;
	FIX TU2.eta; TU2.eta := 0.85;
	FIX PU1.eta; PU1.eta := 0.8;
	FIX PU2.eta; PU2.eta := 0.8;
	FIX Wdot; Wdot := 100 {MW};
(*
(*	FIX CO.outlet.p; CO.outlet.p := 10 {kPa};*)
	FIX CO.outlet.T; CO.outlet.T := 40 {K} + 273.15 {K};
	FIX CO.outlet.x; CO.outlet.x := 1e-6;
	FIX PU1.outlet.p; PU1.outlet.p := 7 {bar};
	FIX PU2.outlet.p; PU2.outlet.p := 150 {bar};
	PU2.outlet.p.upper_bound := 150 {bar};
	FIX BO.outlet.T; BO.outlet.T := 580 {K} + 273.15 {K};		
*)
	(* turbine conditions *)
	FIX TU1.inlet.p; TU1.inlet.p := 150 {bar};
	FIX TU1.inlet.T; TU1.inlet.T := 580 {K} + 273.15 {K};
	FIX TU1.outlet.p; TU1.outlet.p := 10.3 {bar};
	FIX CO.outlet.T; CO.outlet.T := 40 {K} + 273.15 {K};
	(* heater conditions *)
	TU2.outlet.p := 10 {kPa};
	(* FIX HE.outlet.p; HE.outlet.p := 0.7 {MPa}; *)
	FIX CO.outlet.x; CO.outlet.x := 1e-6;
	FIX HE.outlet.x; HE.outlet.x := 1e-6;
END solarpaces2010;
METHOD on_load;
	RUN solarpaces2010;
(*
	This model needs to be solved using QRSlv with convopt set to 'RELNOMSCALE'.
*)
	SOLVER QRSlv;
	OPTION convopt 'RELNOM_SCALE';
	OPTION iterationlimit 400;
END on_load;
METHOD set_x_limit_correct_turb;
	FREE PU2.outlet.p;
	PU2.outlet.p.upper_bound := 150 {bar};
	FIX TU2.outlet.x; TU2.outlet.x := 0.9;
	(* a little corrctn to ensure we're comparing the same *overall* turbine eff *)
	FREE TU1.eta;
	TU2.eta := 0.823;
	FIX eta_turb_tot; eta_turb_tot := 0.85;
END set_x_limit;
METHOD cycle_plot;
	EXTERNAL cycle_plot_rankine_regen2(SELF);
END cycle_plot;
METHOD moran_ex_8_5;
	RUN default_self;
	(*
		This is Example 8.5 from Moran and Shapiro, 'Fundamentals of
		Engineering Thermodynamics', 4th Ed.
	*)
	RUN ClearAll;
	(* component efficiencies *)
	FIX BO.eta;  BO.eta := 1.0;
	FIX TU1.eta; TU1.eta := 0.85;
	FIX TU2.eta; TU2.eta := 0.85;
	FIX PU1.eta; PU1.eta := 1.0;
	FIX PU2.eta; PU2.eta := 1.0;
	(* turbine conditions *)
	FIX TU1.inlet.p; TU1.inlet.p := 8. {MPa};
	FIX TU1.inlet.T; TU1.inlet.T := 480 {K} + 273.15 {K};
	FIX TU1.outlet.p; TU1.outlet.p := 0.7 {MPa};
	FIX TU2.outlet.p; TU2.outlet.p := 0.008 {MPa};
	(* heater conditions *)
	(* FIX HE.outlet.p; HE.outlet.p := 0.7 {MPa}; *)
	FIX CO.outlet.x; CO.outlet.x := 0.0001;
	FIX HE.outlet.x; HE.outlet.x := 0.0001;
	FIX Wdot; Wdot := 100 {MW};
END moran_ex_8_5;	
METHOD self_test;
	(* solution values to the Moran & Shapiro example 8.5 problem *)
	ASSERT abs(eta - 0.369) < 0.001;
	ASSERT abs((TU1.Wdot+TU2.Wdot)/mdot - 984.4{kJ/kg}) < 1 {kJ/kg};
	ASSERT abs(mdot - 3.69e5 {kg/h}) < 0.05e5 {kg/h};
	ASSERT abs(CO.inlet.h - 2249.3 {kJ/kg}) < 1.0 {kJ/kg};
END self_test;
METHOD weston_ex_2_6;
	(*
		The scenario here is example 2.6 from K Weston (op. cit.), p. 55.
	*)
	RUN ClearAll;

	(* all ideal components *)
	FIX BO.eta;  BO.eta := 1.0;
	FIX TU1.eta; TU1.eta := 1.0;
	FIX TU2.eta; TU2.eta := 1.0;
	FIX PU1.eta; PU1.eta := 1.0;
	FIX PU2.eta; PU2.eta := 1.0;

	(* mass flow rate is arbitrary *)
	FIX mdot;
	mdot := 10 {kg/s};
	
	(* max pressure constraint *)
	FIX PU2.outlet.p;
	PU2.outlet.p := 2000 {psi};
	PU2.outlet.h := 1400 {btu/lbm}; (* guess *)

	(* boiler max temp *)
	FIX BO.outlet.T;
	BO.outlet.T := 1460 {R};
	BO.outlet.h := 1400 {btu/lbm}; (* guess *)

	(* intermediate temperature setting *)
	FIX TU1.outlet.p;
	TU1.outlet.p := 200 {psi};
	(* FIX TU1.outlet.T;
	TU1.outlet.T := 860 {R}; (* 400 Â°F *)
	TU1.outlet.h := 3000 {kJ/kg}; (* guess *) *)

	(* minimum pressure constraint *)
	FIX CO.outlet.p;
	CO.outlet.p := 1 {psi};

	(* condenser outlet is saturated liquid *)
	FIX CO.outlet.h;
	CO.outlet.h := 69.73 {btu/lbm};

	(* remove the redundant balance equations *)
	HE.cons_mass.included := TRUE;
	HE.cons_en.included := TRUE;
	BL.cons_mass.included := FALSE;
	phi_weston_eq.included := TRUE;
	phi_eq.included := FALSE;
	cons_en.included := FALSE;

	(* fix the bleed ratio *)
	FIX BL.phi;
	BL.phi := 0.251;

	(* FIX BL.outlet.h;
	BL.outlet.h := 355.5 {btu/lbm}; *)

(** 
	these values seem to be from another problem, need to check which ...
	ASSERT abs(TU1.inlet.s - 1.5603 {btu/lbm/R}) < 0.01 {btu/lbm/R};
	ASSERT abs(TU1.outlet.s - 1.5603 {btu/lbm/R}) < 0.01 {btu/lbm/R};
	ASSERT abs(TU2.outlet.s - 1.5603 {btu/lbm/R}) < 0.01 {btu/lbm/R};
	ASSERT abs(PU1.inlet.s - 0.1326 {btu/lbm/R}) < 0.001 {btu/lbm/R};
	ASSERT abs(PU1.outlet.s - 0.1326 {btu/lbm/R}) < 0.002 {btu/lbm/R};
	ASSERT abs(PU2.inlet.s - 0.5438 {btu/lbm/R}) < 0.002 {btu/lbm/R};
	ASSERT abs(PU2.outlet.s - 0.5438 {btu/lbm/R}) < 0.002 {btu/lbm/R};

	ASSERT abs(TU1.inlet.h - 1474.1 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(TU1.outlet.h - 1210.0 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(TU2.outlet.h - 871.0 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(PU1.inlet.h - 69.73 {btu/lbm}) < 0.001 {btu/lbm};
	ASSERT abs(PU1.outlet.h - 69.73 {btu/lbm}) < 1.0 {btu/lbm};
	ASSERT abs(PU2.inlet.h - 355.5 {btu/lbm}) < 1.5 {btu/lbm};
	ASSERT abs(PU2.outlet.h - 355.5 {btu/lbm}) < 8 {btu/lbm};

	ASSERT abs(w_net - 518.1 {btu/lbm}) < 0.3 {btu/lbm};

	ASSERT abs(w_net * mdot - (TU1.Wdot + TU2.Wdot)) < 1 {W};

	ASSERT abs(q_a - 1118.6 {btu/lbm}) < 7 {btu/lbm};

	ASSERT abs(eta - 0.463) < 0.003;

	ASSERT abs(phi - 0.251) < 0.001;
*)	
END weston_ex_2_6;
END rankine_regen_water;


MODEL rankine_regen_common;
	BO IS_A boiler_simple;
	TU IS_A turbine_simple;
	CO IS_A condenser_simple;
	HE IS_A heater_closed;
	PU IS_A pump_simple;
	
	(* main loop *)
	BO.outlet, TU.inlet ARE_THE_SAME;
	TU.outlet, HE.inlet_heat ARE_THE_SAME;
	HE.outlet_heat, CO.inlet ARE_THE_SAME;
	CO.outlet, PU.inlet ARE_THE_SAME;
	PU.outlet, HE.inlet ARE_THE_SAME;
	HE.outlet, BO.inlet ARE_THE_SAME;

	mdot ALIASES BO.mdot;
	cd ALIASES BO.inlet.cd;

	T_H ALIASES BO.outlet.T;
	T_C ALIASES CO.outlet.T;

	eta IS_A fraction;
	eta_eq:eta * (BO.Qdot_fuel) = TU.Wdot + PU.Wdot;

	Wdot_TU ALIASES TU.Wdot;
	Wdot_PU ALIASES PU.Wdot;
	Qdot_fuel ALIASES BO.Qdot_fuel;

	eta_carnot IS_A fraction;
	eta_carnot_eq: eta_carnot = 1 - T_C / T_H;

	Wdot IS_A energy_rate;
	Wdot_eq: Wdot = TU.Wdot + PU.Wdot;

	T_ci ALIASES HE.inlet.T;
	T_co ALIASES HE.outlet.T;
	T_hi ALIASES HE.inlet_heat.T;
	T_ho ALIASES HE.outlet_heat.T;

	DE_cycle "cycle energy balance, should be zero" IS_A energy_rate;
	DE_cycle = BO.Qdot + CO.Qdot - TU.Wdot - PU.Wdot;

	x_turb_out ALIASES TU.outlet.x;
METHODS
METHOD default_self;
	RUN BO.default_self;
	RUN TU.default_self;
	RUN CO.default_self;
	RUN PU.default_self;
	RUN HE.default_self;
	BL.cons_mass.included := FALSE;
	HE.cons_en.included := FALSE;
END default_self;
METHOD cycle_plot;
	EXTERNAL cycle_plot_rankine_regen1(SELF);
END cycle_plot;
METHOD heater_plot;
	EXTERNAL heater_closed_plot(SELF);
END cycle_plot;
END rankine_regen_common;


MODEL rankine_regen_toluene REFINES rankine_regen_common;
	BO.cd.component :== 'toluene';
METHODS
METHOD on_load;
	FIX BO.outlet.T; BO.outlet.T := 580 {K} + 273.15 {K};
	FIX PU.outlet.p; PU.outlet.p := 150 {bar};
	FIX CO.outlet.T; CO.outlet.T := 40 {K} + 273.15 {K};
	FIX CO.outlet.x; CO.outlet.x := 1e-6;
	FIX HE.outlet.T; HE.outlet.T := 307 {K} + 273.15 {K};
	
	FIX BO.eta;  BO.eta := 1.0;
	FIX TU.eta; TU.eta := 0.85;
	FIX PU.eta; PU.eta := 0.8;

	SOLVER QRSlv;
	OPTION convopt 'RELNOM_SCALE';
	OPTION iterationlimit 200;
END on_load;
METHOD default_self;
	RUN rankine_regen_common::default_self;
	PU.inlet.h := 400 {kJ/kg};
	BO.outlet.h := 400 {kJ/kg};
	CO.outlet.h := 400 {kJ/kg};
	CO.outlet.p := 10 {kPa};
END default_self;
END rankine_regen_toluene;


MODEL rankine_regen_ammonia REFINES rankine_regen_common;
	BO.cd.component :== 'ammonia';
METHODS
METHOD on_load;
	FIX BO.outlet.T; BO.outlet.T := 580 {K} + 273.15 {K};
	FIX PU.outlet.p; PU.outlet.p := 150 {bar};
	FIX CO.outlet.T; CO.outlet.T := 40 {K} + 273.15 {K};
	FIX CO.outlet.x; CO.outlet.x := 1e-6;
	FIX HE.outlet.T; HE.outlet.T := 150.1 {K} + 273.15 {K};
	
	FIX BO.eta;  BO.eta := 1.0;
	FIX TU.eta; TU.eta := 0.85;
	FIX PU.eta; PU.eta := 0.8;

	SOLVER QRSlv;
	OPTION convopt 'RELNOM_SCALE';
	OPTION iterationlimit 200;
END on_load;
METHOD default_self;
	RUN rankine_regen_common::default_self;
	PU.inlet.h := 400 {kJ/kg};
	BO.outlet.h := 400 {kJ/kg};
	CO.outlet.h := 400 {kJ/kg};
	CO.outlet.p := 10 {kPa};
END default_self;
END rankine_regen_ammonia;



