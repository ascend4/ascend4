# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _fprops
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class HelmholtzPowTerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzPowTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzPowTerm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _fprops.HelmholtzPowTerm_a_set
    __swig_getmethods__["a"] = _fprops.HelmholtzPowTerm_a_get
    if _newclass:a = _swig_property(_fprops.HelmholtzPowTerm_a_get, _fprops.HelmholtzPowTerm_a_set)
    __swig_setmethods__["t"] = _fprops.HelmholtzPowTerm_t_set
    __swig_getmethods__["t"] = _fprops.HelmholtzPowTerm_t_get
    if _newclass:t = _swig_property(_fprops.HelmholtzPowTerm_t_get, _fprops.HelmholtzPowTerm_t_set)
    __swig_setmethods__["d"] = _fprops.HelmholtzPowTerm_d_set
    __swig_getmethods__["d"] = _fprops.HelmholtzPowTerm_d_get
    if _newclass:d = _swig_property(_fprops.HelmholtzPowTerm_d_get, _fprops.HelmholtzPowTerm_d_set)
    __swig_setmethods__["l"] = _fprops.HelmholtzPowTerm_l_set
    __swig_getmethods__["l"] = _fprops.HelmholtzPowTerm_l_get
    if _newclass:l = _swig_property(_fprops.HelmholtzPowTerm_l_get, _fprops.HelmholtzPowTerm_l_set)
    def __init__(self, *args): 
        this = _fprops.new_HelmholtzPowTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzPowTerm
    __del__ = lambda self : None;
HelmholtzPowTerm_swigregister = _fprops.HelmholtzPowTerm_swigregister
HelmholtzPowTerm_swigregister(HelmholtzPowTerm)

class HelmholtzGausTerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzGausTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzGausTerm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _fprops.HelmholtzGausTerm_n_set
    __swig_getmethods__["n"] = _fprops.HelmholtzGausTerm_n_get
    if _newclass:n = _swig_property(_fprops.HelmholtzGausTerm_n_get, _fprops.HelmholtzGausTerm_n_set)
    __swig_setmethods__["t"] = _fprops.HelmholtzGausTerm_t_set
    __swig_getmethods__["t"] = _fprops.HelmholtzGausTerm_t_get
    if _newclass:t = _swig_property(_fprops.HelmholtzGausTerm_t_get, _fprops.HelmholtzGausTerm_t_set)
    __swig_setmethods__["d"] = _fprops.HelmholtzGausTerm_d_set
    __swig_getmethods__["d"] = _fprops.HelmholtzGausTerm_d_get
    if _newclass:d = _swig_property(_fprops.HelmholtzGausTerm_d_get, _fprops.HelmholtzGausTerm_d_set)
    __swig_setmethods__["alpha"] = _fprops.HelmholtzGausTerm_alpha_set
    __swig_getmethods__["alpha"] = _fprops.HelmholtzGausTerm_alpha_get
    if _newclass:alpha = _swig_property(_fprops.HelmholtzGausTerm_alpha_get, _fprops.HelmholtzGausTerm_alpha_set)
    __swig_setmethods__["beta"] = _fprops.HelmholtzGausTerm_beta_set
    __swig_getmethods__["beta"] = _fprops.HelmholtzGausTerm_beta_get
    if _newclass:beta = _swig_property(_fprops.HelmholtzGausTerm_beta_get, _fprops.HelmholtzGausTerm_beta_set)
    __swig_setmethods__["gamma"] = _fprops.HelmholtzGausTerm_gamma_set
    __swig_getmethods__["gamma"] = _fprops.HelmholtzGausTerm_gamma_get
    if _newclass:gamma = _swig_property(_fprops.HelmholtzGausTerm_gamma_get, _fprops.HelmholtzGausTerm_gamma_set)
    __swig_setmethods__["epsilon"] = _fprops.HelmholtzGausTerm_epsilon_set
    __swig_getmethods__["epsilon"] = _fprops.HelmholtzGausTerm_epsilon_get
    if _newclass:epsilon = _swig_property(_fprops.HelmholtzGausTerm_epsilon_get, _fprops.HelmholtzGausTerm_epsilon_set)
    def __init__(self, *args): 
        this = _fprops.new_HelmholtzGausTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzGausTerm
    __del__ = lambda self : None;
HelmholtzGausTerm_swigregister = _fprops.HelmholtzGausTerm_swigregister
HelmholtzGausTerm_swigregister(HelmholtzGausTerm)

class HelmholtzCritTerm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzCritTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzCritTerm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _fprops.HelmholtzCritTerm_n_set
    __swig_getmethods__["n"] = _fprops.HelmholtzCritTerm_n_get
    if _newclass:n = _swig_property(_fprops.HelmholtzCritTerm_n_get, _fprops.HelmholtzCritTerm_n_set)
    __swig_setmethods__["a"] = _fprops.HelmholtzCritTerm_a_set
    __swig_getmethods__["a"] = _fprops.HelmholtzCritTerm_a_get
    if _newclass:a = _swig_property(_fprops.HelmholtzCritTerm_a_get, _fprops.HelmholtzCritTerm_a_set)
    __swig_setmethods__["b"] = _fprops.HelmholtzCritTerm_b_set
    __swig_getmethods__["b"] = _fprops.HelmholtzCritTerm_b_get
    if _newclass:b = _swig_property(_fprops.HelmholtzCritTerm_b_get, _fprops.HelmholtzCritTerm_b_set)
    __swig_setmethods__["beta"] = _fprops.HelmholtzCritTerm_beta_set
    __swig_getmethods__["beta"] = _fprops.HelmholtzCritTerm_beta_get
    if _newclass:beta = _swig_property(_fprops.HelmholtzCritTerm_beta_get, _fprops.HelmholtzCritTerm_beta_set)
    __swig_setmethods__["A"] = _fprops.HelmholtzCritTerm_A_set
    __swig_getmethods__["A"] = _fprops.HelmholtzCritTerm_A_get
    if _newclass:A = _swig_property(_fprops.HelmholtzCritTerm_A_get, _fprops.HelmholtzCritTerm_A_set)
    __swig_setmethods__["B"] = _fprops.HelmholtzCritTerm_B_set
    __swig_getmethods__["B"] = _fprops.HelmholtzCritTerm_B_get
    if _newclass:B = _swig_property(_fprops.HelmholtzCritTerm_B_get, _fprops.HelmholtzCritTerm_B_set)
    __swig_setmethods__["C"] = _fprops.HelmholtzCritTerm_C_set
    __swig_getmethods__["C"] = _fprops.HelmholtzCritTerm_C_get
    if _newclass:C = _swig_property(_fprops.HelmholtzCritTerm_C_get, _fprops.HelmholtzCritTerm_C_set)
    __swig_setmethods__["D"] = _fprops.HelmholtzCritTerm_D_set
    __swig_getmethods__["D"] = _fprops.HelmholtzCritTerm_D_get
    if _newclass:D = _swig_property(_fprops.HelmholtzCritTerm_D_get, _fprops.HelmholtzCritTerm_D_set)
    def __init__(self, *args): 
        this = _fprops.new_HelmholtzCritTerm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzCritTerm
    __del__ = lambda self : None;
HelmholtzCritTerm_swigregister = _fprops.HelmholtzCritTerm_swigregister
HelmholtzCritTerm_swigregister(HelmholtzCritTerm)

class HelmholtzData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["R"] = _fprops.HelmholtzData_R_set
    __swig_getmethods__["R"] = _fprops.HelmholtzData_R_get
    if _newclass:R = _swig_property(_fprops.HelmholtzData_R_get, _fprops.HelmholtzData_R_set)
    __swig_setmethods__["M"] = _fprops.HelmholtzData_M_set
    __swig_getmethods__["M"] = _fprops.HelmholtzData_M_get
    if _newclass:M = _swig_property(_fprops.HelmholtzData_M_get, _fprops.HelmholtzData_M_set)
    __swig_setmethods__["rho_star"] = _fprops.HelmholtzData_rho_star_set
    __swig_getmethods__["rho_star"] = _fprops.HelmholtzData_rho_star_get
    if _newclass:rho_star = _swig_property(_fprops.HelmholtzData_rho_star_get, _fprops.HelmholtzData_rho_star_set)
    __swig_setmethods__["T_star"] = _fprops.HelmholtzData_T_star_set
    __swig_getmethods__["T_star"] = _fprops.HelmholtzData_T_star_get
    if _newclass:T_star = _swig_property(_fprops.HelmholtzData_T_star_get, _fprops.HelmholtzData_T_star_set)
    __swig_setmethods__["T_c"] = _fprops.HelmholtzData_T_c_set
    __swig_getmethods__["T_c"] = _fprops.HelmholtzData_T_c_get
    if _newclass:T_c = _swig_property(_fprops.HelmholtzData_T_c_get, _fprops.HelmholtzData_T_c_set)
    __swig_setmethods__["p_c"] = _fprops.HelmholtzData_p_c_set
    __swig_getmethods__["p_c"] = _fprops.HelmholtzData_p_c_get
    if _newclass:p_c = _swig_property(_fprops.HelmholtzData_p_c_get, _fprops.HelmholtzData_p_c_set)
    __swig_setmethods__["rho_c"] = _fprops.HelmholtzData_rho_c_set
    __swig_getmethods__["rho_c"] = _fprops.HelmholtzData_rho_c_get
    if _newclass:rho_c = _swig_property(_fprops.HelmholtzData_rho_c_get, _fprops.HelmholtzData_rho_c_set)
    __swig_setmethods__["p_t"] = _fprops.HelmholtzData_p_t_set
    __swig_getmethods__["p_t"] = _fprops.HelmholtzData_p_t_get
    if _newclass:p_t = _swig_property(_fprops.HelmholtzData_p_t_get, _fprops.HelmholtzData_p_t_set)
    __swig_setmethods__["omega"] = _fprops.HelmholtzData_omega_set
    __swig_getmethods__["omega"] = _fprops.HelmholtzData_omega_get
    if _newclass:omega = _swig_property(_fprops.HelmholtzData_omega_get, _fprops.HelmholtzData_omega_set)
    __swig_setmethods__["ideal"] = _fprops.HelmholtzData_ideal_set
    __swig_getmethods__["ideal"] = _fprops.HelmholtzData_ideal_get
    if _newclass:ideal = _swig_property(_fprops.HelmholtzData_ideal_get, _fprops.HelmholtzData_ideal_set)
    __swig_setmethods__["np"] = _fprops.HelmholtzData_np_set
    __swig_getmethods__["np"] = _fprops.HelmholtzData_np_get
    if _newclass:np = _swig_property(_fprops.HelmholtzData_np_get, _fprops.HelmholtzData_np_set)
    __swig_setmethods__["pt"] = _fprops.HelmholtzData_pt_set
    __swig_getmethods__["pt"] = _fprops.HelmholtzData_pt_get
    if _newclass:pt = _swig_property(_fprops.HelmholtzData_pt_get, _fprops.HelmholtzData_pt_set)
    __swig_setmethods__["ng"] = _fprops.HelmholtzData_ng_set
    __swig_getmethods__["ng"] = _fprops.HelmholtzData_ng_get
    if _newclass:ng = _swig_property(_fprops.HelmholtzData_ng_get, _fprops.HelmholtzData_ng_set)
    __swig_setmethods__["gt"] = _fprops.HelmholtzData_gt_set
    __swig_getmethods__["gt"] = _fprops.HelmholtzData_gt_get
    if _newclass:gt = _swig_property(_fprops.HelmholtzData_gt_get, _fprops.HelmholtzData_gt_set)
    __swig_setmethods__["nc"] = _fprops.HelmholtzData_nc_set
    __swig_getmethods__["nc"] = _fprops.HelmholtzData_nc_get
    if _newclass:nc = _swig_property(_fprops.HelmholtzData_nc_get, _fprops.HelmholtzData_nc_set)
    __swig_setmethods__["ct"] = _fprops.HelmholtzData_ct_set
    __swig_getmethods__["ct"] = _fprops.HelmholtzData_ct_get
    if _newclass:ct = _swig_property(_fprops.HelmholtzData_ct_get, _fprops.HelmholtzData_ct_set)
    def __init__(self, *args): 
        this = _fprops.new_HelmholtzData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzData
    __del__ = lambda self : None;
HelmholtzData_swigregister = _fprops.HelmholtzData_swigregister
HelmholtzData_swigregister(HelmholtzData)

helmholtz_p = _fprops.helmholtz_p
helmholtz_u = _fprops.helmholtz_u
helmholtz_h = _fprops.helmholtz_h
helmholtz_s = _fprops.helmholtz_s
helmholtz_a = _fprops.helmholtz_a
helmholtz_cv = _fprops.helmholtz_cv
helmholtz_cp = _fprops.helmholtz_cp
helmholtz_w = _fprops.helmholtz_w
helmholtz_sat_t = _fprops.helmholtz_sat_t
helmholtz_cp0 = _fprops.helmholtz_cp0
helmholtz_dpdT_rho = _fprops.helmholtz_dpdT_rho
helmholtz_dpdrho_T = _fprops.helmholtz_dpdrho_T
helmholtz_dhdT_rho = _fprops.helmholtz_dhdT_rho
helmholtz_dhdrho_T = _fprops.helmholtz_dhdrho_T
helmholtz_dudT_rho = _fprops.helmholtz_dudT_rho
helmholtz_dudrho_T = _fprops.helmholtz_dudrho_T

cvar = _fprops.cvar
helmholtz_data_carbondioxide = cvar.helmholtz_data_carbondioxide
helmholtz_data_water = cvar.helmholtz_data_water
helmholtz_data_ammonia = cvar.helmholtz_data_ammonia
helmholtz_data_hydrogen = cvar.helmholtz_data_hydrogen
helmholtz_data_nitrogen = cvar.helmholtz_data_nitrogen

