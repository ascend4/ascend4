# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fprops', [dirname(__file__)])
        except ImportError:
            import _fprops
            return _fprops
        if fp is not None:
            try:
                _mod = imp.load_module('_fprops', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fprops = swig_import_helper()
    del swig_import_helper
else:
    import _fprops
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class HelmholtzPowTerm(_object):
    """Proxy of C HelmholtzPowTerm struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzPowTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzPowTerm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _fprops.HelmholtzPowTerm_a_set
    __swig_getmethods__["a"] = _fprops.HelmholtzPowTerm_a_get
    if _newclass:a = _swig_property(_fprops.HelmholtzPowTerm_a_get, _fprops.HelmholtzPowTerm_a_set)
    __swig_setmethods__["t"] = _fprops.HelmholtzPowTerm_t_set
    __swig_getmethods__["t"] = _fprops.HelmholtzPowTerm_t_get
    if _newclass:t = _swig_property(_fprops.HelmholtzPowTerm_t_get, _fprops.HelmholtzPowTerm_t_set)
    __swig_setmethods__["d"] = _fprops.HelmholtzPowTerm_d_set
    __swig_getmethods__["d"] = _fprops.HelmholtzPowTerm_d_get
    if _newclass:d = _swig_property(_fprops.HelmholtzPowTerm_d_get, _fprops.HelmholtzPowTerm_d_set)
    __swig_setmethods__["l"] = _fprops.HelmholtzPowTerm_l_set
    __swig_getmethods__["l"] = _fprops.HelmholtzPowTerm_l_get
    if _newclass:l = _swig_property(_fprops.HelmholtzPowTerm_l_get, _fprops.HelmholtzPowTerm_l_set)
    def __init__(self): 
        """__init__(self) -> HelmholtzPowTerm"""
        this = _fprops.new_HelmholtzPowTerm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzPowTerm
    __del__ = lambda self : None;
HelmholtzPowTerm_swigregister = _fprops.HelmholtzPowTerm_swigregister
HelmholtzPowTerm_swigregister(HelmholtzPowTerm)

class HelmholtzGausTerm(_object):
    """Proxy of C HelmholtzGausTerm struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzGausTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzGausTerm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _fprops.HelmholtzGausTerm_n_set
    __swig_getmethods__["n"] = _fprops.HelmholtzGausTerm_n_get
    if _newclass:n = _swig_property(_fprops.HelmholtzGausTerm_n_get, _fprops.HelmholtzGausTerm_n_set)
    __swig_setmethods__["t"] = _fprops.HelmholtzGausTerm_t_set
    __swig_getmethods__["t"] = _fprops.HelmholtzGausTerm_t_get
    if _newclass:t = _swig_property(_fprops.HelmholtzGausTerm_t_get, _fprops.HelmholtzGausTerm_t_set)
    __swig_setmethods__["d"] = _fprops.HelmholtzGausTerm_d_set
    __swig_getmethods__["d"] = _fprops.HelmholtzGausTerm_d_get
    if _newclass:d = _swig_property(_fprops.HelmholtzGausTerm_d_get, _fprops.HelmholtzGausTerm_d_set)
    __swig_setmethods__["alpha"] = _fprops.HelmholtzGausTerm_alpha_set
    __swig_getmethods__["alpha"] = _fprops.HelmholtzGausTerm_alpha_get
    if _newclass:alpha = _swig_property(_fprops.HelmholtzGausTerm_alpha_get, _fprops.HelmholtzGausTerm_alpha_set)
    __swig_setmethods__["beta"] = _fprops.HelmholtzGausTerm_beta_set
    __swig_getmethods__["beta"] = _fprops.HelmholtzGausTerm_beta_get
    if _newclass:beta = _swig_property(_fprops.HelmholtzGausTerm_beta_get, _fprops.HelmholtzGausTerm_beta_set)
    __swig_setmethods__["gamma"] = _fprops.HelmholtzGausTerm_gamma_set
    __swig_getmethods__["gamma"] = _fprops.HelmholtzGausTerm_gamma_get
    if _newclass:gamma = _swig_property(_fprops.HelmholtzGausTerm_gamma_get, _fprops.HelmholtzGausTerm_gamma_set)
    __swig_setmethods__["epsilon"] = _fprops.HelmholtzGausTerm_epsilon_set
    __swig_getmethods__["epsilon"] = _fprops.HelmholtzGausTerm_epsilon_get
    if _newclass:epsilon = _swig_property(_fprops.HelmholtzGausTerm_epsilon_get, _fprops.HelmholtzGausTerm_epsilon_set)
    def __init__(self): 
        """__init__(self) -> HelmholtzGausTerm"""
        this = _fprops.new_HelmholtzGausTerm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzGausTerm
    __del__ = lambda self : None;
HelmholtzGausTerm_swigregister = _fprops.HelmholtzGausTerm_swigregister
HelmholtzGausTerm_swigregister(HelmholtzGausTerm)

class HelmholtzCritTerm(_object):
    """Proxy of C HelmholtzCritTerm struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzCritTerm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzCritTerm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _fprops.HelmholtzCritTerm_n_set
    __swig_getmethods__["n"] = _fprops.HelmholtzCritTerm_n_get
    if _newclass:n = _swig_property(_fprops.HelmholtzCritTerm_n_get, _fprops.HelmholtzCritTerm_n_set)
    __swig_setmethods__["a"] = _fprops.HelmholtzCritTerm_a_set
    __swig_getmethods__["a"] = _fprops.HelmholtzCritTerm_a_get
    if _newclass:a = _swig_property(_fprops.HelmholtzCritTerm_a_get, _fprops.HelmholtzCritTerm_a_set)
    __swig_setmethods__["b"] = _fprops.HelmholtzCritTerm_b_set
    __swig_getmethods__["b"] = _fprops.HelmholtzCritTerm_b_get
    if _newclass:b = _swig_property(_fprops.HelmholtzCritTerm_b_get, _fprops.HelmholtzCritTerm_b_set)
    __swig_setmethods__["beta"] = _fprops.HelmholtzCritTerm_beta_set
    __swig_getmethods__["beta"] = _fprops.HelmholtzCritTerm_beta_get
    if _newclass:beta = _swig_property(_fprops.HelmholtzCritTerm_beta_get, _fprops.HelmholtzCritTerm_beta_set)
    __swig_setmethods__["A"] = _fprops.HelmholtzCritTerm_A_set
    __swig_getmethods__["A"] = _fprops.HelmholtzCritTerm_A_get
    if _newclass:A = _swig_property(_fprops.HelmholtzCritTerm_A_get, _fprops.HelmholtzCritTerm_A_set)
    __swig_setmethods__["B"] = _fprops.HelmholtzCritTerm_B_set
    __swig_getmethods__["B"] = _fprops.HelmholtzCritTerm_B_get
    if _newclass:B = _swig_property(_fprops.HelmholtzCritTerm_B_get, _fprops.HelmholtzCritTerm_B_set)
    __swig_setmethods__["C"] = _fprops.HelmholtzCritTerm_C_set
    __swig_getmethods__["C"] = _fprops.HelmholtzCritTerm_C_get
    if _newclass:C = _swig_property(_fprops.HelmholtzCritTerm_C_get, _fprops.HelmholtzCritTerm_C_set)
    __swig_setmethods__["D"] = _fprops.HelmholtzCritTerm_D_set
    __swig_getmethods__["D"] = _fprops.HelmholtzCritTerm_D_get
    if _newclass:D = _swig_property(_fprops.HelmholtzCritTerm_D_get, _fprops.HelmholtzCritTerm_D_set)
    def __init__(self): 
        """__init__(self) -> HelmholtzCritTerm"""
        this = _fprops.new_HelmholtzCritTerm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzCritTerm
    __del__ = lambda self : None;
HelmholtzCritTerm_swigregister = _fprops.HelmholtzCritTerm_swigregister
HelmholtzCritTerm_swigregister(HelmholtzCritTerm)

class HelmholtzData(_object):
    """Proxy of C HelmholtzData struct"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HelmholtzData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HelmholtzData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _fprops.HelmholtzData_name_set
    __swig_getmethods__["name"] = _fprops.HelmholtzData_name_get
    if _newclass:name = _swig_property(_fprops.HelmholtzData_name_get, _fprops.HelmholtzData_name_set)
    __swig_setmethods__["R"] = _fprops.HelmholtzData_R_set
    __swig_getmethods__["R"] = _fprops.HelmholtzData_R_get
    if _newclass:R = _swig_property(_fprops.HelmholtzData_R_get, _fprops.HelmholtzData_R_set)
    __swig_setmethods__["M"] = _fprops.HelmholtzData_M_set
    __swig_getmethods__["M"] = _fprops.HelmholtzData_M_get
    if _newclass:M = _swig_property(_fprops.HelmholtzData_M_get, _fprops.HelmholtzData_M_set)
    __swig_setmethods__["rho_star"] = _fprops.HelmholtzData_rho_star_set
    __swig_getmethods__["rho_star"] = _fprops.HelmholtzData_rho_star_get
    if _newclass:rho_star = _swig_property(_fprops.HelmholtzData_rho_star_get, _fprops.HelmholtzData_rho_star_set)
    __swig_setmethods__["T_star"] = _fprops.HelmholtzData_T_star_set
    __swig_getmethods__["T_star"] = _fprops.HelmholtzData_T_star_get
    if _newclass:T_star = _swig_property(_fprops.HelmholtzData_T_star_get, _fprops.HelmholtzData_T_star_set)
    __swig_setmethods__["T_c"] = _fprops.HelmholtzData_T_c_set
    __swig_getmethods__["T_c"] = _fprops.HelmholtzData_T_c_get
    if _newclass:T_c = _swig_property(_fprops.HelmholtzData_T_c_get, _fprops.HelmholtzData_T_c_set)
    __swig_setmethods__["rho_c"] = _fprops.HelmholtzData_rho_c_set
    __swig_getmethods__["rho_c"] = _fprops.HelmholtzData_rho_c_get
    if _newclass:rho_c = _swig_property(_fprops.HelmholtzData_rho_c_get, _fprops.HelmholtzData_rho_c_set)
    __swig_setmethods__["T_t"] = _fprops.HelmholtzData_T_t_set
    __swig_getmethods__["T_t"] = _fprops.HelmholtzData_T_t_get
    if _newclass:T_t = _swig_property(_fprops.HelmholtzData_T_t_get, _fprops.HelmholtzData_T_t_set)
    __swig_setmethods__["omega"] = _fprops.HelmholtzData_omega_set
    __swig_getmethods__["omega"] = _fprops.HelmholtzData_omega_get
    if _newclass:omega = _swig_property(_fprops.HelmholtzData_omega_get, _fprops.HelmholtzData_omega_set)
    __swig_setmethods__["ideal"] = _fprops.HelmholtzData_ideal_set
    __swig_getmethods__["ideal"] = _fprops.HelmholtzData_ideal_get
    if _newclass:ideal = _swig_property(_fprops.HelmholtzData_ideal_get, _fprops.HelmholtzData_ideal_set)
    __swig_setmethods__["np"] = _fprops.HelmholtzData_np_set
    __swig_getmethods__["np"] = _fprops.HelmholtzData_np_get
    if _newclass:np = _swig_property(_fprops.HelmholtzData_np_get, _fprops.HelmholtzData_np_set)
    __swig_setmethods__["pt"] = _fprops.HelmholtzData_pt_set
    __swig_getmethods__["pt"] = _fprops.HelmholtzData_pt_get
    if _newclass:pt = _swig_property(_fprops.HelmholtzData_pt_get, _fprops.HelmholtzData_pt_set)
    __swig_setmethods__["ng"] = _fprops.HelmholtzData_ng_set
    __swig_getmethods__["ng"] = _fprops.HelmholtzData_ng_get
    if _newclass:ng = _swig_property(_fprops.HelmholtzData_ng_get, _fprops.HelmholtzData_ng_set)
    __swig_setmethods__["gt"] = _fprops.HelmholtzData_gt_set
    __swig_getmethods__["gt"] = _fprops.HelmholtzData_gt_get
    if _newclass:gt = _swig_property(_fprops.HelmholtzData_gt_get, _fprops.HelmholtzData_gt_set)
    __swig_setmethods__["nc"] = _fprops.HelmholtzData_nc_set
    __swig_getmethods__["nc"] = _fprops.HelmholtzData_nc_get
    if _newclass:nc = _swig_property(_fprops.HelmholtzData_nc_get, _fprops.HelmholtzData_nc_set)
    __swig_setmethods__["ct"] = _fprops.HelmholtzData_ct_set
    __swig_getmethods__["ct"] = _fprops.HelmholtzData_ct_get
    if _newclass:ct = _swig_property(_fprops.HelmholtzData_ct_get, _fprops.HelmholtzData_ct_set)
    def __init__(self): 
        """__init__(self) -> HelmholtzData"""
        this = _fprops.new_HelmholtzData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fprops.delete_HelmholtzData
    __del__ = lambda self : None;
HelmholtzData_swigregister = _fprops.HelmholtzData_swigregister
HelmholtzData_swigregister(HelmholtzData)


def helmholtz_p_raw(*args):
  """helmholtz_p_raw(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_p_raw(*args)

def helmholtz_u_raw(*args):
  """helmholtz_u_raw(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_u_raw(*args)

def helmholtz_h_raw(*args):
  """helmholtz_h_raw(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_h_raw(*args)

def helmholtz_s_raw(*args):
  """helmholtz_s_raw(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_s_raw(*args)

def helmholtz_p(*args):
  """helmholtz_p(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_p(*args)

def helmholtz_u(*args):
  """helmholtz_u(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_u(*args)

def helmholtz_h(*args):
  """helmholtz_h(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_h(*args)

def helmholtz_s(*args):
  """helmholtz_s(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_s(*args)

def helmholtz_a(*args):
  """helmholtz_a(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_a(*args)

def helmholtz_cv(*args):
  """helmholtz_cv(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_cv(*args)

def helmholtz_cp(*args):
  """helmholtz_cp(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_cp(*args)

def helmholtz_w(*args):
  """helmholtz_w(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_w(*args)

def helmholtz_g(*args):
  """helmholtz_g(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_g(*args)

def helmholtz_alphap(*args):
  """helmholtz_alphap(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_alphap(*args)

def helmholtz_betap(*args):
  """helmholtz_betap(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_betap(*args)

def helmholtz_cp0(*args):
  """helmholtz_cp0(double T,  data) -> double"""
  return _fprops.helmholtz_cp0(*args)

def helmholtz_dpdT_rho(*args):
  """helmholtz_dpdT_rho(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_dpdT_rho(*args)

def helmholtz_dpdrho_T(*args):
  """helmholtz_dpdrho_T(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_dpdrho_T(*args)

def helmholtz_d2pdrho2_T(*args):
  """helmholtz_d2pdrho2_T(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_d2pdrho2_T(*args)

def helmholtz_dhdT_rho(*args):
  """helmholtz_dhdT_rho(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_dhdT_rho(*args)

def helmholtz_dhdrho_T(*args):
  """helmholtz_dhdrho_T(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_dhdrho_T(*args)

def helmholtz_dudT_rho(*args):
  """helmholtz_dudT_rho(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_dudT_rho(*args)

def helmholtz_dudrho_T(*args):
  """helmholtz_dudrho_T(double T, double rho,  data) -> double"""
  return _fprops.helmholtz_dudrho_T(*args)
FPROPS_NON = _fprops.FPROPS_NON
FPROPS_SAT = _fprops.FPROPS_SAT
FPROPS_ERR = _fprops.FPROPS_ERR

def fprops_psat_T_xiang(*args):
  """fprops_psat_T_xiang(double T,  d) -> double"""
  return _fprops.fprops_psat_T_xiang(*args)

def fprops_psat_T_acentric(*args):
  """fprops_psat_T_acentric(double T,  d) -> double"""
  return _fprops.fprops_psat_T_acentric(*args)

def fprops_rhof_T_rackett(*args):
  """fprops_rhof_T_rackett(double T,  D) -> double"""
  return _fprops.fprops_rhof_T_rackett(*args)

def fprops_rhog_T_chouaieb(*args):
  """fprops_rhog_T_chouaieb(double T,  D) -> double"""
  return _fprops.fprops_rhog_T_chouaieb(*args)

def fprops_sat_T(*args):
  """fprops_sat_T(double T,  d) -> int"""
  return _fprops.fprops_sat_T(*args)

def fprops_sat_p(*args):
  """fprops_sat_p(double p,  d) -> int"""
  return _fprops.fprops_sat_p(*args)

def fprops_T_rhof_rackett(*args):
  """fprops_T_rhof_rackett(double rhof,  D) -> double"""
  return _fprops.fprops_T_rhof_rackett(*args)

def fprops_sat_hf(*args):
  """fprops_sat_hf(double hf,  d) -> int"""
  return _fprops.fprops_sat_hf(*args)

def fprops_pc(*args):
  """fprops_pc( d) -> double"""
  return _fprops.fprops_pc(*args)

def fprops_triple_point(*args):
  """fprops_triple_point( d) -> int"""
  return _fprops.fprops_triple_point(*args)

def fprops_solve_ph(*args):
  """fprops_solve_ph(double p, double h, int use_guess,  D) -> int"""
  return _fprops.fprops_solve_ph(*args)

def fprops_solve_Tx(*args):
  """fprops_solve_Tx(double T, double x,  D) -> int"""
  return _fprops.fprops_solve_Tx(*args)

def fprops_fluid(*args):
  """fprops_fluid(char name)"""
  return _fprops.fprops_fluid(*args)

def fprops_num_fluids():
  """fprops_num_fluids() -> int"""
  return _fprops.fprops_num_fluids()

def fprops_get_fluid(*args):
  """fprops_get_fluid(int i)"""
  return _fprops.fprops_get_fluid(*args)
# This file is compatible with both classic and new-style classes.


