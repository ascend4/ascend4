REQUIRE "atoms.a4l";
IMPORT "johnpye/fprops/mixture";
PROVIDE "mixtures.a4l";
(*
   	mixtures.a4l, by Jacob Shealy, 8/4

	Basic types used for mixtures.
*)

(*	A constant to represent mass fractions; this cannot be restricted in 
	its range, like the type 'mass_fraction' in atoms.a4l, but at least 
	provides a dedicated type.
*)
CONSTANT mass_fraction_constant REFINES real_constant DIMENSIONLESS;

ATOM phase_count REFINES solver_var
	DIMENSIONLESS
	DEFAULT 1.0;
	lower_bound := 0.0;
	nominal := 1.0;
END phase_count;

(*	Specific energy for properties governed by the Second Law of Thermodynamics 
	-- Gibbs energy and Helmholtz energy.  These are typically negative, so the 
	'specific_energy' atom from <models/johnpye/thermo_types.a4c> (which can 
	only take positive values) cannot be used.  Instead, use this atom, 
	which can assume either negative or positive values.
 *)
ATOM specific_secondary_energy REFINES solver_var
		DIMENSION L^2/T^2
		DEFAULT -1000{kJ/kg};
	lower_bound := -1e50{kJ/kg};
	upper_bound := 1e50{kJ/kg};
	nominal := 1000{kJ/kg};
END specific_secondary_energy;

(*  The mixture_spec model specifies the composition of the mixture.  

	An instantiation of this model will be passed into the mixture 
	functions as DATA, and must be provided with the following members:
		npure, an integer
		components, an array of symbol constants representing the fluids
		xs, an array of mass fractions

	The following members are optional:
		eos, a symbol_constant representing the equation of state
			'ideal' -- ideal-gas
			'pengrob' -- Peng-Robinson
			'helmholtz' -- Helmholtz equation of state
			For now, 'eos' only gives good results when 'pengrob' is used

		source, the source of the correlation type
		model, a symbol_constant specifying whether the solution is ideal or real
*)
MODEL mixture_spec;
	npure IS_A integer_constant;

	components[1 .. npure] IS_A symbol_constant;
	xs[1 .. npure] IS_A mass_fraction_constant;
	eos IS_A symbol_constant;
	source IS_A symbol_constant;

	source :== '';
END mixture_spec;

(*	Model of a single component, which can be used to extract component-specific 
	mixture properties.
 *)
MODEL mixture_component;
	grandparent IS_A mixture_spec;
	phase_num IS_A phase_count; (* x *)
	comp_num IS_A phase_count; (* x *)
	T IS_A temperature;
	p IS_A pressure;

	mix_comp_num IS_A phase_count;
	name IS_A symbol;

	mix_component_numbers : mixture_component_cnum(
		T, p, phase_num, comp_num : INPUT;
		mix_comp_num : OUTPUT;
		grandparent : DATA
	);
METHODS
METHOD default_self;
	name := grandparent.components[mix_comp_num];
END default_self;
END mixture_component;

(*	Model of a single phase, which can be used to extract phase-specific mixture 
	properties.
 *)
MODEL mixture_phase(
	parent WILL_BE mixture_spec;   (* the mixture_spec in which the phase exists *)
	phase_num WILL_BE phase_count; (* phase is the first, second,... in the mixture *)
	T WILL_BE temperature;         (* the mixture temperature *)
	p WILL_BE pressure;            (* the mixture pressure *)
);

	num_comps IS_A phase_count;    (* the number of components in that phase *)
	phase_components : mixture_phase_components(
		T, p, phase_num : INPUT;
		num_comps : OUTPUT;
		parent : DATA
	);

	components[1..num_comps] IS_A mixture_component;
	i IS_A phase_count;

METHODS
METHOD default_self;
	i := 1;
	WHILE i < num_comps+1 DO
		components[i].grandparent := parent;
		components[i].phase_num := phase_num;
		components[i].comp_num := i;
		components[i].T := T;
		components[i].p := p;
	END WHILE;
END default_self;
END mixture_phase;
