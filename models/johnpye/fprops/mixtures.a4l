REQUIRE "atoms.a4l";
REQUIRE "johnpye/thermo_types.a4c";
PROVIDE "mixtures.a4l";
(*
   	mixtures.a4l, by Jacob Shealy, August 4-August 17, 2015

	Basic types used for mixtures.
*)

(*	A constant to represent mass fractions; this cannot be restricted in 
	its range, like the type 'mass_fraction' in atoms.a4l, but at least 
	provides a dedicated type.
*)
CONSTANT mass_fraction_constant REFINES real_constant DIMENSIONLESS;

ATOM phase_count REFINES solver_var
	DIMENSIONLESS
	DEFAULT 1.0;
	lower_bound := 0.0;
	nominal := 1.0;
END phase_count;

(*	Specific energy for properties governed by the Second Law of Thermodynamics 
	-- Gibbs energy and Helmholtz energy.  These are typically negative, so the 
	'specific_energy' atom from <models/johnpye/thermo_types.a4c> (which can 
	only take positive values) cannot be used.  Instead, use this atom, which 
	takes either negative or positive values.
 *)
ATOM specific_secondary_energy REFINES solver_var
		DIMENSION L^2/T^2
		DEFAULT -1000{kJ/kg};
	lower_bound := -1e50{kJ/kg};
	upper_bound := 1e50{kJ/kg};
	nominal := 1000{kJ/kg};
END specific_secondary_energy;


(*  The mixture_spec model specifies the composition of the mixture.  

	An instantiation of this model will be passed into the mixture 
	functions as DATA, and must be provided with the following members:
		npure, an integer
		components, an array of symbol constants representing the fluids
		xs, an array of mass fractions

	The following members are optional:
		eos, a symbol_constant representing the equation of state
			'ideal' -- ideal-gas
			'pengrob' -- Peng-Robinson
			'helmholtz' -- Helmholtz equation of state
			For now, 'eos' only gives good results when 'pengrob' is used

		source, the source of the correlation type
		model, a symbol_constant specifying whether the solution is ideal or real
 *)
MODEL mixture_spec;
	npure IS_A integer_constant;                 (* number of pures in the mixture *)

	components[1 .. npure] IS_A symbol_constant; (* component names *)
	xs[1 .. npure] IS_A mass_fraction_constant;  (* component mass fractions *)
	eos IS_A symbol_constant;                    (* equation of state to model the mixture *)
	source IS_A symbol_constant;                 (* source of correlation data (optional) *)

	source :== '';
END mixture_spec;


(* The mixture_component model holds data on a single component from a mixture 
   specified in a mixture_spec model.
 *)
MODEL mixture_component(
	component WILL_BE phase_count; (* index of the component within 'mixt' *)
	mixt WILL_BE mixture_spec;     (* specification of the mixture *)
	T WILL_BE temperature;         (* mixture temperature *)
	p WILL_BE pressure;            (* mixture pressure *)
);
	phases,
	ph_num[1..3],
	ph_comps[1..3] IS_A phase_count;
	(* comp_num[1..3] IS_A phase_count; *)
	ph_frac[1..3] IS_A mass_fraction;

	mix_phases : mixture_count_phases(
		T, p : INPUT;
		phases, ph_frac[1], ph_frac[2], ph_frac[3] : OUTPUT;
		mixt : DATA
	);

	FOR i IN [1..3] CREATE
		mix_phase_comps : mixture_count_components(
			T, p, ph_num[i] : INPUT;
			ph_comps[i] : OUTPUT;
			mixt : DATA
		);
	END FOR;

METHODS
METHOD default_self;
	FIX ph_num[1];
	FIX ph_num[2];
	FIX ph_num[3];
	ph_num[1] := 1.0;
	ph_num[2] := 2.0;
	ph_num[3] := 3.0;
END default_self;
END mixture_component;
