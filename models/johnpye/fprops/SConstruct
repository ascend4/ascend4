#!/usr/bin/env python
# Standalone 'SConstruct' to demonstrate how you can build
# this ASCEND external library against an existing copy of
# ASCEND installed on your system.

import os, platform, sys, shutil
    
deft = "default"
if platform.system()=="Windows":
	deft = "mingw"

vars = Variables()

vars.Add(
	'CC'
	,'C Compiler command'
	,"${HOST_PREFIX}gcc"
)

vars.Add(
	'CFLAGS'
	,'C compiler flags'
	,["-Wall"]
)

vars.Add(
	'CUNIT_PREFIX'
	,'installation prefix for cunit libs, headers, etc'
	,os.path.expanduser('~/.local')
)

vars.Add(
	'CUNIT_LIBPATH'
	,'location of cunit lib'
	,'$CUNIT_PREFIX/lib'
)

vars.Add(
	'CUNIT_PKGPATH'
	,'location of cunit lib'
	,'$CUNIT_LIBPATH/pkgconfig'
)

vars.Add(
	'CUNIT_CPPPATH'
	,'location of cunit headers'
	,'$CUNIT_PREFIX/include'
)

vars.Add(BoolVariable('WITH_ASCEND',"Attempt to include ASCEND support",1))

major = sys.version_info[0]
minor = sys.version_info[1]
default_pc_name = f'python-{major}.{minor}'
vars.Add(
	'PYTHON_PKG'
	,"Name of the pkg-config package for building Python extensions"
	,default_pc_name
)

env = Environment(
	toolpath=['scons']
	,tools = [deft ,'swig','textfile']
	,ENV={"TERM":os.environ.get('TERM'), "PATH":os.environ.get('PATH'), "LD_LIBRARY_PATH":os.environ.get("LD_LIBRARY_PATH")}
	,HOST_PREFIX=os.environ.get('HOST_PREFIX')
)

Help(vars.GenerateHelpText(env))
vars.Update(env)

if env['WITH_ASCEND']:
	if WhereIs('ascend-config'):
		env.ParseConfig(['ascend-config','--libs','--cppflags'])
		env['WITH_ASCEND'] = 1
	else:
		print("WARNING: no ascend-config in path, won't build ASCEND wrapper")
	env['WITH_ASCEND'] = 0
else:
	print("NOTE: ASCEND support will not be included")

env.AppendUnique(
	CFLAGS=['-g','-Wall']
)

conf = env.Configure()
if conf.CheckFunc('cpow','#include <complex.h>'):
	conf.env.Append(CPPDEFINES=['HAVE_CPOW'])

env = conf.Finish()


env['WITH_CUNIT'] = 0
cunit_env = env.Clone()
cunit_env['ENV']['PKG_CONFIG_PATH'] = env.subst("$CUNIT_PKGPATH")#"/home/john/.local/lib/pkgconfig" #env['CUNIT_PKGPATH']
cunit_env.ParseConfig([shutil.which('pkg-config'),'cunit','--libs','--cflags'])
env['CUNIT_CPPPATH'] = cunit_env['CPPPATH']
env['CUNIT_LIBPATH'] = cunit_env['LIBPATH']
if 'cunit' in cunit_env['LIBS']:
	env['WITH_CUNIT']=True

env['EXTLIB_SUFFIX'] = "_ascend" + env.subst("$SHLIBSUFFIX")
env['EXTLIB_PREFIX'] = env.subst("$SHLIBPREFIX")
env['extfns'] = []
env['WITH_PYTHON'] = 1

env.SConscript("SConscript",["env"])

