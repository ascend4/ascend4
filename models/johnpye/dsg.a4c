REQUIRE "atoms.a4l";
REQUIRE "johnpye/thermo_types.a4c";
IMPORT "freesteam";
IMPORT "dsg";

(*
	This model requires the 'freesteam' library be installed on your system.
	You must compile it with the 'ASCEND_CONFIG=`which ascend-config`' flag
	to ensure that the required external library is installed where ASCEND
	can find it. Alternatively, you can specify the location by adding to the
	ASCENDLIBRARY path variable

	This model also requires the 'dsg' library for Direct Steam Generation
	calculations, available on request from http://pye.dyndns.org/
*)

MODEL dsg;
	(* temporal derivatives *)
	drho_dt IS_A density_rate;
	dmdot_dt IS_A mass_rate_rate;
	drhou_dt IS_A solver_var;
	dTw_dt IS_A temperature_rate;

	(* spatial derivatives *)
	dmdot_dz IS_A mass_rate_per_length;
	dmdoth_dz IS_A solver_var;
	dekdot_dz IS_A solver_var;
	dp_dz IS_A pressure_per_length;
	drhovel2_dz IS_A pressure_per_length;

	(* wall properties *)
	rhow IS_A mass_density;
	D2 IS_A distance;
	cw IS_A specific_heat_capacity;
	Aw IS_A area;
	hw IS_A heat_transfer_coefficient;

	Aw = 1{PI}*(D2^2 - D^2)/4;

	(* conservation equations *)
	massbal: drho_dt = -1/A * dmdot_dz;
	mombal:  1/A * dmdot_dt = -dp_dz - f/D/2*rho*vel^2 - drhovel2_dz;
	enerbal: drhou_dt = 1/A * ( qdott - dmdoth_dz + mdot * dekdot_dz );
	pipebal: dTw_dt = 1/rhow/Aw/cw * (qdots - qdotl - qdott);

	rho IS_A mass_density;
	mdot IS_A mass_rate;
	p IS_A pressure;
	f IS_A factor; (* pipe friction factor *)
	u IS_A specific_energy;
	h IS_A specific_enthalpy;
	vel IS_A speed;
	qdott, qdotl,qdots IS_A power_per_length;
	mu IS_A viscosity;
	v IS_A specific_volume;
	T1,Tw,T2,Tamb IS_A temperature;

	rho * v = 1;

	thermo_props: iapws97_uvmu_ph(
		p,h : INPUT;
		u,v,mu : OUTPUT
	);

	vel = rho*mdot/A;

	Re IS_A factor;
	Re_rel: Re = rho*vel*D/mu;
	eps_on_D IS_A factor;
	eps_on_D_rel: eps_on_D = eps/D;

	D IS_A distance;
	eps IS_A distance;
	A IS_A area;
	A = 1{PI}* D^2 / 4;

	friction: dsg_fric_factor_two_phase(
		Re, eps_on_D : INPUT;
		f : OUTPUT
	);

	cavity_losses: dsg_ext_heat_loss(
		T2,Tamb,D2,hw : INPUT;
		qdotl : OUTPUT
	);

	Tw = (T1 + T2)/2;

METHODS

METHOD specify;
	(* design parameters, geometry, materials of construction *)
	FIX rhow,D2,cw,hw;
	FIX D, eps;
	FIX qdots;
	FIX Tamb;

	(* states *)
	FIX T1, T2, p, h, mdot;

	(* spatial derivs are all fixed -- because we would know what's next door *)
	FIX dmdot_dz, dmdoth_dz, dekdot_dz, dp_dz, drhovel2_dz;

	FIX dTw_dt;
END specify;

METHOD values;
	(* design parameters *)
	D := 60 {mm};
	D2 := 70 {mm};
	eps := 0.05 {mm};
	rhow := 7.8 {g/cm^3};
	cw := 0.47 {J/g/K};
	hw := 10 {W/m^2/K};
	Tamb := 300 {K};

	(* states *)
	T1 := 600 {K};
	T2 := 500 {K};
	p := 10 {bar};
	h := 2000 {kJ/kg};
	mdot := 0.001 {kg/s};

	(* spatial derivs *)
	dp_dz := -500 {Pa/m};
	dmdot_dz := 0 {kg/s/m};
	drhovel2_dz := (0 {kg/m^3}) * (0 {m/s})^2 / (1 {m});
	dekdot_dz := 0 {W/m};
	dmdoth_dz := dmdot_dz * 0 {kJ/kg};

	(* derivative variables *)
	drho_dt := 0 {kg/m^3/s};
	dmdot_dt := 0 {kg/s/s};
	drhou_dt := 0 {kg/m^3*kJ/kg/s};
	dTw_dt := 0 {K/s};

	(* bounds *)
	f.lower_bound := 0.008;
	v.lower_bound := 0.00999 {m^3/kg};
	v.upper_bound := 1/(0.0202 {kg/m^3});
	u.lower_bound := 0 {kJ/kg};
	u.upper_bound := 3663 {kJ/kg};

	(* starting guesses *)
	Re := 10000;
END values;

METHOD on_load;
	RUN reset;
	RUN values;
END on_load;

END dsg;
