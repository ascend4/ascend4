REQUIRE "johnpye/ideal_steam.a4c";
REQUIRE "johnpye/iapws_sat_curves.a4c";
REQUIRE "johnpye/iapws95.a4c";

MODEL condenser_lmtd(
	S_in WILL_BE thermo_state;
	S_out WILL_BE thermo_state;
);
	T_h1 ALIASES S_in.T;
	T_h2 ALIASES S_out.T;
	h_h1 ALIASES S_in.h;
	h_h2 ALIASES S_out.h;

	mdot_in IS_A mass_rate;

	T_c1 IS_A temperature;
	T_c2 IS_A temperature;

	T_c_in ALIASES T_c2;
	T_c_out ALIASES T_c1;


	LMTD IS_A delta_temperature;

	DT_1, DT_2 IS_A delta_temperature;
	
	DT_1 = T_h1 - T_c1;
	DT_2 = T_h2 - T_c2;

	lmtd: LMTD = (DT_2 - DT_1) / ln(DT_2/DT_1);

	UA IS_A ua_value;
	q IS_A energy_rate;

	q = UA * LMTD;

	q = mdot_in * (h_h1 - h_h2);

	S_out.p = S_in.p;

METHODS
METHOD specify;
	FIX UA;
	FIX T_c_in;
	FIX mdot_in;
END specify;
METHOD values;
	UA := 1000 {W/m^2/K} * 4 {m} * 900 * 2*3.1415926* (0.01 {m})/2;
	T_c_in := 273.15{K} + 20 {K};
	mdot_in := 1 {kg/s};
	(* free values *)
	T_h2 := T_h1 - 20{K};
	h_h2 := h_h1 - 4.2{kJ/kg/K}*20{K};
END values;
METHOD bound_self;
	DT_1.lower_bound := 0{K};
	DT_2.lower_bound := 0{K};
	q.lower_bound := 0{W};
	T_h2.upper_bound := T_h1;
	T_h2.lower_bound := T_c_out;
	h_h2.upper_bound := h_h1;
END bound_self;
END condenser_lmtd;

(*--------------------------*)

(* test model for the above *)
MODEL condenser_lmtd_test;
	S1 IS_A iapws95_1phase;
	S2 IS_A iapws95_1phase;

	T_in ALIASES S1.T;
	p_in ALIASES S1.p;

	C IS_A condenser_lmtd(S1,S2);

	q ALIASES C.q;

METHODS
METHOD default_self;	
	RUN reset; RUN values; RUN bound_self;
END default_self;
METHOD specify;
	RUN C.specify;
	FIX T_in;
	FIX p_in;
	FIX C.T_c_out;
END specify;
METHOD values;
	RUN C.values;
	T_in := 273.15{K} + 280 {K};
	p_in := 1{bar};
	q := 4.2{kJ/s};
	C.T_c_out := 273.15{K} + 25 {K};
END values;
METHOD bound_self;
	RUN C.bound_self;
END bound_self;
END condenser_lmtd_test;
	

(*--------------------------*)
MODEL condenser_lmtd_sat(
	S_in WILL_BE thermo_state;
	S_out WILL_BE thermo_state;
);
	T_in ALIASES S_in.T;

	mdot_in IS_A mass_rate;

	T_c1 IS_A temperature; (* cold inlet *)
	T_c2 IS_A temperature; (* cold outlet *)

	LMTD_fg IS_A delta_temperature;

	DT_c_fg, DT_1, DT_2 IS_A delta_temperature;
	
	DT_c_fg = T_c2 - T_c1;
	DT_1 = T_in - T_c1;
	DT_2 = T_in - T_c2;

	lmtd: LMTD_fg = (DT_c_fg) / ln(DT_1/DT_2);
	(* lmtd: LMTD_fg * -ln((T_in - T_c1)/(T_in - T_c2)) = (T_c2 - T_c1); *)

	UA_fg IS_A ua_value;
	q_fg IS_A energy_rate;

	q_fg = UA_fg * LMTD_fg;

	(* condensation point *)
	Sf ALIASES S_out;

	sat IS_A iapws_sat_density;
	sat.rhof = Sf.rho;
	sat.T = Sf.T;

	S_in.T = Sf.T;

	q_fg = mdot_in * (S_in.h - Sf.h);
METHODS
METHOD specify;
	FIX UA_fg;
	FIX T_c1;
	FIX mdot_in;
END specify;
METHOD values;
	UA_fg := 4000 {W/m^2/K} * 4 {m} * 900 * 2*3.1415926* (0.01 {m})/2;
	T_c1 := 273.15{K} + 200 {K};
	mdot_in := 10 {kg/s};
	(* free values *)
	T_c2 := 273.15{K} + 240 {K};
END values;
METHOD bound_self;
	Sf.tau.lower_bound := 1;
	DT_c_fg.lower_bound := 0{K};
	DT_1.lower_bound := 0{K};
	DT_2.lower_bound := 0{K};
	Sf.rho.lower_bound := Sf.rhoc;
END bound_self;
END condenser_lmtd_sat;

(*------------------------------*)

MODEL condenser_lmtd_sat_test;
	Sg IS_A iapws95_1phase;
	Sf IS_A iapws95_1phase;

	sat IS_A iapws_sat_density;
	sat.rhog, Sg.rho ARE_THE_SAME;
	sat.T, Sg.T ARE_THE_SAME;
	T_in ALIASES Sg.T;

	C IS_A condenser_lmtd_sat(Sg,Sf);

METHODS
METHOD default_self;	
	RUN reset; RUN values; RUN bound_self;
END default_self;
METHOD specify;
	RUN C.specify;
	FIX T_in;
END specify;
METHOD values;
	RUN C.values;
	T_in := 273.15{K} + 280 {K};
END values;
METHOD bound_self;
	RUN C.bound_self;
END bound_self;
METHOD self_test;
	ASSERT (C.q_fg - 15430{kW}) <  1{kW};
END self_test;
END condenser_lmtd_sat_test;

(*-----------------------------*)

MODEL condenser;
	(* assumptions:
		inlet is ideal-gas steam at specified temperature and pressure.
		output is water of fixed enthalpy.
		whatever energy is required to be taken away to acheive that is what will be taken away.

		we don't need to enforce saturation inlet conditions. we will just query the enthalpy for the ideal-gas steam
		and that's it.
	*)
	S_in IS_A ideal_steam;

	mdot_gas_in IS_A mass_rate;
	mdot_water_out IS_A mass_rate;
	Q IS_A energy_rate; (* heat taken away by condenser *)

	h_in ALIASES S_in.h;
	p_in ALIASES S_in.p;
	T_in ALIASES S_in.T;

	(*
		h2 will be the enthalpy of the condensed water. because we are
		ignoring pressure effects, we have to assume a constant fixed
		value for the enthalpy of water at x=0. 
	*)
	h_out IS_A specific_enthalpy;

	Q = mdot_gas_in * h_in - mdot_water_out * h_out;
	mdot_water_out = mdot_gas_in;

	(* 
		we will assume there is NO water in the condenser for now; the
		surge tank will play the role of the mass holdup in this case.
	*)
METHODS
METHOD default_self;
	RUN reset;
	RUN values;
END default_self;
METHOD specify;
	FIX mdot_gas_in;
	FIX S_in.p, S_in.T;
	FIX h_out;
END specify;
METHOD values;
	mdot_gas_in := 1 {kg/s};
	S_in.p := 5 {bar};
	S_in.T := 473.15 {K};
	h_out := 400{kJ/kg};
END values;
END condenser;
