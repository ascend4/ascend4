REQUIRE "johnpye/section.a4c";

(*
	We will use the Brent solver to goal-seek on the secant formula, as QRSlv
	can't quite manage it when we just FIX sigma_max and FREE P.
*)
IMPORT "johnpye/brent/brent";
IMPORT "sensitivity/solve";

(*
	This is a model of column buckling using the secant formula, which makes
	an allowance for load eccentricity.

	The symbols/nomenclature here is taken from E P Popov, 'Engineering Mechanics
	of Solids', Prentice Hall, 1990.

	Note that although this model takes a 'section' as a parameter, it just
	assumes that the buckling will occur in the XY plane (in other words about
	the Z axis).
*)
MODEL columnbuckling_model(
	S WILL_BE section;
	L WILL_BE distance; (* column effective length *)
	e WILL_BE distance; (* load eccentricity *)
	E WILL_BE youngs_modulus;
	sigma_yp WILL_BE stress; (* yield stress, for secant formula *)
);
	P, P_design IS_A force;

	(* cross-section area *)
	A ALIASES S.A;

	(* assume buckling is about the Z axis *)
	I_min ALIASES S.I_z;

	y_min ALIASES S.y_min;
	y_max ALIASES S.y_max;

	(* work out the extreme fibre distance *)
	c_max, c_min IS_A distance;
	c_max = abs(y_max - S.y_c);
	c_min = abs(y_min - S.y_c);

	c IS_A distance;
	(* c = MAX(c_min, c_max) *)
	c = c_min + 0.5*(c_max - c_min + abs(c_max - c_min));

	(* radius of gyration and comes from minimum moment of inertia *)
	r IS_A distance;
	r = sqrt(I_min / A);

	(* elastic limit *)
	sigma_max IS_A stress;

	(* secant formula relates elastic limit to the permissible load P *)
	sigma_max = P / A * (1 + e*c/r^2 / cos( L_on_r * sqrt( P / 4 / E / A )) );

	delta_sigma IS_A stress;
	delta_sigma = sigma_yp - sigma_max;

	(* euler buckling stress, for comparison *)
	sigma_euler IS_A stress;
	sigma_euler = 1{PI}^2 * E / L_on_r^2;

	(* for comparison *)
	P_euler IS_A force;
	P_euler = sigma_euler * A;

	(* factor of safety > 1*)
	n IS_A factor;

	(* design load is less than the permissible load from buckling formula *)
	P = n * P_design;

	(* slenderness ratio: for reference *)
	L_on_r IS_A factor;
	L_on_r = L / r;

END columnbuckling_model;

(* 
	Example of a column buckling problem: solving for the design load
	given a particular column design and factor of safety.

	Note that for the 'solve_stress' method to work, it is important that
	a suitable choice for the bounds of 'P' to be chosen.
*)
MODEL columnbuckling;

	r IS_A distance;
	t IS_A distance;

	S IS_A tubular_section(r,t);

	L IS_A distance;
	e IS_A distance;
	E IS_A youngs_modulus;
	C IS_A columnbuckling_model(S,L,e,E,sigma_yp);
	sigma_yp IS_A stress;

	P ALIASES C.P;
	A ALIASES C.A;
	n ALIASES C.n;
	L_on_r ALIASES C.L_on_r;
	P_design ALIASES C.P_design;
	sigma_max ALIASES C.sigma_max;

METHODS
	METHOD on_load;
		RUN default_self;
		RUN bound_self;
		RUN reset; RUN values;
	END on_load;
	METHOD specify;
		FIX e, r, t, P, L, n;
		FIX E, sigma_yp;
	END specify;
	METHOD values;
		E := 210 {GPa};
		e := 3 {cm};
		r := 44.45 {mm};
		t := 2.6 {mm};
		P := 10 {kN};
		L := 3.747 {m};
		n := 1.0;
		sigma_yp := 350 {MPa};
	END values;
	METHOD bound_self;
		(* bounds to allow the Brent solver to work *)
		P.upper_bound := 80 {kN};
		P.lower_bound := 0 {kN};
	END bound_self;	
	METHOD set_stress;
		FIX sigma_max; sigma_max := 30 {MPa};
		FREE P;
	END set_stress;
	METHOD solve_stress;
		FIX P;
		P := 10 {kN};
		FREE sigma_max;
		EXTERNAL brent(SELF,C.delta_sigma,P);
	END solve_stress;
	METHOD solve;
		EXTERNAL do_solve(SELF);
	END solve;
END columnbuckling;

	
