REQUIRE "johnpye/section.a4c";

(*
	we will just go ahead and assume that the I_z is the weaker direction, and
	we will assume that buckling occurs in that direction.
*)
MODEL columnbuckling(
	S WILL_BE section;
);
	P, P_design IS_A force;
	A ALIASES S.A;

	I_min ALIASES S.I_z;

	y_min ALIASES S.y_min;
	y_max ALIASES S.y_max;

	c_max, c_min IS_A distance;
	c_max = abs(y_max - S.y_c);
	c_min = abs(y_min - S.y_c);

	c IS_A distance;
	(* c = MAX(c_min, c_max) *)
	c = c_min + 0.5*(c_max - c_min + abs(c_max - c_min));

	(* radius of gyration and comes from minimum moment of inertia *)
	r IS_A distance;
	r = sqrt(I_min / A);

	(* load eccentricity *)
	e IS_A distance;

	(* effective length of the column *)
	L IS_A distance;

	(* elastic limit *)
	sigma_max IS_A stress;

	(* secand formula relates elastic limit to the permissible load P *)
	sigma_max * A  = P * (1 + e * c / r^2 / cos( L_on_r * sqrt( P / 4 / E / A )));

	(* Young's modulus *)
	E IS_A youngs_modulus;

	(* factor of safety > 1*)
	n IS_A factor;

	(* design load is less than the permissible load from buckling formula *)
	P = n * P_design;

	(* slenderness ratio: for reference *)
	L_on_r IS_A factor;
	L_on_r = L / r;

END columnbuckling;

(* 
	Example of a column buckling problem: solving for the design load
	given a particular column design and factor of safety.
*)
MODEL columnbuckling_test;

	r IS_A distance;
	t IS_A distance;
	S IS_A tubular_section(r,t);
	C IS_A columnbuckling(S);

	e ALIASES C.e;
	P ALIASES C.P;
	L ALIASES C.L;
	E ALIASES C.E;
	A ALIASES C.A;
	n ALIASES C.n;
	L_on_r ALIASES C.L_on_r;
	P_design ALIASES C.P_design;
	sigma_max ALIASES C.sigma_max;

METHODS
	METHOD on_load;
		FIX C.E; C.E := 210 {GPa};
		FIX e; e := 3 {cm};
		FIX r; r := 44.45 {mm};
		FIX t; t := 2.6 {mm};
		FIX P; P := 10 {kN};
		FIX L; L := 4 {m};
		FIX n; n := 2;
	END on_load;
END columnbuckling_test;

	
