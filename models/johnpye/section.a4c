REQUIRE "atoms.a4l";

(*
	Models for calculating moment of area of compound sections
	for use in beam calculations in solid mechanics.

	Nomenclature follows the conventions of Popov (1990).
*)

MODEL section;
	I_y, I_z IS_A second_moment_of_area;
	A IS_A area;
	y_max, y_min IS_A delta_distance;
	z_max, z_min IS_A delta_distance;
	y_c, z_c IS_A delta_distance;
END section;

MODEL rectangular_section(
	b WILL_BE distance;
	d WILL_BE distance;
) REFINES section;
	I_z = b * d^3 / 12.;
	I_y = d * b^3 / 12.;

	A = b * d;
	
	y_max = d/2.; y_min = -d/2.;
	z_max = b/2.; z_min = -b/2.;

	y_c = 0 {mm};
	z_c = 0 {mm};
END rectangular_section;

MODEL rectangular_hollow_section(
	b WILL_BE distance; (* breadth*)
	d WILL_BE distance; (* depth *)
	t WILL_BE distance; (* thickness *)
) REFINES section;
	I_z = b * d^3 / 12. - (b - 2. * t)*(d - 2*t)^3 / 12. ;
	I_y = d * b^3 / 12. - (d - 2. * t)*(b - 2*t)^3 / 12. ;

	A = b * d - (b - 2.*t) * (d - 2.*t);
	
	y_max = d/2.; y_min = -d/2.;
	z_max = b/2.; z_min = -b/2.;

	y_c = 0 {mm};
	z_c = 0 {mm};
END rectangular_hollow_section;
	
MODEL circular_section(
	r WILL_BE distance;
) REFINES section;

	I_y, I_z ARE_THE_SAME;
	I_y = 1{PI} * r^4 / 4.;
	A = 1{PI} * r^2;

	y_min, z_min ARE_THE_SAME;
	y_min = - r;
	y_max, z_max ARE_THE_SAME;
	y_max = + r;

	y_c, z_c ARE_THE_SAME;
	y_c = 0 {mm};
END circular_section;

MODEL tubular_section(
	r WILL_BE distance;
	t WILL_BE distance;
) REFINES section;

	I_y, I_z ARE_THE_SAME;
	I_y = 1{PI} * (r^4 - (r-t)^4) / 4.;
	A = 1{PI} * (r^2 - (r-t)^2);

	y_min, z_min ARE_THE_SAME;
	y_min = - r;
	y_max, z_max ARE_THE_SAME;
	y_max = + r;

	y_c, z_c ARE_THE_SAME;
	y_c = 0 {mm};
END tubular_section;

(*
	When creating the offset section, the centroid is repositioned, by the
	values of I_y and I_z, which are always evaluated about the centroid,
	and not changed.
*)	
MODEL offset_section(
	S WILL_BE section;
	dy WILL_BE delta_distance;
	dz WILL_BE delta_distance;
) REFINES section;

	I_y = S.I_y;
	I_z = S.I_z;

	A = S.A;

	y_max = S.y_max + dy;
	y_min = S.y_min + dy;
	z_max = S.z_max + dz;
	z_min = S.z_min + dz;

	y_c = S.y_c + dy;
	z_c = S.z_c + dz;
END offset_section;

MODEL compound_section(
	S1 WILL_BE section;
	S2 WILL_BE section;
) REFINES section;

	(* combined area *)
	A = S1.A + S2.A;

	(* calculate location of centroid *)
	A * y_c = S1.A * S1.y_c + S2.A * S2.y_c;
	A * z_c = S1.A * S1.z_c + S2.A * S2.z_c;

	(* combined second moment of area *)
	I_z = S1.I_z + S1.A * (S1.y_c - y_c)^2 + S2.I_z + S2.A * (S2.y_c - y_c)^2;
	I_y = S1.I_y + S1.A * (S1.z_c - z_c)^2 + S2.I_y + S2.A * (S2.z_c - z_c)^2;

	(* tricks with abs() to avoid needing a conditional solver *)
	y_max = S1.y_max + 0.5*(S2.y_max - S1.y_max + abs(S2.y_max - S1.y_max));
	z_max = S1.z_max + 0.5*(S2.z_max - S1.z_max + abs(S2.z_max - S1.z_max));
	y_min = S1.y_min + 0.5*(S2.y_min - S1.y_min - abs(S2.y_min - S1.y_min));
	z_min = S1.z_min + 0.5*(S2.z_min - S1.z_min - abs(S2.z_min - S1.z_min));
	
END compound_section;

(* test models *)	

MODEL rectangular_section_test;
	b, d IS_A distance;
	S IS_A rectangular_section(b,d);
METHODS
	METHOD on_load;
		FIX b; b:= 40 {mm};
		FIX d; d:= 60 {mm};
	END on_load;
	METHOD self_test;
		ASSERT abs(I_z - 72e4 {mm^4}) < 1e2 {mm^4};
	END self_test;
END rectangular_section_test;

MODEL rectangular_hollow_section_test;
	b, d, t IS_A distance;
	S IS_A rectangular_hollow_section(b,d,t);
METHODS
	METHOD on_load;
		FIX b; b:= 40 {mm};
		FIX d; d:= 60 {mm};
		FIX t; t:= 5 {mm};
	END on_load;
	METHOD self_test;
		(* correct values needed here *)
		ASSERT S.y_max == 30 {mm};
		ASSERT S.z_min == -20 {mm};
		ASSERT 1==0;
		(* ASSERT abs(I_z - 72e4 {mm^4}) < 1e2 {mm^4}; *)
	END self_test;
END rectangular_hollow_section_test;

MODEL circular_section_test;
	r IS_A distance;
	C IS_A circular_section(r);
METHODS
	METHOD on_load;
		FIX r; r := 100 {mm};
	END on_load;
	METHOD self_test;
		ASSERT C.y_max == 100 {mm};
		ASSERT C.y_min == -100 {mm};
		ASSERT abs(C.A - 31415 {mm^2}) < 1 {mm^2};
	END self_test;
END circular_section_test;

MODEL tubular_section_test;
	r IS_A distance;
	t IS_A distance;
	C IS_A tubular_section(r,t);
METHODS
	METHOD on_load;
		FIX r; r := 100 {mm};
		FIX t; t := 5 {mm};
	END on_load;
	METHOD self_test;
		ASSERT C.y_max == 100 {mm};
		ASSERT C.y_min == -100 {mm};
		ASSERT abs(C.A - (31415 {mm^2} - 28352{mm^2})) < 1 {mm^2};
	END self_test;
END tubular_section_test;

MODEL offset_section_test;
	r IS_A distance;
	dy, dz IS_A delta_distance;
	C IS_A circular_section(r);
	O IS_A offset_section(C, dy, dz);
METHODS
	METHOD on_load;
		FIX r; r := 100 {mm};
		FIX dy; dy := 100 {mm};
		FIX dz; dz := 50 {mm};
	END on_load;
	METHOD self_test;
		ASSERT O.y_max == 200 {mm};
		ASSERT O.y_min == 0 {mm};
		ASSERT O.z_min == -50 {mm};
		ASSERT abs(O.z_max - 150 {mm}) < 1e-6 {mm};
		ASSERT O.A == C.A;
		ASSERT O.y_c == 100 {mm};
		ASSERT O.z_c == 50 {mm};
		ASSERT O.I_y == C.I_y;
		ASSERT O.I_z ==C.I_z;
	END self_test;
END offset_section_test;

MODEL compound_section_test;
	w, h IS_A distance;
	R IS_A rectangular_section(w, h);
	t IS_A distance;
	h = 2 * t;
	r IS_A distance;
	C IS_A tubular_section(r,t);
	
	O IS_A compound_section(C,R);

METHODS
	METHOD on_load;
		FIX r; r := 50 {mm};
		FIX t; t := 5 {mm};
		FIX w; w := 200 {mm};
	END on_load;
	METHOD self_test;
		ASSERT O.A == C.A + R.A;
		ASSERT O.y_c == 0 {mm};
		ASSERT O.z_c == 0 {mm};
		ASSERT O.y_max == 50 {mm};
		ASSERT O.y_min == -50 {mm};
		ASSERT O.z_min == -100 {mm};
		ASSERT O.z_max == 100 {mm};
	END self_test;
END compound_section_test;

MODEL compound_section_test2;
	w_rhs, h_rhs, t IS_A distance;
	w[1..4], h[1..4] IS_A distance;
	y[1..4], z[1..4] IS_A delta_distance;

	R IS_A rectangular_hollow_section(w_rhs, h_rhs, t);

	S[1..4], O[1..4] IS_A section;
	FOR i IN [1..4] CREATE
		S[i] IS_REFINED_TO rectangular_section(w[i], h[i]);
		O[i] IS_REFINED_TO offset_section(S[i], y[i], z[i]);
	END FOR;

	OO[12,34] IS_A section;
	OO[12] IS_REFINED_TO compound_section(O[1],O[2]);
	OO[34] IS_REFINED_TO compound_section(O[3],O[4]);

	C IS_A compound_section(OO[12],OO[34]);

	(*
		set up the geometry so the the section 'R' is the same as the 
		section 'C', with the former expressed as a single RHS, and the
		latter expressed as a sum of simple rectangular slices
.
		+--1--+
	    |     |
	    3     4
	    |     |	
	    +--2--+
	*)     
	w[1], w[2] ARE_THE_SAME;
	w[3], w[4] ARE_THE_SAME;
	w[3], t ARE_THE_SAME;
	
	h[1], h[2] ARE_THE_SAME;
	h[3], h[4] ARE_THE_SAME;
	h[1], t ARE_THE_SAME;

	z[1],z[2] ARE_THE_SAME;
	z[3] = -z[4];
	z[1] = 0;

	y[3],y[4] ARE_THE_SAME;
	y[1] = -y[2];
	y[3] = 0;
	
	y[1] = (h[3] - t)/2;
	z[4] = (w[1] + t)/2;

	w_rhs = 2*t + w[1];
	h_rhs = h[3];

METHODS
	METHOD on_load;
		FIX w_rhs, h_rhs, t;
		w_rhs := 60 {mm};
		h_rhs := 130 {mm};
		t := 5 {mm};		
	END on_load;
	METHOD self_test;
		ASSERT abs(C.I_y   - R.I_y) < 1e-6 {mm};
		ASSERT abs(C.I_z   - R.I_z) < 1e-6 {mm};
		ASSERT abs(C.A     - R.A) < 1e-6 {mm};
		ASSERT abs(C.y_c   - R.y_c) < 1e-6 {mm};
		ASSERT abs(C.z_c   - R.z_c) < 1e-6 {mm};
		ASSERT abs(C.y_max - R.y_max) < 1e-6 {mm};
		ASSERT abs(C.y_min - R.y_min) < 1e-6 {mm};
		ASSERT abs(C.z_max - R.z_max) < 1e-6 {mm};
		ASSERT abs(C.z_min - R.z_min) < 1e-6 {mm};
	END self_test;
END compound_section_test2;

(*
	A simpler test of compound section: try rectangle = sum of two rectangles
*)
MODEL compound_section_test3;
	w_tot, h_tot IS_A distance;
	w[1..2], h[1..2] IS_A distance;
	y[1..2], z[1..2] IS_A delta_distance;

	R IS_A rectangular_section(w_tot, h_tot);

	S[1..2], O[1..2] IS_A section;
	FOR i IN [1..2] CREATE
		S[i] IS_REFINED_TO rectangular_section(w[i], h[i]);
		O[i] IS_REFINED_TO offset_section(S[i], y[i], z[i]);
	END FOR;

	C IS_A compound_section(O[1],O[2]);

	(*
		+-----+
	    |  1  |
	    +-----+
	    |  2  |	
	    +-----+
	*)
	w[1], w[2] ARE_THE_SAME;	
	h[1], h[2] ARE_THE_SAME;

	z[1], z[2] ARE_THE_SAME;
	y[1] = -y[2];
	
	y[1] = h_tot / 4;
	z[1] = 0 {mm};

	w[1] = w_tot;
	h[1] = h_tot / 2;

METHODS
	METHOD on_load;
		FIX w_tot, h_tot;
		w_tot := 50 {mm};
		h_tot := 140 {mm};
	END on_load;
	METHOD self_test;
		ASSERT abs(C.I_y   - R.I_y) < 1e-6 {mm};
		ASSERT abs(C.I_z   - R.I_z) < 1e-6 {mm};
		ASSERT abs(C.A     - R.A) < 1e-6 {mm};
		ASSERT abs(C.y_c   - R.y_c) < 1e-6 {mm};
		ASSERT abs(C.z_c   - R.z_c) < 1e-6 {mm};
		ASSERT abs(C.y_max - R.y_max) < 1e-6 {mm};
		ASSERT abs(C.y_min - R.y_min) < 1e-6 {mm};
		ASSERT abs(C.z_max - R.z_max) < 1e-6 {mm};
		ASSERT abs(C.z_min - R.z_min) < 1e-6 {mm};
		ASSERT C.y_max = h[1];
		ASSERT C.y_min = -h[1];
		ASSERT C.z_max = w[1] / 2;
		ASSERT C.z_min = -w[1] / 2;
	END self_test;
END compound_section_test3;

(*
	Same as test3 but side-by-side
*)
MODEL compound_section_test4;
	w_tot, h_tot IS_A distance;
	w[1..2], h[1..2] IS_A distance;
	y[1..2], z[1..2] IS_A delta_distance;

	R IS_A rectangular_section(w_tot, h_tot);

	S[1..2], O[1..2] IS_A section;
	FOR i IN [1..2] CREATE
		S[i] IS_REFINED_TO rectangular_section(w[i], h[i]);
		O[i] IS_REFINED_TO offset_section(S[i], y[i], z[i]);
	END FOR;

	C IS_A compound_section(O[1],O[2]);

	(*
		+---+---+
	    |   |   |
	    | 1 | 2 |
	    |   |   |	
	    +---|---+
	*)
	w[1], w[2] ARE_THE_SAME;	
	h[1], h[2] ARE_THE_SAME;

	y[1], y[2] ARE_THE_SAME;
	z[1] = -z[2];
	
	z[1] = w_tot / 4;
	y[1] = 0 {mm};

	w[1] = w_tot / 2;
	h[1] = h_tot;

METHODS
	METHOD on_load;
		FIX w_tot, h_tot;
		w_tot := 50 {mm};
		h_tot := 140 {mm};
	END on_load;
	METHOD self_test;
		ASSERT abs(C.I_y   - R.I_y) < 1e-6 {mm};
		ASSERT abs(C.I_z   - R.I_z) < 1e-6 {mm};
		ASSERT abs(C.A     - R.A) < 1e-6 {mm};
		ASSERT abs(C.y_c   - R.y_c) < 1e-6 {mm};
		ASSERT abs(C.z_c   - R.z_c) < 1e-6 {mm};
		ASSERT abs(C.y_max - R.y_max) < 1e-6 {mm};
		ASSERT abs(C.y_min - R.y_min) < 1e-6 {mm};
		ASSERT abs(C.z_max - R.z_max) < 1e-6 {mm};
		ASSERT abs(C.z_min - R.z_min) < 1e-6 {mm};
		ASSERT C.y_max = h_tot / 2;
		ASSERT C.y_min = -h_tot / 2;
		ASSERT C.z_max = w_tot / 2;
		ASSERT C.z_min = -w_tot / 2;
	END self_test;
END compound_section_test3;
