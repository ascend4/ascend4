(*********************************************************************\
                        petlyuk.asc
                        by Joseph J. Zaher
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

This module <does>
Use of this module is demonstrated by the associated script file
petlyuk.s.
\*********************************************************************)

(*********************************************************************\
  $Date: 1997/07/03 14:51:50 $
  $Revision: 1.6 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/petlyuk.asc,v $
\*********************************************************************)
(**
 **
 **  P  E  T  L  Y  U  K  .  A  S  C
 **  -------------------------------
 **
 **  ASCEND structure for the modeling of a petlyuk distillation configuration
 **  separating three components (hexane, octane, and decane) with a total of
 **  28 trays.	
 **
 **  Joseph J. Zaher
 **  08/94
 **
 **)


(* REQUIRE flowsheet.lib *)
(* REQUIRE plot.lib *)

MODEL tray REFINES flash;

    inputs                              :==  ['top', 'bottom'];

        state.mix['liquid'], feed['top'].state ARE_ALIKE;
        state.mix['vapor'], feed['bottom'].state ARE_ALIKE;

END tray;


MODEL feedtray REFINES flash;

    inputs                              :== ['top', 'middle', 'bottom'];

        state.mix['liquid'], feed['top'].state ARE_ALIKE;
        state.mix['vapor'], feed['bottom'].state ARE_ALIKE;
        feed['middle'].state, state ARE_ALIKE;
        feed['middle'].state.phases, state.phases ARE_THE_SAME;
        feed['middle'].state.reference, state.reference ARE_THE_SAME;
        feed['middle'].state.mix['liquid'], state.mix['liquid'] ARE_ALIKE;
        feed['middle'].state.mix['vapor'], state.mix['vapor'] ARE_ALIKE;

END feedtray;


MODEL condenser REFINES flash;

    inputs                              :== ['bottom'];

        state.mix['vapor'], feed['bottom'].state ARE_ALIKE;

END condenser;


MODEL evaporator REFINES flash;

    inputs                              :== ['top'];

        state.mix['liquid'], feed['top'].state ARE_ALIKE;

END evaporator;



MODEL petlyuk REFINES unit_operation;

    inputs                              :== ['middle'];
    feed['middle'].state                IS_REFINED_TO heterogeneous_mixture;
    feed['middle'].state.phases         :== ['vapor','liquid'];
    feed['middle'].state.reference      :== 'liquid';
    feed['middle'].state.mix['vapor']   IS_REFINED_TO Pitzer_mixture;
    feed['middle'].state.mix['liquid']  IS_REFINED_TO UNIFAC_mixture;
    feed['middle'].state.components     :== ['nC6','nC8','nC10'];
    feed['middle'].state.data['nC6']    IS_REFINED_TO n_hexane;
    feed['middle'].state.data['nC8']    IS_REFINED_TO n_octane;
    feed['middle'].state.data['nC10']   IS_REFINED_TO n_decane;
    outputs                             :== ['bottom','middle','top'];
    stage[1..28]                        IS_A flash;
    stage[1..3]                         IS_REFINED_TO tray;
    stage[4]                            IS_REFINED_TO feedtray;
    stage[5..7]                         IS_REFINED_TO tray;
    stage[8]                            IS_REFINED_TO evaporator;
    stage[9..27]                        IS_REFINED_TO tray;
    stage[28]                           IS_REFINED_TO condenser;
    splits, mixes                       IS_A set OF symbol_constant;
    splits                              :== ['top','middle','bottom',
                                            'vapor','liquid'];
    mixes                               :== ['vapor','liquid'];
    distributor[splits]                 IS_A splitter;
    collector[mixes]                    IS_A homogeneous_mixer;
    distributor['top'].outputs          :== ['internal','external'];
    distributor['middle'].outputs       :== ['internal','external'];
    distributor['bottom'].outputs       :== ['internal','external'];
    distributor['vapor'].outputs        :== ['left','right'];
    distributor['liquid'].outputs       :== ['left','right'];
    collector['vapor'].inputs           :== ['left','right'];
    collector['liquid'].inputs          :== ['left','right'];
    reflux                              IS_A factor;
    reboil                              IS_A factor;
    components                          IS_A set OF symbol_constant;

        components :== UNION[feed[i].state.components | i IN inputs];

        stage[1..28].state ARE_ALIKE;
        FOR plate IN [1..6, 9..13, 15..17, 19..20, 22..26] CREATE
            stage[plate+1].product['bottom'],
                stage[plate].feed['top'] ARE_THE_SAME;
            stage[plate+1].feed['bottom'],
                stage[plate].product['top'] ARE_THE_SAME;
        END FOR;

        (* Evaporator *)
        distributor['bottom'].feed['inlet'],
            stage[9].product['bottom'] ARE_THE_SAME;
        distributor['bottom'].product['external'],
            product['bottom'] ARE_THE_SAME;
        distributor['bottom'].product['internal'],
            stage[8].feed['top'] ARE_THE_SAME;
        stage[8].product['top'],
            stage[9].feed['bottom'] ARE_THE_SAME;
        reboil*(stage[8].product['bottom'].F + product['bottom'].F) =
            stage[9].feed['bottom'].F;

        (* Vapor distributor *)
        distributor['vapor'].feed['inlet'],
            stage[14].product['top'] ARE_THE_SAME;
        distributor['vapor'].product['left'],
            stage[1].feed['bottom'] ARE_THE_SAME;
        distributor['vapor'].product['right'],
            stage[15].feed['bottom'] ARE_THE_SAME;

        (* Liquid collector *)
        collector['liquid'].feed['left'],
            stage[1].product['bottom'] ARE_THE_SAME;
        collector['liquid'].feed['right'],
            stage[15].product['bottom'] ARE_THE_SAME;
        collector['liquid'].product['outlet'],
            stage[14].feed['top'] ARE_THE_SAME;

        (* Middle feed *)
 	feed['middle'], stage[4].feed['middle'] ARE_THE_SAME;

        (* Middle product *)
        distributor['middle'].feed['inlet'],
            stage[19].product['bottom'] ARE_THE_SAME;
        distributor['middle'].product['external'],
            product['middle'] ARE_THE_SAME;
        distributor['middle'].product['internal'],
            stage[18].feed['top'] ARE_THE_SAME;
        stage[19].feed['bottom'],
            stage[18].product['top'] ARE_THE_SAME;

        (* Vapor collector *)
        collector['vapor'].feed['left'],
            stage[7].product['top'] ARE_THE_SAME;
        collector['vapor'].feed['right'],
            stage[21].product['top'] ARE_THE_SAME;
        collector['vapor'].product['outlet'],
            stage[22].feed['bottom'] ARE_THE_SAME;

        (* Liquid distributor *)
        distributor['liquid'].feed['inlet'],
            stage[22].product['bottom'] ARE_THE_SAME;
        distributor['liquid'].product['left'],
            stage[7].feed['top'] ARE_THE_SAME;
        distributor['liquid'].product['right'],
            stage[21].feed['top'] ARE_THE_SAME;

        (* Condenser *)
        distributor['top'].feed['inlet'],
            stage[28].product['bottom'] ARE_THE_SAME;
        distributor['top'].product['external'],
            product['top'] ARE_THE_SAME;
        distributor['top'].product['internal'],
            stage[27].feed['top'] ARE_THE_SAME;
        stage[28].feed['bottom'],
            stage[27].product['top'] ARE_THE_SAME;
        reflux*(stage[28].product['top'].F + product['top'].F) =
            stage[27].feed['top'].F;

    graph                               IS_A plt_plot_integer;

        (* plotting *)
        graph.title :== 'Ternary Petlyuk Distillation';
        graph.XLabel :== 'Tray number';
        graph.YLabel :== 'Composition';
        graph.ncurve :== 3;
        graph.curve[1,2,3].npnt :== 20;
        graph.curve[1].legend :== 'nC6';
        graph.curve[2].legend :== 'nC8';
        graph.curve[3].legend :== 'nC10';
        FOR plate IN [9..28] CREATE
            graph.curve[1,2,3].pnt[plate - 8].x := plate; 
            graph.curve[1].pnt[plate - 8].y, 
                stage[plate].product['bottom'].state.y['nC6'] ARE_THE_SAME;
            graph.curve[2].pnt[plate - 8].y, 
                stage[plate].product['bottom'].state.y['nC8'] ARE_THE_SAME;
            graph.curve[3].pnt[plate - 8].y, 
                stage[plate].product['bottom'].state.y['nC10'] ARE_THE_SAME;
        END FOR;

    METHODS
        METHOD values;
            feed['middle'].state.T := 725.0{R};
            feed['middle'].state.P := 1.0{atm};
            feed['middle'].state.y['nC6'] := 0.4;
            feed['middle'].state.y['nC8'] := 0.3;
            feed['middle'].state.y['nC10'] := 0.3;
            feed['middle'].state.phi['liquid'] := 0.3;
            feed['middle'].state.phi['vapor'] := 0.7;
            feed['middle'].F := 100.0{lb_mole/hour};
            feed['middle'].state.alpha['vapor']['nC6'] := 1.5;
            feed['middle'].state.alpha['vapor']['nC8'] := 1.0;
            feed['middle'].state.alpha['vapor']['nC10'] := 0.5;
            stage[1..28].T := feed['middle'].state.T;
            stage[1..28].P := feed['middle'].state.P;
            FOR i IN components DO
                stage[1..28].state.alpha['vapor'][i] := 
                    feed['middle'].state.alpha['vapor'][i];
                stage[1..28].state.y[i] := 
                    feed['middle'].state.y[i];
                stage[1..28].state.mix['liquid'].y[i] := 
                    feed['middle'].state.y[i];
                stage[1..28].state.mix['vapor'].y[i] := 
                    feed['middle'].state.y[i];
            END FOR;
        END values;     
                            
        METHOD clear;
            RUN feed[inputs].clear;
            RUN product[outputs].clear;
            RUN stage[1..28].clear;
            RUN distributor[splits].clear;
            RUN collector[mixes].clear;
            reflux.fixed := FALSE; 
            reboil.fixed := FALSE;
        END clear;

        METHOD relative_volatility;
            RUN feed[inputs].specify;
            RUN product[outputs].specify;
            RUN stage[1..28].specify;
            RUN distributor[splits].specify;
            RUN collector[mixes].specify;
            stage[1..7].feed['bottom'].state.y[components].fixed := FALSE;
            stage[9..28].feed['bottom'].state.y[components].fixed := FALSE;
            stage[1..7].feed['bottom'].F.fixed := FALSE;
            stage[9..28].feed['bottom'].F.fixed := FALSE;
            stage[1..28].state.phi['vapor'].fixed := FALSE;
            stage[1..28].state.phi['liquid'].fixed := FALSE;
            distributor['top'].feed['inlet'].state.y[components].fixed := FALSE;
            distributor['top'].feed['inlet'].F.fixed := FALSE;
            distributor['top'].phi['internal','external'].fixed := FALSE;
            distributor['middle'].feed['inlet'].state.y[components].fixed := FALSE;
            distributor['middle'].feed['inlet'].F.fixed := FALSE;
            distributor['middle'].phi['internal','external'].fixed := FALSE;
            distributor['bottom'].feed['inlet'].state.y[components].fixed := FALSE;
            distributor['bottom'].feed['inlet'].F.fixed := FALSE;
            distributor['bottom'].phi['internal','external'].fixed := FALSE;
            distributor['vapor'].feed['inlet'].state.y[components].fixed := FALSE;
            distributor['vapor'].feed['inlet'].F.fixed := FALSE;
            distributor['vapor'].phi['left','right'].fixed := FALSE;
            distributor['liquid'].feed['inlet'].state.y[components].fixed := FALSE;
            distributor['liquid'].feed['inlet'].F.fixed := FALSE;
            distributor['liquid'].phi['left','right'].fixed := FALSE;
            collector['liquid'].feed['left','right'].state.y[components].fixed := FALSE;
            collector['liquid'].feed['left','right'].F.fixed := FALSE;
            collector['vapor'].feed['left','right'].state.y[components].fixed := FALSE;
            collector['vapor'].feed['left','right'].F.fixed := FALSE;
            stage[8].state.phi['vapor'] := 1.0;
            stage[8].state.phi['vapor'].fixed := TRUE;
            stage[28].state.phi['vapor'] := 0.0;
            stage[28].state.phi['vapor'].fixed := TRUE;
            distributor['liquid'].phi['left'] := 0.1;
            distributor['liquid'].phi['left'].fixed := TRUE;
            distributor['vapor'].phi['right'] := 0.9;
            distributor['vapor'].phi['right'].fixed := TRUE;
            product['top'].F := 40.0{lb_mole/hour};
            product['top'].F.fixed := TRUE;
            product['middle'].F := 30.0{lb_mole/hour};
            product['middle'].F.fixed := TRUE;
            reflux := 10.0;
            reflux.fixed := TRUE;
        END relative_volatility;

        METHOD constant_overflow;
            stage[1..7,9..27].Q.fixed := FALSE;
            stage[2..7].feed['bottom'].F := 44.0{lb_mole/hour};
            stage[2..7].feed['bottom'].F.fixed := TRUE;
            stage[9..14].feed['bottom'].F := 440.0{lb_mole/hour};
            stage[9..14].feed['bottom'].F.fixed := TRUE;
            stage[16..21].feed['bottom'].F := 396.0{lb_mole/hour};
            stage[16..21].feed['bottom'].F.fixed := TRUE;
            stage[22..27].feed['bottom'].F := 440.0{lb_mole/hour};
            stage[22..27].feed['bottom'].F.fixed := TRUE;
            collector['vapor'].feed['left'].F := 44.0{lb_mole/hour};
            collector['vapor'].feed['left'].F.fixed := TRUE;
            collector['liquid'].feed['right'].F := 330.0{lb_mole/hour};
            collector['liquid'].feed['right'].F.fixed := TRUE;
        END constant_overflow;

        METHOD adiabatic;
            stage[1..7,9..27].Q := 0.0{BTU/hour};
            stage[1..7,9..27].Q.fixed := TRUE;
            stage[2..7].feed['bottom'].F.fixed := FALSE;
            stage[9..14].feed['bottom'].F.fixed := FALSE;
            stage[16..21].feed['bottom'].F.fixed := FALSE;
            stage[22..27].feed['bottom'].F.fixed := FALSE;
            collector['vapor'].feed['left'].F.fixed := FALSE;
            collector['liquid'].feed['right'].F.fixed := FALSE;
        END adiabatic;

        METHOD equilibrium;
            RUN relative_volatility;
            stage[1..28].T.fixed := FALSE;
            collector['liquid'].duty := 0.0{BTU/hour};
            collector['liquid'].duty.fixed := TRUE;
            collector['liquid'].product['outlet'].state.T.fixed := FALSE;
            collector['vapor'].duty := 0.0{BTU/hour};
            collector['vapor'].duty.fixed := TRUE;
            collector['vapor'].product['outlet'].state.T.fixed := FALSE;
        END equilibrium;

END petlyuk;


