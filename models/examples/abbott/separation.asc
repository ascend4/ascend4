(* the following files are part of the ethylene flowsheet put together
   by kirk abbott for his thesis.  They are not intended for reusability
   but rather to demonstrate the possible efficiency of the ascend
   compiler and solver under assumptions that may hold in the future,
   like after ben has finished his thesis and done parameterized types
   right.
   This version of separation.asc was ported to ascend4 by ben allan.
 *)

(* REQUIRE abbott/newethylene_ppp_column.lib *)
(* REQUIRE abbott/newethylene_column.lib *)

MODEL gas_fractionator;

  column[1] IS_A medium_column;   (* predefined IN ethylene_column.lib *)
  feed IS_A vapor_liquid_stream;
  product IS_A liquid_stream;
  
  components IS_A set OF symbol_constant;
  data[components] IS_A component_constants;

  feed, column[1].feed ARE_THE_SAME;
  product, column[1].distillate ARE_THE_SAME;
  
  components,
    column[1].feedtray.components    ARE_THE_SAME;
  FOR i IN components CREATE
    data[i],
      column[1].feedtray.data[i] ARE_THE_SAME;
  END FOR;
  
  METHODS
  METHOD clear;
      RUN column[1].clear;
      RUN feed.clear;
      RUN product.clear;
  END clear;
  METHOD seqmod;
      RUN column[1].seqmod;
  END seqmod;
  METHOD specify;
      RUN column[1].specify;
  END specify;
  METHOD reset;
      RUN clear;
      RUN specify;
  END reset;
  METHOD values;
      RUN column[1].values;
      (* add some more here *)
  END values;
  
END gas_fractionator;

  
MODEL recovery_frontend;

  (* column[1] is the c1_c2 column;
     column[2] is the c2_c3 column;
     column[3] is the c2_splitter; *)
     
  column[2,3,4] IS_A medium_column;   (* predefined IN ethylene_column.lib *)
  streams IS_A set OF integer_constant;
  streams :== [1,2,3,4,5,6,8];
  stream[streams] IS_A td_stream;    (* all the streams *)
  
  stream[2,5,6,8] IS_REFINED_TO liquid_stream;
  stream[1,3,4] IS_REFINED_TO vapor_liquid_stream;
  
  (* COLUMN SPECS -- the same FOR all the columns *)
  feed_loc IS_A integer_constant;
  ntrays IS_A integer_constant;
  feed_loc :== column[2].feed_loc;
  ntrays :== column[2].ntrays;

  (* Again all this stuff is defined IN ethylene_column.lib *)
  components IS_A set OF symbol_constant;
  components :== column[2].feedtray.components;
  components,
    stream[streams].components	ARE_THE_SAME;
  
  data[components] IS_A component_constants;
  FOR i IN components CREATE
    data[i],
      column[2,3,4].feedtray.data[i],
      stream[streams].data[i]	ARE_THE_SAME;
  END FOR;


  (* make the associations OF streams *)
  
  (* COLUMN 2 *)
  column[2].feed,			stream[1] ARE_THE_SAME;
  column[2].distillate,	 		stream[2] ARE_THE_SAME;

  (* COLUMN 3 *)
  column[3].feed,			stream[3] ARE_THE_SAME;
  column[3].bottoms,			stream[8] ARE_THE_SAME;
  (* connect Column 2 bottoms to column 3 feed *)
  FOR i IN components CREATE
    join_c2_2_c3[i]:
      column[2].bottoms.f[i] = stream[3].f[i];
  END FOR;

  (* COLUMN 4 *)
  column[4].feed,			stream[4] ARE_THE_SAME;
  column[4].distillate,			stream[5] ARE_THE_SAME;
  column[4].bottoms,			stream[6] ARE_THE_SAME;
  (* connect Column 3 tops to column 4 feed *)
  FOR i IN components CREATE
    join_c3_2_c4[i]:
      column[3].distillate.f[i] = stream[4].f[i];
  END FOR;
  
  METHODS
  METHOD clear;
      RUN column[2,3,4].clear;
      RUN stream[streams].clear;
  END clear;
  METHOD seqmod;
      RUN column[2,3,4].seqmod;
      stream[1].f[components].fixed := FALSE;
  END seqmod;
  METHOD specify;
      RUN column[2,3,4].reset;	     	      (* fix up the columns *)
      stream[3].f[components].fixed := FALSE;  (* free up col 3 feed *)
      stream[4].f[components].fixed := FALSE;  (* free up col 4 feed *)
  END specify;
  METHOD reset;
      RUN clear;
      RUN specify;
  END reset;
  METHOD values;
      RUN column[2,3,4].values;
      (* FIX FIX FIX
	 add stuff FOR reflux and estimates OF the feed
	 flows.
	 *)
  END values;
  
END recovery_frontend;



(* This MODEL deals with the backend and the c3 splitter
   IN particular. There are only 3 components IN this
   MODEL.
   column_5 is the c3/c4 column
   column_6 is the c3_splitter.
   We dont make an array OF columns as we are treating both
   OF them differently. *)
   
MODEL recovery_backend;
  
  column_5 IS_A column30_eq;
  column_6 IS_A column164; (* this becomes the c3_splitter i.e a colum164 *)
  streams IS_A set OF integer_constant;
  stream[streams] IS_A td_stream;

  streams :== [8,9,10,11,12,14]; (* no 13 :-) *)
  stream[9,11,12,14] IS_REFINED_TO liquid_stream;
  stream[8,10] IS_REFINED_TO vapor_liquid_stream;
  
  
  components IS_A set OF symbol_constant;
  data[components] IS_A component_constants;
  
  components,
    column_5.components,
    column_6.components,
    stream[streams].components ARE_THE_SAME;
  
  FOR i IN components CREATE
    data[i],
      column_5.feed.data[i],
      column_6.feed.data[i],
      stream[streams].data[i]	ARE_THE_SAME;
  END FOR;

  
  (* associate the streams with the units *)

  column_5.feed,		stream[8] ARE_THE_SAME;
  column_5.bottoms,		stream[9] ARE_THE_SAME;

  column_6.feed,		stream[10] ARE_THE_SAME;
  column_6.distillate,		stream[11] ARE_THE_SAME;
  column_6.bottoms,		stream[12] ARE_THE_SAME;

  (* connect column_5 tops to c3_splitter feed *)
  FOR i IN components CREATE
    join_c5_2_c6[i]:
      column_5.distillate.f[i] = stream[10].f[i];
  END FOR;

  (* MIXER *)
  (* simulate the mixer *)
  FOR i IN components CREATE
    simulate_mixer4[i]:
      stream[12].f[i] + stream[9].f[i] = stream[14].f[i];
  END FOR;

  METHODS
  METHOD clear;
      RUN column_5.clear;
      RUN column_6.clear;
      RUN stream[streams].clear;
  END clear;
  METHOD seqmod;
      RUN column_5.seqmod;
      RUN column_6.seqmod;
  END seqmod;
  METHOD specify;
      RUN column_5.reset;
      RUN column_6.reset;
      
      RUN column_5.feed.reset;
      RUN column_6.feed.clear;
      RUN column_6.feed.seqmod;
      
      RUN stream[14].clear;
      RUN stream[14].seqmod;
  END specify;
  METHOD reset;
      RUN clear;
      RUN specify;
  END reset;
  METHOD values;
      RUN column_5.values;
      RUN column_6.values;
  END values;
  
END recovery_backend;










