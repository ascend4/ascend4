(* the following files are part of the ethylene flowsheet put together
   by kirk abbott for his thesis.  They are not intended for reusability
   but rather to demonstrate the possible efficiency of the ascend
   compiler and solver under assumptions that may hold in the future,
   like after ben has finished his thesis and done parameterized types
   right.
   This version of furnace.asc was ported to ascend4 by ben allan.
 *)


(* REQUIRE abbott/newflowsheet.lib *)
(* REQUIRE abbott/tube_reactor.asc *)

MODEL furnace;

  components IS_A set OF symbol_constant;
  data[components] IS_A component_constants;

  n_units IS_A integer_constant;
  n_units :== 4;			(* problem dependent *)


  reactor[1..n_units] IS_A Reactor;
  split[1] IS_A td_vapor_splitter;
  feed IS_A vapor_stream;
  product IS_A vapor_stream;

  components,
    feed.components,
    product.components,
    split[1].components,
    reactor[1..n_units].components ARE_THE_SAME;

  FOR i IN components CREATE
    data[i],
      reactor[1].data[i],
      split[1].data[i],
      feed.data[i],
      product.data[i] ARE_THE_SAME;
  END FOR;

  (* the splitter definition is dependent upon the number OF
     * units IN parallel. At the moment we are using 4. *)

  split[1].inputs :== ['feed'];
  split[1].outputs :== ['to_r1','to_r2','to_r3','to_r4'];

  split[1].input['feed'],   feed ARE_THE_SAME;
  split[1].output['to_r1'], reactor[1].feed ARE_THE_SAME;
  split[1].output['to_r2'], reactor[2].feed ARE_THE_SAME;
  split[1].output['to_r3'], reactor[3].feed ARE_THE_SAME;
  split[1].output['to_r4'], reactor[4].feed ARE_THE_SAME;

  (* n_units *must* be greater than 2 *)
  split[1].phi['to_r1','to_r2','to_r3','to_r4'] := 1.0 / n_units;


  (* Here we combine the output streams into the product stream *)
  (* we *really* need a mixer. In the mean time, I am going to set
    the product T, P to that OF the first reactor *)
  
  FOR i IN components CREATE
    simulate_mixer1[i]:
      product.f[i] = SUM[reactor[j].product.f[i] | j IN [1..n_units]];
  END FOR;
  simulate_mixer_T: product.state.T = reactor[1].product.state.T;
  simulate_mixer_P: product.state.P = reactor[1].product.state.P;

  METHODS

  METHOD clear;
      RUN reactor[1..n_units].clear;
      RUN split[1].clear;
      RUN feed.clear;
      RUN product.clear;
  END clear;
  METHOD specify;
      RUN reactor[1..n_units].specify;
      reactor[1..n_units].feed.Ftot.fixed := FALSE;
      RUN split[1].specify;
      RUN feed.reset;		(* specify the fresh feed fully *)
  END specify;
  METHOD reset;
      RUN clear;
      RUN specify;
  END reset;

  METHOD values;
      (* set the values FOR the total feed flows FOR the individual units,
	 THEN RUN their values procedures.  This suggests that we need a
	 structure assignment, such as:
	 
	 feed.Ftot := 200.0;
	 feed.T := 1000;
	 reactor[1].feed := feed;	# set up the first reactor at 200.0
	 feed.Ftot := 60.0;
	 reactor[1].feed := feed;	# set up the second reactor at 60.0
	 We really should write an intialization routine FOR the enthalpy
	 OF the feed. This MODEL wont solve with a badly initialized feed.H
	 and feed.Htot.
	 *)
      
      reactor[1..n_units].feed.Ftot := 800.0{lb_mole/hour};
      RUN reactor[1..n_units].values;
      
      feed.Ftot := n_units * 800.0{lb_mole/hour};
      feed.state.T := 980 {R};
      feed.state.P := 280.0 {psia};
      
      feed.state.y['H2'] := 0.50;	
      feed.state.y['ethane'] := 0.04;
      feed.state.y['propane'] := 0.02;
      feed.state.y['i_butane'] := 0.11;
      feed.state.y['nC5'] := 0.33;
      feed.state.y['CO2'] := 0.001;
      feed.state.y['ethylene'] := 0.001;
      feed.state.y['methane'] := 0.001;
      feed.state.y['propylene'] := 0.001;
      feed.state.y['propadiene'] := 0.001;

      (* We are given the concentration; However feed.reset
	  expects that we give flowrates OF the individual
	  species. We DO that conversion here. *)
      FOR i IN components DO
	feed.f[i] := feed.Ftot * feed.state.y[i];
      END FOR;
      
  END values;

END furnace;


MODEL furnace2;

  r1 IS_A Reactor;
  r2 IS_A Reactor;
  r3 IS_A Reactor;
  r4 IS_A Reactor;

END furnace2;
