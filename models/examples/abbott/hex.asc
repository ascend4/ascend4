(* this file is a leftover from kirk abbotts thesis work. 
   it isn't apparently used anywhere. it isn't particularly
   reusable.
   ported to ascend4 by ben allan. 5/17/96
*)
(*
 Try this as a script

READ FILE $mylibrary/system.lib;
READ FILE $mylibrary/atoms.lib;
READ FILE $mylibrary/components.lib;
READ FILE $mylibrary/H_G_thermodynamics.lib;
READ FILE $models/libraries/stream.lib;
READ FILE hex.asc;

COMPILE h1 OF hex;
BROWSE h1;
RUN h1.reset;
RUN h1.values;
*)

(*-------------------------------------------------------------------*)   

(* this needs to be in atoms.lib 
ATOM heat_transfer_coefficient REFINES solver_var
  DIMENSION M/T^3/TMP
  DEFAULT 100{BTU/hour/ft^2/R};

   lower_bound := 0{BTU/hour/ft^2/R};
   nominal := 100{BTU/hour/ft^2/R};
(*   display_unit := {BTU/hour/ft^2/R}; *)

END heat_transfer_coefficient;
*)
(*-------------------------------------------------------------------*)

MODEL test_eth_stream REFINES vapor_liquid_stream;
  
  components :== [
    'ethane','propane','propadiene','propylene','i_butane'];
  

  data['ethane'] IS_REFINED_TO ethane;
  (* ethylene has a problem guys *)
  data['propane'] IS_REFINED_TO propane;
  data['propadiene'] IS_REFINED_TO propadiene;
  data['propylene'] IS_REFINED_TO propylene;
  data['i_butane'] IS_REFINED_TO i_butane;

END test_eth_stream;


MODEL hex;

  streams IS_A set OF symbol_constant;
  streams :== ['thi','tho','tci','tco'];
  
  stream[streams] IS_A test_eth_stream;

  Qhot, Qcold IS_A energy_rate;
  dtlm IS_A temperature;
  A IS_A area;
  Ntubes IS_A generic_real;
  Len, tube_dia IS_A distance;
  
  U IS_A heat_transfer_coefficient;

  
  T[streams] IS_A temperature;
  
  T['thi'], stream['thi'].state.T ARE_THE_SAME;
  T['tho'], stream['tho'].state.T ARE_THE_SAME;
  T['tco'], stream['tco'].state.T ARE_THE_SAME;
  T['tci'], stream['tci'].state.T ARE_THE_SAME;

  (*
    stream['thi'].Ftot, stream['tho'].Ftot ARE_THE_SAME;
    stream['tci'].Ftot, stream['tco'].Ftot ARE_THE_SAME; *)
  
  FOR i IN stream['thi'].components CREATE
    stream['thi'].f[i], stream['tho'].f[i] ARE_THE_SAME;
    stream['tci'].f[i], stream['tco'].f[i] ARE_THE_SAME;
  END;

  heat_bal_hot: Qhot = stream['thi'].Htot - stream['tho'].Htot;
  heat_bal_cold: Qcold = stream['tco'].Htot - stream['tci'].Htot;

  hbal:  Qhot = Qcold;
  
  drive_force:
    dtlm * ln((T['thi'] - T['tco'])/(T['tho'] - T['tci'] + 0.00001))
    = (T['thi'] - T['tco']) - (T['tho'] - T['tci']);

  hex_eqn: Qhot = U*A*dtlm;

  area_def: A = Ntubes * (3.142 * tube_dia * Len);

  METHODS
  METHOD clear;
      RUN stream[streams].clear;
      A.fixed := FALSE;
      Qhot.fixed := FALSE;
      Len.fixed := FALSE;
      tube_dia.fixed := FALSE;
      U.fixed := FALSE;
      dtlm.fixed := FALSE;
      Ntubes.fixed := FALSE;
      T[streams].fixed := FALSE;
  END clear;

  METHOD calc_tco;
      (* running reset on a stream fixes all the input f\i. Ftot
	 * will be free. T, and P will also be fixed *)
      RUN stream[streams].reset;
      T['tco'].fixed := FALSE;
      T['tho'].fixed := FALSE;
      
      A.fixed := FALSE;
      Qhot.fixed := FALSE;
      Len.fixed := TRUE;
      tube_dia.fixed := TRUE;
      U.fixed := TRUE;
      dtlm.fixed := FALSE;
      Ntubes.fixed := TRUE;
  END calc_tco;

  METHOD reset;
      RUN clear;
      RUN calc_tco;
  END reset;
  
  METHOD values;
      Len := 12 {ft};
      Ntubes := 340;
      tube_dia := 0.5 {inch};
      U := 300.0 {BTU/hour/ft^2/R};
      T['thi'] := 77.0 {K}+ 273.0 {K};	(* 170 F *)
      T['tho'] := 57.0 {K} + 273.0 {K};	(* 130 F *)
      T['tci'] := 300.0 {K};
  END values;
  
END hex;

