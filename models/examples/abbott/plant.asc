(* the following files are part of the ethylene flowsheet put together
 * by kirk abbott for his thesis.  They are not intended for reusability
 * but rather to demonstrate the possible efficiency of the ascend
 * compiler and solver under assumptions that may hold in the future,
 * like after ben has finished his thesis and done parameterized types
 * right.
 * This version of plant.asc was ported to ascend4 by ben allan.
 *)

(*
 * This attempts to pull at the plant sections together.
 * This is an ethylene plant !!
 *)


(* REQUIRE abbott/separation.asc *)
(* REQUIRE abbott/furnace.asc *)


MODEL plant;
  
  reaction IS_A furnace;
  gas_frac IS_A gas_fractionator;
  frontend IS_A recovery_frontend;
  backend IS_A recovery_backend;

  freshfeed, plus_c2s, stream_stub[6,14] IS_A vapor_stream;

  (* specify the different groups OF components *)
  rxn_comps,
    gas_frac_comps,
    frontend_comps,
    backend_comps IS_A set OF symbol_constant;

  freshfeed.components,
    plus_c2s.components,
    stream_stub[6,14].components,
    rxn_comps,
    reaction.components ARE_THE_SAME;
  
  gas_frac_comps, gas_frac.components ARE_THE_SAME;
  frontend_comps, frontend.components ARE_THE_SAME;
  backend_comps, backend.components ARE_THE_SAME;

  FOR i IN rxn_comps CREATE
    freshfeed.data[i],
      plus_c2s.data[i],
      stream_stub[6,14].data[i],
      reaction.data[i] ARE_THE_SAME;
  END FOR;
  

  (* join rxn and gas_frac *)

  FOR i IN frontend_comps CREATE
    feed_forward[i]:
      reaction.product.f[i] = gas_frac.feed.f[i];
  END FOR;
  
  (* join gas_frac to the frontend *)

  FOR i IN frontend_comps CREATE
    join_gfrac_2_fend[i]:
      gas_frac.product.f[i] = frontend.stream[1].f[i];
  END FOR;

  (* join frontend to the back_end *)
  
  FOR i IN backend_comps CREATE
    join_fend_2_bend[i]:
      frontend.stream[8].f[i] = backend.stream[8].f[i];
  END FOR;
  
  (* CREATE the stubs FOR joining the front_end and back_end to the
     reaction section. The stubs are vapor_streams with same number
     OF components as all the streams IN the reaction section. *)
  
  FOR i IN rxn_comps CREATE
    stub14[i]:	freshfeed.f[i] + stream_stub[14].f[i] = plus_c2s.f[i];
    stub6[i]:	plus_c2s.f[i] + stream_stub[6].f[i] = reaction.feed.f[i];
  END FOR;

  (* join the frontend to the reaction section *)

  FOR i IN backend_comps CREATE
    backend_recycle[i]:		stream_stub[14].f[i] = backend.stream[14].f[i];
  END FOR;
  
  (* join the frontend to the reaction section *)
  
  FOR i IN frontend_comps CREATE
    frontend_recycle[i]:	stream_stub[6].f[i] = frontend.stream[6].f[i];
  END FOR;

  METHODS
  METHOD clear;
      RUN reaction.clear;
      RUN gas_frac.clear;
      RUN backend.clear;
      RUN frontend.clear;
            
      RUN plus_c2s.clear;
      RUN stream_stub[6,14].clear;
      RUN freshfeed.clear;
  END clear;
  
  METHOD specify;
      (* The main units *)
      RUN reaction.reset;
      RUN gas_frac.reset;
      RUN backend.reset;
      RUN frontend.reset;

      (* the streams --
	   we run the clear and then seqmod for the
	   streams. this is the only way that they
	   will be set up correctly. we apply this
	   to all streams that were on the boundaries on
	   the main units *)
      RUN reaction.feed.clear;
      RUN gas_frac.feed.clear;
      RUN frontend.stream[1].clear;
      RUN backend.stream[8].clear;
      
      RUN reaction.feed.seqmod;
      RUN gas_frac.feed.seqmod;
      RUN frontend.stream[1].seqmod;
      RUN backend.stream[8].seqmod;
      RUN plus_c2s.seqmod;

      (* special treatment around the contractions *)
      RUN stream_stub[6,14].seqmod;
      FOR i IN rxn_comps - frontend_comps DO
	stream_stub[6].f[i].fixed := TRUE;
      END FOR;
      FOR i IN rxn_comps - backend_comps DO
	stream_stub[14].f[i].fixed := TRUE;
      END FOR;

      (* fix the feed fully *)
      RUN freshfeed.reset;
  END specify;

  METHOD reset;
      RUN clear;
      RUN specify;
  END reset;

  METHOD values;
      RUN reaction.values;
      RUN gas_frac.values;
      RUN frontend.values;
      RUN backend.values;
      
      FOR i IN rxn_comps - frontend_comps DO
	stream_stub[6].f[i] := 0.0000001 {mole/s};
      END FOR;
      FOR i IN rxn_comps - backend_comps DO
	stream_stub[14].f[i] := 0.000001 {mole/s};
      END FOR;
  END values;

  METHOD no_recycle;
      backend_recycle[backend_comps].included := FALSE;
      frontend_recycle[frontend_comps].included := FALSE;
      RUN stream_stub[6,14].reset;
  END no_recycle;

  METHOD full_recycle;
      RUN reset;
      backend_recycle[backend_comps].included := TRUE;
      frontend_recycle[frontend_comps].included := TRUE;
  END full_recycle;
      
END plant;

      
      
      
      
  
  
  
  
  
  
