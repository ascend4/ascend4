(*********************************************************************\
                        tube_reactor.asc
			by Kirk A. Abbott
			based on Joseph J. Zaher
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Use of this module is demonstrated by the associated script file
isom.s.
\*********************************************************************)

(**
 **  I  S  O  M  .  A  S  C
 **  ----------------------
 **
 **  ASCEND structure for the modeling of a pentane isomerization process.
 **
 **  Joseph J. Zaher
 **  06/92
 **
 **) 


(* REQUIRE stream.lib *)
(* REQUIRE newintegration.lib *)

MODEL kinetics_2 REFINES base_model;

  n_var                                :== 5;
  state                               IS_A Pitzer_mixture;
  components 			      IS_A set OF symbol_constant;
  components :==
    ['H2', 'ethane', 'propane', 'i_butane', 'nC5',
    'CO2', 'propylene',  'propadiene', 'ethylene', 'methane'];
  components, state.components ARE_THE_SAME;

  state.data['H2']     		IS_REFINED_TO hydrogen;
  state.data['ethane']       	IS_REFINED_TO ethane;
  state.data['propane']       	IS_REFINED_TO propane;
  state.data['i_butane']     	IS_REFINED_TO i_butane;
  state.data['nC5']       	IS_REFINED_TO n_pentane;
  state.data['CO2']	   	IS_REFINED_TO carbon_dioxide;
  state.data['propylene']  	IS_REFINED_TO propylene;
  state.data['propadiene'] 	IS_REFINED_TO propadiene;
  state.data['ethylene']	IS_REFINED_TO ethylene;
  state.data['methane']		IS_REFINED_TO methane;

  catalyst                            IS_A mass;
  F                                   IS_A molar_rate;
  x                                   IS_REFINED_TO factor;
  dydx[1..4]                          IS_REFINED_TO factor;
  dydx[5]                             IS_REFINED_TO molar_energy;

  y[1], state.y['ethane'] ARE_THE_SAME;
  y[2], state.y['propane'] ARE_THE_SAME;
  y[3], state.y['i_butane'] ARE_THE_SAME;
  y[4], state.y['nC5'] ARE_THE_SAME;
  y[5], state.H ARE_THE_SAME;

  (* rate law parameters *)
  k1,kT2,k3,kT4,k5,kT6,k7,kT8 IS_A real;
  (* temperature dependence correlation parameters *)
  c1,c2,c3 IS_A real;


  dydx[1]*state.V*F = 1.0{cm^3/g/s}
    *catalyst
    *(exp(k1 - kT2/state.T)*state.y['i_butane'] + 
    exp(k3 - kT4/state.T)*state.y['nC5'])
    /(1.0 + 1.0{1/psia}*state.P
    *(c1-c2*state.T+c3*state.T^2))^2;

  dydx[2], dydx[1] ARE_THE_SAME;

  dydx[3]*state.V*F = 1.0{cm^3/g/s}
    *catalyst
    *(exp(k5 - kT6/state.T)*state.y['nC5'] -
    exp(k7 - kT8/state.T)*state.y['i_butane'] -
    exp(k1 - kT2/state.T)*state.y['i_butane'])
    /(1.0 + 1.0{1/psia}*state.P
    *(c1-c2*state.T+c3*state.T^2))^2;

  dydx[4]*state.V*F = 1.0{cm^3/g/s}
    *catalyst
    *(exp(k7 - kT8/state.T)*state.y['i_butane'] -
    exp(k5 - kT6/state.T)*state.y['nC5'] -
    exp(k3 - kT4/state.T)*state.y['nC5'])
    /(1.0 + 1.0{1/psia}*state.P
    *(c1-c2*state.T+c3*state.T^2))^2;

(*Initial parameter values, which also establish dimensionality of the reals.*)
  k1 := 7.3;
  kT2 := 10000{R};
  k3 := 7.1;
  kT4 := 11000{R};
  k5 := 9.9;
  kT6 := 8500{R};
  k7 := 10.7;
  kT8 := 10100{R};
  c1 := 0.63726;
  c2 := 0.0010452{1/R};
  c3 := 4.2182e-7{1/R^2};

(* initial variable values *)
  state.T := 980.0{R};
  state.P := 280.0{psia};
  state.y['H2'] := 0.50;
  state.y['ethane'] := 0.04;
  state.y['propane'] := 0.02;
  state.y['i_butane'] := 0.11;
  state.y['nC5'] := 0.33;
  state.y['CO2'] := 0.001;
  state.y['ethylene'] := 0.001;
  state.y['methane'] := 0.001;
  state.y['propylene'] := 0.001;
  state.y['propadiene'] := 0.001;

  catalyst := 10000.0{lbm};
  F := 800.0{lb_mole/hour};

  METHODS
  METHOD clear;
      RUN state.clear;
      catalyst.fixed := FALSE;
      F.fixed := FALSE;
      x.fixed := FALSE;
      y[1..n_var].fixed := FALSE;
      dydx[1..n_var].fixed := FALSE;
  END clear;
  METHOD specify;
      RUN state.specify;
      state.T.fixed := FALSE;
      state.H.fixed := TRUE;
      state.y[state.components].fixed := TRUE;
      state.y['H2'].fixed := FALSE;
      catalyst.fixed := TRUE;
      F.fixed := TRUE;
      x.fixed := TRUE;
      dydx[1..n_var].fixed := FALSE;
      dydx[5] := 0.0{BTU/lb_mole};
      dydx[5].fixed := TRUE;
  END specify;
  METHOD reset;
      RUN clear;
      RUN specify;
  END reset;

  METHOD parameters;
  (* initial parameter values *)
    k1 := 7.3;
    kT2 := 10000{R};
    k3 := 7.1;
    kT4 := 11000{R};
    k5 := 9.9;
    kT6 := 8500{R};
    k7 := 10.7;
    kT8 := 10100{R};
    c1 := 0.63726;
    c2 := 0.0010452{1/R};
    c3 := 4.2182e-7{1/R^2};
  END parameters;
  METHOD values;
  (* initial variable values *)
    state.T := 980.0{R};
    state.P := 280.0{psia};
    state.y['H2'] := 0.50;
    state.y['ethane'] := 0.04;
    state.y['propane'] := 0.02;
    state.y['i_butane'] := 0.11;
    state.y['nC5'] := 0.33;
    state.y['CO2'] := 0.001;
    state.y['ethylene'] := 0.001;
    state.y['methane'] := 0.001;
    state.y['propylene'] := 0.001;
    state.y['propadiene'] := 0.001;
  
    catalyst := 10000.0{lbm};
    F := 800.0{lb_mole/hour};
  END values;
END kinetics_2;

MODEL integration_2;

  nstep                               IS_A integer_constant;

  step[1..nstep]                      IS_A midpoint;
  initial, final                      IS_A derivatives;

  FOR i IN [1..nstep-1] CREATE              
    step[i].final, step[i+1].initial ARE_THE_SAME;
  END FOR;

  initial, step[1].initial ARE_THE_SAME;
  final, step[nstep].final ARE_THE_SAME;

  METHODS
  METHOD clear;
      RUN step[1..nstep].clear;
  END clear;
  METHOD specify;
      FOR i IN [1..nstep] DO
	RUN step[nstep - i + 1].specify;
      END FOR;
  END specify;

END integration_2;


(*
 * This is the entry point to the kinetic MODELs.
 * The very odd name midpoint_20 is historical.
 *)

MODEL midpoint_20 REFINES integration_2;

  n_var IS_A integer_constant;
  
  n_var :== 5;		(* problem dependent *)
  
  nstep :== 75;	(* problem dependent *)
  (* nstep :== 10; *)	(* problem dependent *)
  (* nstep :== 200; *)	(* problem dependent *)

END midpoint_20;


MODEL midpoint_20_real REFINES midpoint_20;

  n_models IS_A integer_constant;
  n_models :== 2*nstep;

  kd_model[0..n_models] IS_A kinetics_2;	(* add the data *)
    
  nm1, n_point IS_A integer_constant;
  n_point :== 2;				(* really 3, but from 0 to 2 *)
  nm1 :== n_point - 1;
  
  FOR i IN [1..nstep] CREATE
    FOR j IN [0..nm1] CREATE
      kd_model[j + n_point*(i-1)].deriv, step[i].eval[j] ARE_THE_SAME;
    END FOR;
  END FOR;
  kd_model[n_models].deriv, step[nstep].eval[n_point] ARE_THE_SAME;

  METHODS
  METHOD values;
      initial.x := 0.00;
      step[1..nstep].h := 0.125;
  END values;
  METHOD clear;
      RUN step[1..nstep].clear;
      RUN kd_model[0..n_models].clear;
  END clear;
  METHOD specify;
    (* get the basic process setup *)      
    RUN kd_model[0..n_models].specify;

    (* Now free all the derivs and states FOR all steps; make sure
     * that the independent var is x is also free. The step size h
     * must be fixed.
     *)
    step[1..nstep].eval[0..n_point].dydx[1..n_var].fixed := FALSE;
    step[1..nstep].eval[0..n_point].y[1..n_var].fixed := FALSE;
    step[1..nstep].eval[0..n_point].x.fixed := FALSE;
    step[1..nstep].h.fixed := TRUE;

    (* For the initial step, fix the state vars, but leave the
     * derivatives vars free.
     *)
    initial.dydx[1..n_var].fixed := FALSE;
    initial.y[1..n_var].fixed := TRUE;
    initial.x.fixed := TRUE;

    (* All OF the above is general FOR any problem. For this
     * problem there is some funky stuff happening with one OF
     * the states y[5]. We patch that here.
     *)
    kd_model[0..n_models].dydx[5].fixed := TRUE;
    kd_model[0].state.T.fixed := FALSE;
    kd_model[0].state.H.fixed := TRUE;
  END specify;
  METHOD reset;
      RUN clear;
      RUN specify;
  END reset;

END midpoint_20_real;

(* This is a valid MODEL to be executed stand
   alone. However we introduce a further level
   OF indirection so that can play with the
   values METHODs *)

MODEL Reactor_base REFINES midpoint_20_real;

  (* Since components and data are specified down
     IN the kinetics MODEL, we promote them here. *)
     
  components IS_A set OF symbol_constant;
  data[components] IS_A component_constants;

  components,
    feed.components ARE_THE_SAME;
  FOR i IN components CREATE
    data[i],
      feed.data[i] ARE_THE_SAME;
  END FOR;
  
  feed, product IS_A vapor_stream;
  feed.state, kd_model[0].state ARE_THE_SAME;
  product.state, kd_model[n_models].state ARE_THE_SAME;

  feed.Ftot, kd_model[0].F ARE_THE_SAME;
  product.Ftot, kd_model[n_models].F ARE_THE_SAME;

  METHODS
  METHOD values;
      feed.Ftot := 800.0{lb_mole/hour};
      feed.state.T := 980 {R};
      feed.state.P := 280.0 {psia};
      
      feed.state.y['H2'] := 0.50;	
      feed.state.y['ethane'] := 0.04;
      feed.state.y['propane'] := 0.02;
      feed.state.y['i_butane'] := 0.11;
      feed.state.y['nC5'] := 0.33;
      feed.state.y['CO2'] := 0.001;
      feed.state.y['ethylene'] := 0.001;
      feed.state.y['methane'] := 0.001;
      feed.state.y['propylene'] := 0.001;
      feed.state.y['propadiene'] := 0.001;

      (* We are given the concentration; However feed.reset
	  expects that we give flowrates OF the individual
	  species. We DO that conversion here. *)
      FOR i IN components DO
	feed.f[i] := feed.Ftot * feed.state.y[i];
      END FOR;

  END values;
    
END Reactor_base;


(* This MODEL assumes that the total flowrate
   will be set externally. The individual flows
   will be computed using the given concentrations
  and this external flow. *)

MODEL Reactor REFINES Reactor_base;

  METHODS
  METHOD values;
      feed.state.T := 980 {R};
      feed.state.P := 280.0 {psia};

      feed.state.y['H2'] := 0.50;	
      feed.state.y['ethane'] := 0.04;
      feed.state.y['propane'] := 0.02;
      feed.state.y['i_butane'] := 0.11;
      feed.state.y['nC5'] := 0.33;
      feed.state.y['CO2'] := 0.001;
      feed.state.y['ethylene'] := 0.001;
      feed.state.y['methane'] := 0.001;
      feed.state.y['propylene'] := 0.001;
      feed.state.y['propadiene'] := 0.001;

      (* We are given the concentration; However feed.reset
	 expects that we give flowrates OF the individual
	 species. We DO that conversion here. *)
      FOR i IN components DO
	feed.f[i] := feed.Ftot * feed.state.y[i];
      END FOR;

  END values;
  
END Reactor;

  
  
  
  
