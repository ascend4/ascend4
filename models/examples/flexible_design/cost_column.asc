(*********************************************************************\
                        cost_column.asc
                        by Robert S. Huss
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Use of this module is demonstrated by the associated script file

\*********************************************************************)

(*********************************************************************\
  $Date: 1997/02/20 18:55:06 $
  $Revision: 1.5 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/flexible_design/cost_column.asc,v $
\*********************************************************************)


(* REQUIRE collocation.lib *)

MODEL cost_calc;

	Afrac			IS_A real; (* fraction of area taken by tray *)

	Fp1,
	Fm1			IS_A real; (* material factors for column  p 574*)
	Fd2,
	Fp2,
	Fm2			IS_A real; (* material factors for exchangers p 572*)
	M_S			IS_A real;
	Tin			IS_A real; (* in temperature of cooling water *)
	Uc			IS_A real; (* heat transfer coefficient for condenser *)
	CpW			IS_A real; (* heat capacity of cooling water *)
	Hs			IS_A real; (* heat of vaporization of steam *)
	Cw			IS_A real; (* price of cooling water *)
	Cs			IS_A real; (* price of steam *)
	Tray_height		IS_A real; (* height of each tray *)
					   
					  
	cost			IS_A factor;
					   
	column_cost,
	condenser_cost,
	    condenser_min,
	    condenser_max,
	reboiler_cost,
	    reboiler_min,
	    reboiler_max,
	water_cost,
	    water_min,
	    water_max,
	steam_cost,
	    steam_min,
	    steam_max		IS_A cost_per_time;
	scale			IS_A scaling_constant;
	Area			IS_A area; (* total cross-sectional area of column *)
	V[1..nsections]		IS_A molar_rate; (* vapor molar flowrate *)
	V_bar[1..nsections]	IS_A molar_volume; (* vapor molar volume *)
	M_g			IS_A molar_mass; (*average molar mass of vapor *)
	D			IS_A distance; (* diameter of column *)
	H			IS_A distance; (* height of column *)
	pi			IS_A circle_constant;
	DT_C			IS_A temperature; (* change in cooling water temperature *)
	Ac,
	Ar,
	    Acmin,
	    Acmax,
	    Armin,
	    Armax		IS_A area; (* area of condenser and reboiler *)
	QC,
	QR			IS_A energy_rate; (* heat duty of condenser and reboiler *)
	Tc			IS_A temperature; (* temperature of condenser *)
	Tout 			IS_A temperature;
	Fc1			IS_A factor;
	Fc2			IS_A factor;
	nsections		IS_A integer_constant;
	Feedtot,
	    Feedmax,
	    Feedmin		IS_A molar_rate;
	F[1..nsections],
	    Fmax,
	    Fmin		IS_A factor; (* flooding factor *)
	LMT			IS_A factor; (* log mean temperature difference in condenser *)
	stot			IS_A factor; (* total number of trays in column *)
					   
	F[1..nsections] := 1.51{};
	Fmax		:= 2.5;
	Fmin		:= 0.75;
	
	Afrac := 0.88{};
	Fp1 := 1.0{};
	Fm1 := 1.0{};
	Fd2 := 1.0{};
	Fp2 := 0.0{};
	Fm2 := 1.0{};

	M_S := 900{USdollar};

	Tin := 459.67{R} + 70{R};
	Tout := 459.67{R} + 90{R};
	Uc := 100{BTU/hr/ft^2/R};
	CpW := 1{cal/mole/K};
	Hs := 933{BTU/lbm};
	Cw := 0.03{USdollar}/1000{gallon};
	Cs := 2.5{USdollar}/1000{lbm};
	Tray_height := 2.0{ft};
	

	V_bar[1..nsections] := 24{liter/mol};
	M_g := 70{g/mol};
	Tc := 350{K};
	QC := -30{kW};
	QR := 30{kW};

	FOR j IN [1..nsections] CREATE
	    Area = 1{ft^2}*V[j]*1{hr/lb_mole}
		*sqrt(M_g*1{lb_mole^2/lbm/ft^3}
		*V_bar[j])/Afrac/F[j]/3600;
	END;

	F[1]*Feedmin = Fmin*Feedtot;
	F[1]*Feedmax = Fmax*Feedtot;

	Acmin*F[1] = Fmin*Ac;
	Acmax*F[1] = Fmax*Ac;
	Armin*F[1] = Fmin*Ar;
	Armax*F[1] = Fmax*Ar;
	
	

	D = (4*Area/pi)^0.5;

	H = Tray_height*1.15*stot;

	Fc1 = Fm1*Fp1;
	Fc2 = (Fd2+Fp2)*Fm1;

	DT_C = (Tout - Tin);

	LMT = ln((Tc-Tin)/(Tc-Tout));
	Ac = -QC*LMT/((Tout-Tin)*Uc);
	Ar = QR/11250{BTU/hr/ft^2};
	Tout IS_REFINED_TO temperature;
	Tout = Tc - 5{K};	

	c1: column_cost = (M_S/280/3{yr})*(120*(D/1{ft})
	    *((H/1{ft})^0.8))*(2.18 + Fc1);
	c2: condenser_cost = (M_S/280/3{yr})*(101.3)
	    *(2.29+Fc2)*((Ac/1{ft^2})^0.65);
	c3: reboiler_cost = (M_S/280/3{yr})*(101.3)
	    *(2.29+Fc2)*((Ar/1{ft^2})^0.65);
	c4: water_cost =  Cw*(-QC)*1{ml/g}*18{g/mole}/(CpW*DT_C);
	c5: steam_cost = Cs*QR/Hs;

	condenser_min = (M_S/280/3{yr})*(101.3)*(2.29+Fc2)
	    *((Acmin/1{ft^2})^0.65);
	condenser_max = (M_S/280/3{yr})*(101.3)*(2.29+Fc2)
	    *((Acmax/1{ft^2})^0.65);
	reboiler_min = (M_S/280/3{yr})*(101.3)*(2.29+Fc2)
	    *((Armin/1{ft^2})^0.65);
	reboiler_max = (M_S/280/3{yr})*(101.3)*(2.29+Fc2)
	    *((Armax/1{ft^2})^0.65);
	water_min*F[1] = Fmin*water_cost;
	water_max*F[1] = Fmax*water_cost;
	steam_min*F[1] = Fmin*steam_cost;
	steam_max*F[1] = Fmax*steam_cost;
	
	


	c_tot1: cost*1.0{USdollar/yr} = column_cost
	    + condenser_cost + reboiler_cost
	    + water_cost + steam_cost;

	
   METHODS
     METHOD clear;
	cost.fixed		:= FALSE;
	column_cost.fixed	:= FALSE;
	condenser_cost.fixed	:= FALSE;
	reboiler_cost.fixed	:= FALSE;
	water_cost.fixed	:= FALSE;
	steam_cost.fixed	:= FALSE;
	Area.fixed		:= FALSE;
	V[1..nsections].fixed			:= FALSE;
	V_bar[1..nsections].fixed		:= FALSE;
	M_g.fixed		:= FALSE;
	D.fixed			:= FALSE;
	H.fixed			:= FALSE;
	DT_C.fixed		:= FALSE;
	QC.fixed		:= FALSE;
	QR.fixed		:= FALSE;
	F[1..nsections].fixed	:= FALSE;
	Fmax.fixed		:= FALSE;
	Fmin.fixed		:= FALSE;
	Feedtot.fixed		:= FALSE;
	Feedmin.fixed		:= FALSE;
	Feedmax.fixed		:= FALSE;
	Fc1.fixed		:= FALSE;
	Fc2.fixed		:= FALSE;
	Tc.fixed		:= FALSE;
	stot.fixed		:= FALSE;
	condenser_min.fixed		:= FALSE;
	condenser_max.fixed		:= FALSE;
	reboiler_min.fixed		:= FALSE;
	reboiler_max.fixed		:= FALSE;
	water_min.fixed		:= FALSE;
	water_max.fixed		:= FALSE;
	steam_min.fixed		:= FALSE;
	steam_max.fixed		:= FALSE;
	Acmin.fixed		:= FALSE;
	Acmax.fixed		:= FALSE;
	Armin.fixed		:= FALSE;
	Armax.fixed		:= FALSE;
     END clear;
     METHOD seqmod;
	F[1].fixed	 	:= TRUE;
	Fmin.fixed		:= TRUE;
	Fmax.fixed 		:= TRUE;
     END seqmod;
     METHOD specify;
	Tc.fixed := TRUE;
	M_g.fixed := TRUE;
	QC.fixed := TRUE;
	QR.fixed := TRUE;
	V[1..nsections].fixed := TRUE;
	V_bar[1..nsections].fixed := TRUE;
	stot.fixed := TRUE;
     END specify;
     METHOD reset;
	RUN clear;
	RUN specify;
     END reset;
     METHOD scale;
	RUN col.scale;
	column_cost.nominal := column_cost;
	condenser_cost.nominal := condenser_cost;
	condenser_min.nominal := condenser_min;
	condenser_max.nominal := condenser_max;
	reboiler_cost.nominal := reboiler_cost;
	reboiler_min.nominal := reboiler_min;
	reboiler_max.nominal := reboiler_max;
	water_cost.nominal := water_cost;
	water_min.nominal := water_min;
	water_max.nominal := water_max;
	steam_cost.nominal := steam_cost;
	steam_min.nominal := steam_min;
	steam_max.nominal := steam_max;

	column_cost.upper_bound := column_cost +
	    scale*column_cost.nominal;
	condenser_cost.upper_bound := condenser_cost +
	    scale*condenser_cost.nominal;
	condenser_min.upper_bound := condenser_min +
	    scale*condenser_min.nominal;
	condenser_max.upper_bound := condenser_max +
	    scale*condenser_max.nominal;
	reboiler_cost.upper_bound := reboiler_cost +
	    scale*reboiler_cost.nominal;
	reboiler_min.upper_bound := reboiler_min +
	    scale*reboiler_min.nominal;
	reboiler_max.upper_bound := reboiler_max +
	    scale*reboiler_max.nominal;
	water_cost.upper_bound := water_cost +
	    scale*water_cost.nominal;
	water_min.upper_bound := water_min + scale*water_min.nominal;
	water_max.upper_bound := water_max + scale*water_max.nominal;
	steam_cost.upper_bound := steam_cost +
	    scale*steam_cost.nominal;
	steam_min.upper_bound := steam_min + scale*steam_min.nominal;
	steam_max.upper_bound := steam_max + scale*steam_max.nominal;

	FOR j IN [1..nsections] DO
	    V[j].nominal := V[j];
	    V_bar[j].nominal := V_bar[j];
	    F[j].nominal := abs(F[j]);
	    F[j].lower_bound := F[j] - scale*F[j].nominal;
	    V[j].upper_bound := V[j] + scale*V[j];
	    V_bar[j].upper_bound := V_bar[j] + scale*V_bar[j];
	    F[j].upper_bound := F[j] + scale*F[j].nominal;
	END;
	
	    
	Area.nominal := Area;	
	M_g.nominal := M_g;
	D.nominal := D;
	H.nominal := H;
	DT_C.nominal := DT_C;
	Ac.nominal := Ac;
	Ar.nominal := Ar;
	Acmin.nominal := Acmin;
	Acmax.nominal := Acmax;
	Armin.nominal := Armin;
	Armax.nominal := Armax;
	QC.nominal := abs(QC);
	QR.nominal := abs(QR);
	Tc.nominal := Tc;
	Tout.nominal := Tout;
	Fc1.nominal := Fc1;
	Fc2.nominal := Fc2;

	Feedtot.nominal := Feedtot;
	Feedmax.nominal := Feedmax;
	Feedmin.nominal := Feedmin;
	Fmax.nominal := Fmax;
	Fmin.nominal := Fmin;
	LMT.nominal := LMT;
	stot.nominal := stot;
	
	Area.upper_bound := Area + scale*Area.nominal;	
	M_g.upper_bound := M_g + scale*M_g.nominal;
	D.upper_bound := D + scale*D.nominal;
	H.upper_bound := H + scale*H.nominal;
	DT_C.upper_bound := DT_C + scale*DT_C.nominal;
	Ac.upper_bound := Ac + scale*Ac.nominal;
	Ar.upper_bound := Ar + scale*Ar.nominal;
	Acmin.upper_bound := Acmin + scale*Acmin.nominal;
	Acmax.upper_bound := Acmax + scale*Acmax.nominal;
	Armin.upper_bound := Armin + scale*Armin.nominal;
	Armax.upper_bound := Armax + scale*Armax.nominal;
	QC.upper_bound := QC + scale*QC.nominal;
	QR.upper_bound := QR + scale*QR.nominal;
	Tc.upper_bound := Tc + scale*Tc.nominal;
	Tout.upper_bound := Tout + scale*Tout.nominal;
	Fc1.upper_bound := Fc1 + scale*Fc1.nominal;
	Fc2.upper_bound := Fc2 + scale*Fc2.nominal;

	Feedtot.upper_bound := Feedtot + scale*Feedtot.nominal;
	Feedmax.upper_bound := Feedmax + scale*Feedmax.nominal;
	Feedmin.upper_bound := Feedmin + scale*Feedmin.nominal;
	Fmax.upper_bound := Fmax + scale*Fmax.nominal;
	Fmin.upper_bound := Fmin + scale*Fmin.nominal;
	LMT.upper_bound := LMT + scale*LMT.nominal;
	stot.upper_bound := stot + scale*stot.nominal;
	
	

	QC.lower_bound := QC - scale*QC.nominal;
	QR.lower_bound := QR -scale*QR.nominal;

	Fmax.lower_bound := Fmax + scale*Fmax.nominal;
	Fmin.lower_bound := Fmin + scale*Fmin.nominal;
     END scale;
END cost_calc;

MODEL cost_column;

	cost_calc		IS_A cost_calc;
	col			IS_A td_coll_column;

	cost_calc.Tc,
	col.condenser.VLE.T	ARE_THE_SAME;
	cost_calc.QC,
	col.condenser.Qin	ARE_THE_SAME;
	cost_calc.QR,
	col.reboiler.Qin	ARE_THE_SAME;

	cost_calc.nsections :== col.nfeeds+1;
	

	FOR j IN [1..col.nfeeds+1] CREATE
	    cost_calc.V[j],
		col.coll_stack[j].coll[1].tray[1].vapout['vapor'].Ftot	ARE_THE_SAME;
	    cost_calc.V_bar[j],
		col.coll_stack[j].coll[1].tray[1].vapout['vapor'].state.V ARE_THE_SAME;
	END;
	
	    

	cost_calc.stot,
	col.stot		ARE_THE_SAME;

	cost_calc.M_g = SUM[col.feed_tray[1].data[i].mw
		*col.feed_tray[1].vapout['vapor'].state.y[i]
		| i IN col.components];
	cost_calc.Feedtot,
	    col.feed_tray[1].input['feed'].Ftot	ARE_THE_SAME;
	

  METHODS
     METHOD clear;
	RUN col.clear;
	RUN cost_calc.clear;
     END clear;
     METHOD seqmod;
	RUN col.seqmod;
	RUN cost_calc.seqmod;
     END seqmod;
     METHOD specify;
	 RUN seqmod;
	 RUN col.feed_tray[1..col.nfeeds].input['feed'].specify;
     END specify;
     METHOD reset;
	RUN clear;
	RUN specify;
     END reset;
END cost_column;

MODEL reflux_fit;
	npoints,
	    order		IS_A integer_constant;
	reflux[1..npoints],
	    stot[1..npoints],
	    frac[1..npoints],
	    R_hat[1..npoints],
	    error[1..npoints],
	    stot_coeff[1..npoints][0..order],
	    frac_coeff[0..order][0..order],
	    tot_error			IS_A factor;

	FOR i IN [1..npoints] CREATE
	    R_hat[i] = stot_coeff[i][0] +
		SUM[stot_coeff[i][k]*(PROD[stot[i] | m IN [1..k]])
		| k IN [1..order]];
	    FOR k IN [0..order] CREATE
		stot_coeff[i][k] = frac_coeff[k][0] +
		    SUM[frac_coeff[k][j]*(PROD[frac[i] | m IN [1..j]])
		    | j IN [1..order]];
	    END;
	    error[i] = 0.5*sqr(reflux[i] - R_hat[i]);
	END;

	tot_error = SUM[error[i] | i IN [1..npoints]];

	MINIMIZE tot_error;
	

  METHODS
    METHOD clear;
	reflux[1..npoints].fixed		:= FALSE;
	stot[1..npoints].fixed		:= FALSE;
	frac[1..npoints].fixed		:= FALSE;
	R_hat[1..npoints].fixed		:= FALSE;
	error[1..npoints].fixed		:= FALSE;
	stot_coeff[1..npoints][0..order].fixed		:= FALSE;
	frac_coeff[0..order][0..order].fixed		:= FALSE;
	tot_error.fixed		:= FALSE;
    END clear;
    METHOD specify;
	reflux[1..npoints].fixed	:= TRUE;
	stot[1..npoints].fixed		:= TRUE;
	frac[1..npoints].fixed		:= TRUE;
	frac_coeff[0..order][0..order].fixed	:= TRUE;
    END specify;
    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;
    METHOD free;
	frac_coeff[0..order][0..order].fixed		:= FALSE;
    END free;
    METHOD zero_error;
	error[1..9].fixed := TRUE;
	frac_coeff[0..order][0..order].fixed		:= FALSE;
	error[1..9] := 0.0;
    END zero_error;
    

	
END reflux_fit;

MODEL approximate_column;
	order		IS_A integer_constant;
	

	frac_coeff[0..order][0..order],
	    stot_coeff[0..order],
	    reflux_ratio,
	    calc_reflux_ratio,
	    stot,
	    s_stack[1..2]	IS_A factor;
	split[1..2]		IS_A fraction;

	cost			IS_A factor;

	column_cost,
	    condenser_cost,
	    reboiler_cost,
	    water_cost,
	    steam_cost		IS_A cost_per_time;
	
	Afrac,
	    M_S,
	    Tin,
	    Uc,
	    CpW,
	    Hs,
	    Cw,
	    Cs,
	    Tray_height,
	    Qc0,
	    Qr0,
	    V0			IS_A real;
	Area,
	    Ac,
	    Ar			IS_A area;
	Feed,
	    Distillate,
	    V			IS_A molar_rate;
	V_bar			IS_A molar_volume;
	M_g			IS_A molar_mass;
	D,
	    H			IS_A distance;
	pi			IS_A circle_constant;
	DT_C,
	    Tout		IS_A temperature;
	QC,
	    QR			IS_A energy_rate;
	Fc1,
	    Fc2,
	    F,
	    LMT			IS_A factor;
	D_F			IS_A fraction;
	
	
	F := 1.51 {};
	Afrac := 0.88{};
	M_S := 900{USdollar};
	Tin := 459.67{R} + 70{R};
	Tout := 459.67{R} + 90{R};
	Uc := 100{BTU/hr/ft^2/R};
	CpW := 1{cal/mole/K};
	Hs := 933{BTU/lbm};
	Cw := 0.03{USdollar}/1000{gallon};
	Cs := 2.5{USdollar}/1000{lbm};
	Tray_height := 2.0{ft};
	

	V_bar := 24{liter/mol};
	M_g := 70{g/mol};
	QC := -30{kW};
	QR := 30{kW};
	Qc0 := -30{kW};
	Qr0 := 30{kW};
	V0 := 3{mol/s};
	
	

	Area = 1{ft^2}*V*1{hr/lb_mole}
	    *sqrt(M_g*1{lb_mole^2/lbm/ft^3}
	    *V_bar)/Afrac/F/3600;
	D = (4*Area/pi)^0.5;
	H = Tray_height*1.15*stot;
	QC = V*Qc0/V0;
	QR = V*Qr0/V0;
	
	Ac = -QC*LMT/((Tout-Tin)*Uc);
	Ar = QR/11250{BTU/hr/ft^2};
	V = Distillate*(reflux_ratio+1);
	Distillate = D_F*Feed;
	
	
	

	c1: column_cost =
	    (M_S/280/3{yr})*120*(D/1{ft})*(H/1{ft})^0.8*(2.18+Fc1);
	c2: condenser_cost =
	    (M_S/280/3{yr})*(101.3)*(2.29+Fc2)*(Ac/1{ft^2})^0.65;
	c3: reboiler_cost = (M_S/280/3{yr})*(101.3)
	    *(2.29+Fc2)*((Ar/1{ft^2})^0.65);
	c4: water_cost =  Cw*(-QC)*1{ml/g}*18{g/mole}/(CpW*DT_C);
	c5: steam_cost = Cs*QR/Hs;

	cost*1.0{USdollar/yr} = column_cost
	    + condenser_cost + reboiler_cost +
	     water_cost + steam_cost;
	
	calc_reflux_ratio = stot_coeff[0] +
	     SUM[stot_coeff[k]*(PROD[stot | i IN [1..k]])
	    | k IN [1..order]];

	FOR k IN [0..order] CREATE
	    stot_coeff[k] = frac_coeff[k][0] + SUM[frac_coeff[k][j]
		*(PROD[split[1] | i IN [1..j]])
		| j IN [1..order]];
	END;

	stot = SUM[s_stack[i] | i IN [1..2]];

	FOR i IN [1..2] CREATE
	    stot*split[i] = s_stack[i];
	END;

	equal: reflux_ratio = calc_reflux_ratio;
	inequal: calc_reflux_ratio <= reflux_ratio;
	


	
	
(*	test_opt: MINIMIZE cost; *)
				 

	
	frac_coeff[0..order][0..order].lower_bound := -1e6;
	stot_coeff[0..order].lower_bound := -1e6;
	reflux_ratio.lower_bound 	:= 0.1;
	calc_reflux_ratio.lower_bound 	:= 0.1;
	stot.lower_bound 		:= 1;
	split[1..2].lower_bound 	:= 0.1;
	s_stack[1..2].lower_bound 	:= 1;
	cost.lower_bound		:= 0.0;
	column_cost.lower_bound		:= 0.0{USdollar/yr};
	condenser_cost.lower_bound	:= 0.0{USdollar/yr};
	reboiler_cost.lower_bound	:= 0.0{USdollar/yr};
	water_cost.lower_bound		:= 0.0{USdollar/yr};
	steam_cost.lower_bound		:= 0.0{USdollar/yr};
	Area.lower_bound		:= 0.0001{ft^2};
	V.lower_bound			:= 0.0{mol/s};
	V_bar.lower_bound		:= 0.0{liter/mol};
	M_g.lower_bound			:= 0.0{g/mol};
	D.lower_bound			:= 1.0{ft};
	H.lower_bound			:= 4.0{ft};
	DT_C.lower_bound		:= 0.0{R};
	QC.lower_bound			:= -10000{kW};
	QR.lower_bound			:= -10000{kW};
	F.lower_bound			:= 0.2;
	D_F.lower_bound			:= 0.01;
	Distillate.lower_bound		:= 0.0{mol/s};
	Feed.lower_bound		:= 0.0{mol/s};
	Fc1.lower_bound			:= 0.0;
	Fc2.lower_bound			:= 0.0;
 		
	frac_coeff[0..order][0..order].upper_bound := 1e6;
	stot_coeff[0..order].upper_bound := 1e6;
	reflux_ratio.upper_bound 	:= 40.0;
	calc_reflux_ratio.upper_bound 	:= 40.0;
	stot.upper_bound 		:= 100.0;
	split[1..2].upper_bound 	:= 0.9;
	s_stack[1..2].upper_bound 	:= 100.0;
	cost.upper_bound		:= 1e9;
	column_cost.upper_bound		:= 1e9{USdollar/yr};
	condenser_cost.upper_bound	:= 1e9{USdollar/yr};
	reboiler_cost.upper_bound	:= 1e9{USdollar/yr};
	water_cost.upper_bound		:= 1e9{USdollar/yr};
	steam_cost.upper_bound		:= 1e9{USdollar/yr};
	Area.upper_bound		:= 1e9{ft^2};
	V.upper_bound			:= 1e9{mol/s};
	V_bar.upper_bound		:= 500{liter/mol};
	M_g.upper_bound			:= 500{g/mol};
	D.upper_bound			:= 50.0{ft};
	H.upper_bound			:= 200.0{ft};
	DT_C.upper_bound		:= 300.0{R};
	QC.upper_bound			:= 10000{kW};
	QR.upper_bound			:= 10000{kW};
	F.upper_bound			:= 2.4;
	D_F.upper_bound			:= 0.99;
	Distillate.upper_bound		:= 1e9{mol/s};
	Feed.upper_bound		:= 1e9{mol/s};
	Fc1.upper_bound			:= 2.4;
	Fc2.upper_bound			:= 2.40;
 	
  METHODS
    
    METHOD clear;
	frac_coeff[0..order][0..order].fixed := FALSE;
	stot_coeff[0..order].fixed := FALSE;
	reflux_ratio.fixed := FALSE;
	stot.fixed := FALSE;
	split[1..2].fixed := FALSE;
	s_stack[1..2].fixed := FALSE;
	cost.fixed		:= FALSE;
	column_cost.fixed	:= FALSE;
	condenser_cost.fixed	:= FALSE;
	reboiler_cost.fixed	:= FALSE;
	water_cost.fixed	:= FALSE;
	steam_cost.fixed	:= FALSE;
	Area.fixed		:= FALSE;
	V.fixed			:= FALSE;
	V_bar.fixed		:= FALSE;
	M_g.fixed		:= FALSE;
	D.fixed			:= FALSE;
	H.fixed			:= FALSE;
	DT_C.fixed		:= FALSE;
	QC.fixed		:= FALSE;
	QR.fixed		:= FALSE;
	F.fixed			:= FALSE;
	D_F.fixed		:= FALSE;
	Distillate.fixed	:= FALSE;
	Feed.fixed		:= FALSE;
	Fc1.fixed		:= FALSE;
	Fc2.fixed		:= FALSE;
	Tout.fixed		:= FALSE;
	LMT.fixed		:= FALSE;
	inequal.included	:= TRUE;
	equal.included		:= TRUE;
    END clear;
    METHOD seqmod;
	frac_coeff[0..order][0..order].fixed := TRUE;
	inequal.included := FALSE;
    END seqmod;
    
    METHOD specify;
	RUN seqmod;
	stot.fixed 		:= TRUE;
	split[1].fixed		:= TRUE;
	V_bar.fixed		:= TRUE;
	M_g.fixed		:= TRUE;
	DT_C.fixed		:= TRUE;
	F.fixed			:= TRUE;
	D_F.fixed		:= TRUE;
	Feed.fixed		:= TRUE;
	Fc1.fixed		:= TRUE;
	Fc2.fixed		:= TRUE;
	Tout.fixed		:= TRUE;
	LMT.fixed		:= TRUE;
    END specify;
    
    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;
END approximate_column;


MODEL opt_column REFINES cost_column;



	opt1: MINIMIZE cost_calc.cost;

   METHODS

      METHOD free;
	col.condenser.reflux_ratio.fixed := FALSE;
	col.condenser.totprod.Ftot.fixed := FALSE;
	col.s_stack[1..2].fixed := FALSE;
      END free;
END opt_column;

MODEL apcol_set;
	nfeed_points		IS_A integer_constant;
	apcol[1..nfeed_points]	IS_A approximate_column;
	prob[1..nfeed_points]	IS_A fraction;
	apcol[1..nfeed_points].order :== 2;
	cost,
	    min_d,
	    max_d		IS_A factor;
	column_cost,
	    condenser_cost,
	    reboiler_cost,
	    water_cost,
	    steam_cost		IS_A cost_per_time;
	
	SUM[prob[j] | j IN [1..nfeed_points]] = 1;

	column_cost, apcol[1].column_cost	ARE_THE_SAME;
	water_cost = SUM[prob[j]*apcol[j].water_cost | j IN
	    [1..nfeed_points]];
	steam_cost = SUM[prob[j]*apcol[j].steam_cost | j IN
	    [1..nfeed_points]];

	con_equal: condenser_cost =
	    SUM[prob[j]*apcol[j].condenser_cost | j IN
	    [1..nfeed_points]];
	reb_equal: reboiler_cost =
	    SUM[prob[j]*apcol[j].reboiler_cost | j IN
	    [1..nfeed_points]];

	FOR j IN [1..nfeed_points] CREATE
	    con_inequal[j]: apcol[j].condenser_cost <= condenser_cost;
	    reb_inequal[j]: apcol[j].reboiler_cost <= reboiler_cost;
	END;
	
	cost*1.0{USdollar/yr} = column_cost + condenser_cost +
	    reboiler_cost + water_cost + steam_cost;
	

	FOR j IN [1..nfeed_points] CREATE
	    prob[j] := 1.0/nfeed_points;
	END;

	apcol[1..nfeed_points].stot	ARE_THE_SAME;
	apcol[1..nfeed_points].D	ARE_THE_SAME;
	
	MINIMIZE cost;

  METHODS
    METHOD bounds;
	FOR j IN [1..nfeed_points] DO
	    apcol[j].stot.lower_bound := min_d*apcol[j].stot;
	    apcol[j].split[1].lower_bound := min_d*apcol[j].split[1];
	    apcol[j].stot.upper_bound := max_d*apcol[j].stot;
	    apcol[j].split[1].upper_bound := max_d*apcol[j].split[1];
	END;
    END bounds;
    METHOD F_bounds_on;
	apcol[1..nfeed_points].F.lower_bound := 0.8;
	apcol[1..nfeed_points].F.upper_bound := 2.4;
    END F_bounds_on;
    METHOD F_bounds_off;
	apcol[1..nfeed_points].F.lower_bound := 0.0;
	apcol[1..nfeed_points].F.upper_bound := 20;
    END F_bounds_off;
    METHOD clear;
	RUN apcol[1..nfeed_points].clear;
	prob[1..nfeed_points].fixed := FALSE;
	cost.fixed := FALSE;
	min_d.fixed := FALSE;
	max_d.fixed := FALSE;
	column_cost.fixed := FALSE;
	condenser_cost.fixed := FALSE;
	reboiler_cost.fixed := FALSE;
	water_cost.fixed := FALSE;
	steam_cost.fixed := FALSE;
	con_equal.included := TRUE;
	reb_equal.included := TRUE;
	con_inequal[1..nfeed_points].included := TRUE;
	reb_inequal[1..nfeed_points].included := TRUE;
    END clear;
    METHOD seqmod;
	RUN apcol[1..nfeed_points].seqmod;
	prob[2..nfeed_points].fixed := TRUE;
	apcol[2..nfeed_points].F.fixed := FALSE;
	con_inequal[1..nfeed_points].included := FALSE;
	reb_inequal[1..nfeed_points].included := FALSE;
    END seqmod;
    METHOD specify;
	RUN apcol[1..nfeed_points].specify;
	prob[2..nfeed_points].fixed := TRUE;
	apcol[2..nfeed_points].F.fixed := FALSE;
	con_inequal[1..nfeed_points].included := FALSE;
	reb_inequal[1..nfeed_points].included := FALSE;
    END specify;
    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;
    METHOD free;
	RUN reset;
	apcol[1].stot.fixed := FALSE;
	apcol[1].F.fixed := FALSE;
	apcol[1..nfeed_points].split[1..2].fixed := FALSE;
	apcol[1..nfeed_points].equal.included := FALSE;
	apcol[1..nfeed_points].inequal.included := TRUE;
	con_equal.included := FALSE;
	reb_equal.included := FALSE;
	con_inequal[1..nfeed_points].included := TRUE;
	reb_inequal[1..nfeed_points].included := TRUE;
    END free;
    
END apcol_set;

    
	
	

MODEL standard_cost REFINES column_w_plot;

	
	nfeed_points		IS_A integer_constant;
	current_col		IS_A integer_constant;
	feed[1..nfeed_points]	IS_A molar_stream;
	col_set			IS_A apcol_set;
	col_fit[1..nfeed_points]	IS_A reflux_fit;

	col_fit[1..nfeed_points].order,
	    col_set.apcol[1].order	ARE_THE_SAME;

	FOR k IN [1..nfeed_points] CREATE
	    FOR i IN [0..col_fit[1].order] CREATE
		FOR j IN [0..col_fit[1].order] CREATE
		    col_fit[k].frac_coeff[i][j],
			col_set.apcol[k].frac_coeff[i][j]	ARE_THE_SAME;
		END;
	    END;
	END;


	current_col :== 1;
	col_fit[1..nfeed_points].npoints :== 9;
	
	
	col_set.nfeed_points,
	    nfeed_points	ARE_THE_SAME;
	
	cc	IS_A cost_column;

	feed[1..nfeed_points].components,
	    components		ARE_THE_SAME;
	

	cc.col,
	col	ARE_THE_SAME;

	col.nfeeds :== 1;
	col.coll_stack[1..2].ncolls :== 2;

	col.coll_stack[1..2].coll[1].z_set.up_down := -1.0;
	col.coll_stack[1..2].coll[2].z_set.up_down := 1.0;

	col.coll_stack[1..col.nfeeds+1].coll
	 [1..col.coll_stack[1].ncolls].z_set.lgr IS_REFINED_TO lgr_2_points;

	col IS_REFINED_TO td_coll_column;
	col.coll_stack[1..2].coll[1..2] IS_REFINED_TO h_coll;

	cc.cost_calc.Afrac,
	    col_set.apcol[1..nfeed_points].Afrac		ARE_THE_SAME;
	cc.cost_calc.M_S,
	    col_set.apcol[1..nfeed_points].M_S		ARE_THE_SAME;
	cc.cost_calc.Fc1,
	    col_set.apcol[1..nfeed_points].Fc1		ARE_THE_SAME;
	cc.cost_calc.Fc2,
	    col_set.apcol[1..nfeed_points].Fc2		ARE_THE_SAME;
	cc.cost_calc.Cw,
	    col_set.apcol[1..nfeed_points].Cw		ARE_THE_SAME;
	cc.cost_calc.CpW,
	    col_set.apcol[1..nfeed_points].CpW		ARE_THE_SAME;
	cc.cost_calc.Cs,
	    col_set.apcol[1..nfeed_points].Cs		ARE_THE_SAME;
	cc.cost_calc.Hs,
	    col_set.apcol[1..nfeed_points].Hs		ARE_THE_SAME;
	cc.cost_calc.V_bar[1],
	    col_set.apcol[1..nfeed_points].V_bar		ARE_THE_SAME;
	cc.cost_calc.Tray_height,
	    col_set.apcol[1..nfeed_points].Tray_height		ARE_THE_SAME;
	cc.cost_calc.Uc,
	    col_set.apcol[1..nfeed_points].Uc		ARE_THE_SAME;





  METHODS
     METHOD clear;
	RUN col_set.clear;
	RUN col.clear;
	RUN plots.clear;
	RUN feed[1..nfeed_points].clear;
     END clear;
     METHOD seqmod;
	plots.z_space.fixed := TRUE;
	plots.box_height.fixed := TRUE;
	RUN cc.seqmod;
	RUN col_set.seqmod;
	RUN feed[1..nfeed_points].specify;
     END seqmod;
     METHOD specify;
	 RUN seqmod;
	 RUN col.feed_tray[1..col.nfeeds].input['feed'].specify;
     END specify;
     METHOD spec1;
	 RUN reset;
	 col.stot.fixed := TRUE;
	 col.split[1].fixed := TRUE;
	 col.s_stack[1..2].fixed := FALSE;
     END spec1;
     
     METHOD values;
	col.feed_tray[1].alpha['c1'] := 1.5;
	col.feed_tray[1].alpha['c2'] := 1.2;
	col.feed_tray[1].alpha['c3'] := 1.0;
	RUN col.propogate_feed;
	FOR j IN [1..2] DO
		col.coll_stack[j].split[1] := 0.5;
		col.coll_stack[j].stot := 7;
		col.coll_stack[j].coll[1].z_set.stot := 3;
		col.coll_stack[j].coll[1..col.coll_stack[1].ncolls].z_set.a := 0.1;
	END;
	col.feed_tray[1].input['feed'].f[col.components] := 3{mol/s};
	col.feed_tray[1].q := 1.0;
	col.condenser.prodsplit['vapor_product'] := 0.0;
	col.reboiler.prodsplit['vapor_product'] := 0.0;
	col.condenser.totprod.Ftot := 3{mol/s};
	col.condenser.reflux_ratio := 2.0;
   END values;
   METHOD setapcol;
       col_set.apcol[current_col].Qc0 := col.condenser.Qin;
       col_set.apcol[current_col].Qr0 := col.reboiler.Qin;
       col_set.apcol[current_col].V0 := col.condenser.input['vapor'].Ftot;
       col_set.apcol[current_col].D_F :=
	   col.condenser.totprod.Ftot/col.feed_tray[1].input['feed'].Ftot;
       col_set.apcol[current_col].F := cc.cost_calc.F[1];
       col_set.apcol[current_col].DT_C := cc.cost_calc.DT_C;
       col_set.apcol[current_col].M_g := cc.cost_calc.M_g;
       col_set.apcol[current_col].LMT := cc.cost_calc.LMT;
       col_set.apcol[current_col].Tout := cc.cost_calc.Tout;
       col_set.apcol[current_col].Tin := cc.cost_calc.Tin;
       col_set.apcol[current_col].Feed := cc.cost_calc.Feedtot;
       col_set.apcol[current_col].stot := col.stot;
       col_set.apcol[current_col].split[1] := col.split[1];
   END setapcol;
   METHOD setfeed;
       FOR i IN components DO
	   col.feed_tray[1].input['feed'].f[i] :=
	       feed[current_col].f[i];
       END;
   END setfeed;
   METHOD setup_opt;
       RUN col_set.bounds;
       RUN col_set.F_bounds_on;
       FOR j IN [1..nfeed_points] DO
	   FOR k IN [1..3] DO
	       IF (col_fit[j].stot[k] > col_set.apcol[j].stot.lower_bound) THEN
		   col_set.apcol[j].stot.lower_bound :=
		       col_fit[j].stot[k];
	       END;
	   END;
	   FOR k IN [7..9] DO
	       IF (col_fit[j].stot[k] < col_set.apcol[j].stot.upper_bound) THEN
		   col_set.apcol[j].stot.upper_bound :=
		       col_fit[j].stot[k];
	       END;
	   END;
	   FOR k IN [1,4,7] DO
	       IF (col_fit[j].frac[k] < col_set.apcol[j].split[1].upper_bound) THEN
		   col_set.apcol[j].split[1].upper_bound :=
		       col_fit[j].frac[k];
	       END;
	   END;
	   FOR k IN [3,6,9] DO
	       IF (col_fit[j].frac[k] > col_set.apcol[j].split[1].lower_bound) THEN
		   col_set.apcol[j].split[1].lower_bound :=
		       col_fit[j].frac[k];
	       END;
	   END;
       END;
   END setup_opt;

END standard_cost;
