REQUIRE  "atoms.a4l";
(*********************************************************************\
                        optimization.asc
                        by Joseph J. Zaher
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

This module <does>
Use of this module is demonstrated by the associated script file
optimization.s.
\*********************************************************************)

(*********************************************************************\
  $Date: 1998/04/26 23:42:53 $
  $Revision: 1.6 $
  $Author: ballan $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/optimization.asc,v $
\*********************************************************************)
(**
 ***
 ***  O P T I M I Z A T I O N . A S C
 ***
 ***  Some problems to test the workings of the new internal
 ***  solver.
 ***
 ***  Joseph J. Zaher
 ***
 **)


(* REQUIRE atoms.lib *)

MODEL lew;

    a, b                                IS_A factor;

    MINIMIZE a^2 + b^2 - 1.0;

    a*(b + 1) = 1.0;

    METHODS

METHOD default_self;
END default_self;
METHOD specify;
END specify;

END lew;

MODEL opt;

    x0, x1, x2, x3, x4, x5, x6, x7      IS_A factor;

    MINIMIZE 0.7*sqr(x0) + 0.25*sqr(x2) + 0.25*sqr(x5) + 0.3*sqr(x7);

    0.2*sqr(x4) - x2 + x0 = -1.0;
    0.2*sqr(x5) + x3 - x1 = 1.0;
    -x4 + x2 = -1.0;
    x5 - x3 = 1.0;
    -x6 + x4 = -1.0;
    x7 - x5 = 1.0;

    METHODS
METHOD default_self;
END default_self;
        METHOD specify;
        END specify;

END opt;

MODEL sonic_flow;

    gamma, fanning, M1                  IS_A factor_constant;
    L                                   IS_A length_parameter;
    mw                                  IS_A molar_weight_constant;
    T0                                  IS_A temperature_constant;  
    P0                                  IS_A pressure_constant;
    D                                   IS_A distance;
    F                                   IS_A molar_rate;
    M0                                  IS_A factor;
    P1                                  IS_A pressure;
    T1                                  IS_A temperature;
    U0, U1                              IS_A speed;
    term                                IS_A factor;

    MAXIMIZE  0.01{USdollar/g}*mw*F - 0.425{USdollar/s}*(D/1.0{cm})^2.5;

    U0*(1{PI}*sqr(D)/4)*P0/1{GAS_C}/T0 = F;
    sqr(M0)*(1.0 + 0.146*sqr(M1))*exp(term) = sqr(M1)*(1.0 + 0.146*sqr(M0));
    U1*(1{PI}*sqr(D)/4)*P1/1{GAS_C}/T1 = F;
    (T1/T0)*(1.0 + 0.146*sqr(M1)) = 1.0 + 0.146*sqr(M0);
    U0 = M0*sqrt(gamma*1{GAS_C}*T0/mw);
    U1 = M1*sqrt(gamma*1{GAS_C}*T1/mw);
    (sqr(M1)-sqr(M0))*D/L - 4.0*gamma*fanning*sqr(M0*M1) = 
        1.146*term*sqr(M0*M1)*D/L;

    gamma :== 1.292;
    fanning :== 0.0001;
    mw :== 16.0{g/g_mole};
    M1 :== 1.0;
    T0 :== 300.0{K};
    P0 :== 10.0{atm};

    METHODS
METHOD default_self;
    L := 100.0{m};
            D := 5.0{cm};
            F := 200.0{g_mole/s};
            F.nominal := 100.0{g_mole/s};
            P1 := 5.0{atm};
            U0 := 500.0{m/s};
            U0.nominal := 100.0{m/s};
            U1 := 500.0{m/s};
            U1.nominal := 100.0{m/s};
            M0 := 0.5;
            T1 := 300.0{K};
            T1.nominal := 100.0{K};
            term := 0.00;
END default_self;
        METHOD specify;
        END specify;
END sonic_flow;

MODEL find_Y;

    Y1, Y21, Y22, Y3                    IS_A factor;
    c11, c12, c21, c22, c23, c31, c32   IS_A factor;
    q0, q1, q2, q3                      IS_A factor;
    u1, u21, u22, u3                    IS_A factor;

    MINIMIZE q0;

    sqr(c11) + sqr(c12) = 1.0;
    Y1 = c11 - c12 + 2*u1;
    5.0*sqr(c21) + 2.0*sqr(c21 + u21) + 0.8*u21 + sqr(c21 + c23) = 8.0;
    Y21 = c21 - c22 + u21 - 3*u22;
    Y22 = 2.0*c22 - c23 - u21 + u22;     
    c31 + u3 + 0.5 = 0.0;
    Y3 = c31 + 2.5*c32 - 4.0*u3;

    q0 = q1 + q2 + q3;
    q1 = (u1 - 1.0)^4 + 5.0*sqr(c11 + c12 - 2.0);
    q2 = 2.0*sqr(c21-2.0) + sqr(c22) + 3.0*sqr(c23) + 4.0*sqr(u21) + sqr(u22);
    q3 = sqr(c31 + 1) + sqr(u3 -1) + 2.5*sqr(c32);

    u1 = Y21;
    u21 = Y1;
    u22 = Y3;
    u3 = Y22;

    METHODS
        METHOD specify;
        END specify;
METHOD default_self;
END default_self;

END find_Y;







