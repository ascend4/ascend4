(*********************************************************************\
                        stream_tests.asc
                        by Robert S. Huss
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Use of this module is demonstrated by the associated script file
stream_tests.s.
\*********************************************************************)

(*********************************************************************\
  $Date: 1997/02/20 18:54:27 $
  $Revision: 1.6 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/stream_tests.asc,v $
\*********************************************************************)
(*

	stream_tests.asc by Robert S. Huss

	This file contains examples for the stream models found
	in stream.lib  They can be used as templates for stream models.

	A script to run these examples can be found in stream_tests.s

	The models in this file require the following files:

	system.lib
	atoms.lib
	components.lib
	H_S_thermodynamics.lib or H_G_thermodynamics.lib
	stream.lib

*)


(* REQUIRE stream.lib *)



MODEL test;
	stream	IS_A molar_stream;
	
	stream.components :== ['a','b','c'];

   METHODS
     METHOD clear;
	RUN stream.clear;
     END clear;
     METHOD seqmod;
	RUN stream.seqmod;
     END seqmod;
     METHOD specify;
	RUN stream.specify;
     END specify;
     METHOD reset;
	RUN stream.reset;
     END reset;
     METHOD scale;
	RUN stream.scale;
     END scale;
     METHOD values;
	stream.f['a'] := 3{mol/s};
	stream.f['b'] := 3{mol/s};
	stream.f['c'] := 3{mol/s};
     END values;
	
END test;


MODEL td_test REFINES test;

	stream IS_REFINED_TO td_stream;

	stream.data['a'] IS_REFINED_TO acetone;
	stream.data['b'] IS_REFINED_TO chloroform;
	stream.data['c'] IS_REFINED_TO benzene;
END td_test;


MODEL vl_test REFINES td_test;

	stream IS_REFINED_TO vapor_liquid_stream;
   METHODS
     METHOD values;
	stream.f['a'] := 3{mol/s};
	stream.f['b'] := 3{mol/s};
	stream.f['c'] := 3{mol/s};
	stream.state.alpha['vapor']['a'] := 1.5;
	stream.state.alpha['vapor']['b'] := 1.2;
	stream.state.alpha['vapor']['c'] := 1.0;
     END values;
END vl_test;



MODEL vl_test2;

	stream.components :== ['a','b','c'];
	stream IS_A vapor_liquid_stream;
	stream.data['a'] IS_REFINED_TO acetone;
	stream.data['b'] IS_REFINED_TO chloroform;
	stream.data['c'] IS_REFINED_TO benzene;

   METHODS
     METHOD values;
	stream.f['a'] := 3{mol/s};
	stream.f['b'] := 3{mol/s};
	stream.f['c'] := 3{mol/s};
	stream.state.alpha['vapor']['a'] := 1.5;
	stream.state.alpha['vapor']['b'] := 1.2;
	stream.state.alpha['vapor']['c'] := 1.0;
     END values;
END vl_test2;


MODEL final_vl REFINES vl_test;

	stream.state IS_REFINED_TO equilibrium_mixture;

	stream.state.mix['liquid'] IS_REFINED_TO UNIFAC_mixture;
	stream.state.mix['vapor'] IS_REFINED_TO Pitzer_mixture;
END final_vl;




