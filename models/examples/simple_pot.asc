(*********************************************************************\
                        isom.asc
                        by Boyd T. Safrit
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Use of this module is demonstrated by the associated script file
simple_pot.s.
\*********************************************************************)

(*********************************************************************\
  $Date: 1997/07/03 14:51:58 $
  $Revision: 1.8 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/simple_pot.asc,v $
\*********************************************************************)

(*==========================================================================*
       

        S I M P L E _ P O T .  A  S  C
        ------------------------------

        05/93


 *==========================================================================*)

(*
Boyd T. Safrit
May 5, 1993

This file contains the models necessary to model the dynamics of a
multicomponent still pot using the Antoine vapor pressures to calculate
the volativites of each of the components in the mixture.

ASSUMPTIONS:  This model assumes the following models exist:
		atoms.lib
		simple_fs.asc

SCRIPT FILE:  A script file, called simple_pot.s, exists that enables
	the user to quickly initialize the models and solve them properly.

MODELS DEFINED:  These models can be broken down mainly into 2 parts:
	still pot  definition, and integration definition.
	MODEL				PURPOSE
        ------------------		----------------------------------
	derivatives			Define the general derivatives model.
	lsode				Define the LSODE integrator interface.
	molar_hold_up			Define the hold_up, amount of liquid left
					in the pot.
	simple_pot			Define the pot, its product streams, and
					thermodynamics.
	pot_dynamics			Sets up interface between the LSODE integration
					and the ASCEND models.
	boiling_pot			Sets up the parameters necessary for the 
					integration and gives the values of variables
					that are specific to the particular problem
					the user is trying to solve.
*)


(* REQUIRE lsode.lib *)
(* REQUIRE plot.lib *)
(* REQUIRE atoms.lib *)

(* *************************************+************************************** *)
(* **************************       mixture        **************************** *)
(* *************************************+************************************** *)
MODEL mixture;

        components	                IS_A set OF symbol_constant;
	choice_component		IS_A symbol_constant;
        y[components]                 	IS_A fraction;
	nc				IS_A integer_constant;

        SUM[y[i] | i IN components] = 1.0;

  METHODS
    METHOD clear_mixture;
        y[components].fixed := FALSE;
    END clear_mixture;

    METHOD specify_mixture;
        y[components].fixed := TRUE;
        y[components].fixed := FALSE;
    END specify_mixture;

    METHOD reset_mixture;
        RUN clear_mixture;
        RUN specify_mixture;
    END reset_mixture;

END mixture;

MODEL test_mixture REFINES mixture;

	components :== ['a','b','c'];
	choice_component :== 'a';
	nc :== 3;
END test_mixture;

(* *************************************+************************************** *)
(* **************************    molar_stream      **************************** *)
(* *************************************+************************************** *)
MODEL molar_stream;

        components		                IS_A set OF symbol_constant;
	choice_component			IS_A symbol_constant;
        state                                   IS_A mixture;
        Ftot, f[components]                     IS_A molar_rate;
	nc					IS_A integer_constant;

	choice_component, state.choice_component	ARE_THE_SAME;
	nc, state.nc				ARE_THE_SAME;
        
	components, state.components           ARE_THE_SAME;

        FOR i IN components CREATE
            f_def[i]: f[i] = Ftot*state.y[i];
        END FOR;

  METHODS

    METHOD clear_molar_stream;
        RUN state.clear_mixture;
        Ftot.fixed                              := FALSE;
        f[components].fixed                     := FALSE;
    END clear_molar_stream;

    METHOD seqmod_molar_stream;
        RUN state.specify_mixture;
        state.y[components].fixed               := FALSE;
    END seqmod_molar_stream;

    METHOD specify_molar_stream;
        RUN seqmod_molar_stream;
        f[components].fixed                     := TRUE;
    END specify_molar_stream;

    METHOD reset_molar_stream;
        RUN clear_molar_stream;
        RUN specify_molar_stream;
    END reset_molar_stream;

    METHOD scale_molar_stream;
        FOR i IN components DO
          f[i].nominal := f[i] + 0.1{mol/s};
        END FOR;
        Ftot.nominal := Ftot + 0.1{mol/s};
    END scale_molar_stream;

END molar_stream;

MODEL test_molar_stream REFINES mixture;

	components :== ['a','b','c'];
	choice_component :== 'a';
	nc :== 3;

END test_molar_stream;

(* *************************************+************************************** *)
(* **************************    molar_hold_up     **************************** *)
(* *************************************+************************************** *)
(* This model defines the hold_up, the amount of liquid in the pot at any given time. *)
MODEL molar_hold_up;

	components			IS_A set OF symbol_constant;
	choice_component		IS_A symbol_constant;
	state				IS_A mixture;
	Mtot, m[components]		IS_A mole;
	nc				IS_A integer_constant;	

	components, state.components	ARE_THE_SAME;

	choice_component, state.choice_component	ARE_THE_SAME;

	FOR i IN components CREATE
	   m[i] = Mtot * state.y[i];
	END FOR;

   METHODS
     METHOD clear_molar_hold_up;
	RUN state.clear_mixture;
	Mtot.fixed 		:= FALSE;
	m[components].fixed	:= FALSE;
     END clear_molar_hold_up;
     METHOD specify_molar_hold_up;
	RUN state.specify_mixture;
        Mtot.fixed := TRUE;
     END specify_molar_hold_up;
     METHOD reset_molar_hold_up;
	RUN clear_molar_hold_up;
	RUN specify_molar_hold_up;
     END reset_molar_hold_up;
END molar_hold_up;

MODEL test_molar_hold_up REFINES molar_hold_up;
	components :== ['a','b','c'];
	choice_component :== 'a';
	nc :== 3;

END test_molar_hold_up;
	
(* *************************************+************************************** *)
(* *********************    simple_pot      *********************************** *)
(* *************************************+************************************** *)
(* This model defines the pot, its vapor product stream, the dynamic equations,
   and the thermodynamics of the pot. *)
MODEL simple_pot;
        F_B    					IS_A factor;
	components				IS_A set OF symbol_constant;
	choice_component			IS_A symbol_constant;
 	vap_prod				IS_A molar_stream;
	hold_up					IS_A molar_hold_up;
	alpha[components], ave_alpha		IS_A factor;        
	dM_dt[components]			IS_A molar_rate;
	T					IS_A temperature;
	b[components], c[components]		IS_A real;
	a[components]				IS_A factor;
	P					IS_A pressure;
  	Psat[components]			IS_A pressure;
	nc					IS_A integer_constant;

	dM_dt[components].lower_bound	:= -1e100 {kg_mole/s};
	
	components, hold_up.components, 
	vap_prod.components			ARE_THE_SAME; 

	vap_prod.choice_component, hold_up.choice_component,
		choice_component		ARE_THE_SAME;

   b[components] :=	 0{K};
   c[components] :=	 0{K};
   ave_alpha.lower_bound := 0.0;

(* Calculate the vapor pressures of all of the components using the
   Antoine equations.   Use the vapor presssures to calculate the 
   volativities for each component. Next write the dynamic mass balance
   for each component.  Finally calculate the equilibrium vapor mole
   fractions. *)
	FOR i IN components CREATE
	   Psat[i] = 10^(a[i] - b[i] / (T + c[i])) * 1.0 {mmHg};
	   alpha[i] = Psat[i] / P;
	   dM_dt[i] = F_B * vap_prod.f[i];
	   vap_prod.state.y[i] = alpha[i]/ave_alpha * hold_up.state.y[i];
	END FOR;

	P = SUM[Psat[i] | i IN components];

METHODS
   METHOD clear_simple_pot;
	RUN hold_up.clear_molar_hold_up;
	RUN vap_prod.clear_molar_stream;
	alpha[components].fixed				:= FALSE;
	ave_alpha.fixed					:= FALSE;
	dM_dt[components].fixed				:= FALSE;
	T.fixed						:= FALSE;
	a[components].fixed				:= FALSE;
	P.fixed						:= FALSE;
	Psat[components].fixed				:= FALSE;
        F_B.fixed					:= FALSE;
   END clear_simple_pot;
   METHOD specify_simple_pot;
	RUN hold_up.specify_molar_hold_up;
	RUN vap_prod.specify_molar_stream;
        hold_up.Mtot.fixed				:= FALSE;
        hold_up.state.y[components].fixed		:= FALSE;
        hold_up.m[components].fixed	 		:= TRUE;
	vap_prod.f[components].fixed 			:= FALSE;
        vap_prod.Ftot.fixed				:= TRUE;
	a[components].fixed				:= TRUE;
	P.fixed						:= TRUE;
	Psat[components].fixed				:= FALSE;
	F_B.fixed					:= TRUE;
   END specify_simple_pot;
   METHOD reset_simple_pot;
	RUN clear_simple_pot;
	RUN specify_simple_pot;
   END reset_simple_pot;
END simple_pot;


MODEL test_simple_pot REFINES simple_pot;

	components :== ['a','b','c'];
	choice_component :== 'a';
	nc :== 3;

END test_simple_pot;
	
(* *************************************+************************************** *)
(* *******************    pot_dynamics      *********************************** *)
(* *************************************+************************************** *)
(* This model sets up the interface between the LSODE integration and the ASCEND
   models.*)
MODEL pot_dynamics REFINES derivatives;
   pot					IS_A simple_pot;
   components				IS_A set OF symbol_constant;

   choice_components[1..nc],
	choice_component		IS_A symbol_constant;

   components, pot.components		ARE_THE_SAME;
   nc					IS_A integer_constant;

   x					IS_REFINED_TO time;
   y[1..nc]				IS_REFINED_TO mole;
   dydx[1..nc]      			IS_REFINED_TO molar_rate;

(* Make the connections between the integration and ASCEND models. 
*)
   FOR i IN [1..nc] CREATE
        y[i], pot.hold_up.m[choice_components[i]]	ARE_THE_SAME;
        dydx[i], pot.dM_dt[choice_components[i]]		ARE_THE_SAME;
   END FOR;

(* The total number of dynamic equations is the number of components. 
*)
   n_eq :== nc;

METHODS
   METHOD clear_derivatives;
	RUN pot.clear_simple_pot;
   END clear_derivatives;
   METHOD specify_derivatives;
	RUN pot.specify_simple_pot;
   END specify_derivatives;
   METHOD reset_derivatives;
	RUN clear_derivatives;
	RUN specify_derivatives;
   END reset_derivatives;

END pot_dynamics;

MODEL test_pot_dynamics REFINES pot_dynamics;

	components :== ['a','b','c'];
	choice_component :== 'a';
	nc :== 3;
 	choice_components[1] :== 'a';
 	choice_components[2] :== 'b';
 	choice_components[3] :== 'c';
	
END test_pot_dynamics;
		
(* *************************************+************************************** *)
(* *********************    bOiling_pot     *********************************** *)
(* *************************************+************************************** *)
(* This model is the model that actually gets integrated.  It defines the necessary
   values of the integration parameters, as well as giving values to the variables 
   that defines the actual problem the user is trying to solve. *)
MODEL boiling_pot REFINES lsode;
   npnt, ncurve				IS_A integer_constant;
   d					IS_REFINED_TO pot_dynamics;
   step					IS_A time;
   Mtot_plot, m_plot			IS_A plt_plot_integer;

(* Define what the actual components are to be. *)
   d.components :== ['n_pentane', 'n_hexane', 'n_heptane'];
   d.nc :== 3;
   d.choice_components[1] :== 'n_pentane';
   d.choice_components[2] :== 'n_hexane';
   d.choice_components[3] :== 'n_heptane';

   nstep :== 100;
   d.n_obs :== 4;
   d.obs[1], d.pot.hold_up.Mtot			ARE_THE_SAME;
   d.obs[2], d.pot.hold_up.m['n_pentane']	ARE_THE_SAME;
   d.obs[3], d.pot.hold_up.m['n_hexane']	ARE_THE_SAME;
   d.obs[4], d.pot.hold_up.m['n_heptane']	ARE_THE_SAME;

   step := 1.0 {s};


(* Define the absolute and arelative error tolerance user wants LSODE to have. *)
   FOR i IN [1..d.nc] CREATE
	atol[i] := 1.0e-6;
   	rtol[i] := 1.0e-6;
   END FOR;

(* Put user suppiled initial conditions into the integration. *)
   FOR i IN [1..d.nc] CREATE
        d.y[i], y[0][i]  		ARE_THE_SAME;
   END FOR;

   m_plot.ncurve :== 3;
   m_plot.curve[1].npnt :== nstep + 1;
   m_plot.curve[2].npnt :== nstep + 1;
   m_plot.curve[3].npnt :== nstep + 1;
   m_plot.curve[1].legend :== 'n_pentane';
   m_plot.curve[2].legend :== 'n_hexane';
   m_plot.curve[3].legend :== 'n_heptane';
   m_plot.title :== 'Holdup In Pot';
   m_plot.XLabel :== 'Time';
   m_plot.YLabel :== 'Holdup';   

   Mtot_plot.ncurve :== 1;
   Mtot_plot.curve[1].npnt :== nstep + 1;
   Mtot_plot.curve[1].legend :== 'Pot';
   Mtot_plot.title :== 'Total Holdup';
   Mtot_plot.XLabel :== 'Time';
   Mtot_plot.YLabel :== 'Holdup';   

METHODS
   METHOD solve_plot;
	FOR j IN [1..Mtot_plot.curve[1].npnt] DO
		Mtot_plot.curve[1].pnt[j].y := obs[j-1][1];
		Mtot_plot.curve[1].pnt[j].x := x[j-1];
	END FOR;

   	FOR i IN [1..m_plot.ncurve] DO
		FOR j IN [1..m_plot.curve[1].npnt] DO
			m_plot.curve[i].pnt[j].y := obs[j-1][i+1];
			m_plot.curve[i].pnt[j].x := x[j-1];
		END FOR;
   	END FOR;
   END solve_plot;
   METHOD values;
	RUN lsode::values; (* init tolerances *)
	d.pot.alpha['n_pentane']		:= 1.44880;
	d.pot.alpha['n_hexane']			:= 0.97472;
	d.pot.alpha['n_heptane']		:= 0.70000;
	d.pot.ave_alpha				:= 1.0;
	d.pot.a['n_pentane']			:= 6.85221;
	d.pot.a['n_hexane']			:= 6.87776;
	d.pot.a['n_heptane']			:= 6.90240;
	d.pot.b['n_pentane']			:= 791.48 {K};
	d.pot.b['n_hexane']			:= 898.38 {K};
	d.pot.b['n_heptane']			:= 994.965 {K};
	d.pot.c['n_pentane']			:=-41.15 {K};
	d.pot.c['n_hexane']			:=-48.784 {K};
	d.pot.c['n_heptane']			:=-56.25 {K};
	d.pot.vap_prod.Ftot			:= 0.8 {kg_mole/s};
	d.pot.hold_up.m['n_pentane']		:= 50.0 {kg_mole};
	d.pot.hold_up.m['n_hexane']		:= 50.0 {kg_mole};
	d.pot.hold_up.m['n_heptane']		:= 50.0 {kg_mole};
	d.pot.dM_dt['n_pentane']		:= 0.0 {kg_mole/s};
	d.pot.dM_dt['n_hexane']			:= 0.0 {kg_mole/s};
	d.pot.dM_dt['n_heptane']		:= 0.0 {kg_mole/s};
	d.pot.P					:= 1.0 {atm};
	d.pot.T					:= 300 {K};
	d.x					:= 0 {s};
   	step 					:= 1.0 {s};
   	x[0] 					:= 0.0 {s};
        d.pot.F_B				:= -1.0;
   END values;

   METHOD set_intervals;
  	FOR i IN [0..nstep] DO
 	    x[i] := i*step;
        END FOR;
   END set_intervals;

   METHOD clear;
	RUN d.clear_derivatives;
	y[0..nstep][1..d.n_eq].fixed		:= FALSE;
	x[0..nstep].fixed			:= FALSE;
	step.fixed				:= FALSE;
   END clear;
   METHOD specify;
 	RUN d.specify_derivatives;
	RUN fix_x_and_y;
	RUN set_intervals;
   END specify;
   METHOD reset;
	RUN clear;
	RUN specify;
   END reset;
END boiling_pot;

