(*********************************************************************\
                        flash_tests.asc
                        by Robert S. Huss
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Use of this module is demonstrated by the associated script file
flash_tests.s.
\*********************************************************************)

(*********************************************************************\
  $Date: 1997/02/20 18:54:14 $
  $Revision: 1.6 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/flash_tests.asc,v $
\*********************************************************************)

(*
	flash_tests.asc by Robert S. Huss

	This file contains examples for the flash models found
	in flash.lib.  The models can be used as templates
	for generating flash models.  

	The file flash_tests.s is a script to run these examples.

	The models in this file require the following files:
	system.lib
	atoms.lib
	components.lib
	H_S_thermodynamics.lib or H_G_thermodynamics.lib
	stream.lib
	flash.lib

*)


(* REQUIRE flash.lib *)


MODEL test_flash;

	flash			IS_A VLE_flash;


      
	flash.components :== ['a','b','c']; 

	flash.inputs :== ['feed'];
	flash.liqouts :== ['liquid'];
	flash.vapouts :== ['vapor'];

  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['feed'].f['a'] 	:= 3{mol/s};
	flash.input['feed'].f['b'] 	:= 3{mol/s};
	flash.input['feed'].f['c'] 	:= 3{mol/s};
	flash.VLE.phi['liquid'] 	:= 0.5;
	flash.VLE.phi['vapor'] 		:= 0.5;
     END values;
END test_flash;


MODEL test_simple_tray;

	flash			IS_A simple_tray;


      
	flash.components :== ['a','b','c'];


  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['liquid'].f['a'] 	:= 3{mol/s};
	flash.input['liquid'].f['b'] 	:= 3{mol/s};
	flash.input['liquid'].f['c'] 	:= 3{mol/s};
	flash.input['vapor'].f['a'] 	:= 3{mol/s};
	flash.input['vapor'].f['b']	:= 3{mol/s};
	flash.input['vapor'].f['c']	:= 3{mol/s};
	flash.VLE.phi['liquid'] 	:= 0.5;
	flash.VLE.phi['vapor'] 		:= 0.5;
     END values;

END test_simple_tray;


MODEL test_simple_feed_tray;
	flash			IS_A simple_feed_tray;


      
	flash.components :== ['a','b','c'];



  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['feed'].f['a'] 	:= 3{mol/s};
	flash.input['feed'].f['b'] 	:= 3{mol/s};
	flash.input['feed'].f['c'] 	:= 3{mol/s};
	flash.input['liquid'].f['a'] 	:= 3{mol/s};
	flash.input['liquid'].f['b'] 	:= 3{mol/s};
	flash.input['liquid'].f['c'] 	:= 3{mol/s};
	flash.input['vapor'].f['a'] 	:= 3{mol/s};
	flash.input['vapor'].f['b']	:= 3{mol/s};
	flash.input['vapor'].f['c']	:= 3{mol/s};
	flash.VLE.phi['liquid'] 	:= 0.5;
	flash.VLE.phi['vapor'] 		:= 0.5;
     END values;


END test_simple_feed_tray;



MODEL test_condenser;

	flash			IS_A condenser;


      
	flash.components :== ['a','b','c'];


  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['vapor'].f['a'] 	:= 3{mol/s};
	flash.input['vapor'].f['b']	:= 3{mol/s};
	flash.input['vapor'].f['c']	:= 3{mol/s};
	flash.VLE.phi['liquid'] 	:= 0.5;
	flash.VLE.phi['vapor'] 		:= 0.5;
	flash.prodsplit['vapor_product'] := 0.0;
	flash.prodsplit['distillate'] := 1.0;
	flash.reflux_ratio		:= 3.0;
     END values;


END test_condenser;


MODEL test_reboiler;

	flash			IS_A reboiler;


      
	flash.components :== ['a','b','c'];


  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['liquid'].f['a'] 	:= 3{mol/s};
	flash.input['liquid'].f['b'] 	:= 3{mol/s};
	flash.input['liquid'].f['c'] 	:= 3{mol/s};
	flash.VLE.phi['liquid'] 	:= 0.5;
	flash.VLE.phi['vapor'] 		:= 0.5;
	flash.prodsplit['vapor_product'] := 0.0;
	flash.prodsplit['bottoms'] := 1.0;
	flash.reboil_ratio		:= 3.0;
     END values;


END test_reboiler;



MODEL td_test_simple_tray REFINES test_simple_tray;

	flash IS_REFINED_TO td_simple_tray;

	flash.data['a'] IS_REFINED_TO acetone;
	flash.data['b'] IS_REFINED_TO chloroform;
	flash.data['c'] IS_REFINED_TO benzene;

	flash.input['vapor'] IS_REFINED_TO vapor_stream;
	flash.input['liquid'] IS_REFINED_TO liquid_stream;

  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['liquid'].f['a'] 	:= 3{mol/s};
	flash.input['liquid'].f['b'] 	:= 3{mol/s};
	flash.input['liquid'].f['c'] 	:= 3{mol/s};
	flash.input['liquid'].state.T 	:= 335{K};
	flash.input['vapor'].f['a'] 	:= 3{mol/s};
	flash.input['vapor'].f['b']	:= 3{mol/s};
	flash.input['vapor'].f['c']	:= 3{mol/s};
	flash.input['vapor'].state.T	:= 345{K};
	flash.VLE.phi['liquid'] 	:= 0.5;
	flash.VLE.phi['vapor'] 		:= 0.5;
     END values;
     METHOD zero_Q;
	flash.Qin := 0{kW};
     END zero_Q;


END td_test_simple_tray;



MODEL td_test_simple_feed_tray REFINES test_simple_feed_tray;

	flash IS_REFINED_TO td_simple_feed_tray;

	flash.data['a'] IS_REFINED_TO acetone;
	flash.data['b'] IS_REFINED_TO chloroform;
	flash.data['c'] IS_REFINED_TO benzene;

	flash.input['vapor'] IS_REFINED_TO vapor_stream;
	flash.input['liquid'] IS_REFINED_TO liquid_stream;

  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['liquid'].f['a'] 	:= 3{mol/s};
	flash.input['liquid'].f['b'] 	:= 3{mol/s};
	flash.input['liquid'].f['c'] 	:= 3{mol/s};
	flash.input['liquid'].state.T 	:= 335{K};
	flash.input['vapor'].f['a'] 	:= 3{mol/s};
	flash.input['vapor'].f['b']	:= 3{mol/s};
	flash.input['vapor'].f['c']	:= 3{mol/s};
	flash.input['vapor'].state.T	:= 345{K};
	flash.VLE.phi['liquid'] 	:= 0.5;
	flash.VLE.phi['vapor'] 		:= 0.5;
	flash.input['feed'].f['a']	:= 3{mol/s};
	flash.input['feed'].f['b']	:= 3{mol/s};
	flash.input['feed'].f['c']	:= 3{mol/s};
	flash.input['feed'].state.phi['liquid'] := 1.0;
	flash.input['feed'].state.phi['vapor'] := 0.0;
	flash.q				:= 1.0;
     END values;
     METHOD zero_Q;
	flash.Qin := 0{kW};
     END zero_Q;

END td_test_simple_feed_tray;


MODEL td_test_condenser REFINES test_condenser;

		
	flash IS_REFINED_TO td_condenser;

	flash.data['a'] IS_REFINED_TO acetone;
	flash.data['b'] IS_REFINED_TO chloroform;
	flash.data['c'] IS_REFINED_TO benzene;

	flash.input['vapor'] IS_REFINED_TO vapor_stream;

  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['vapor'].f['a'] 	:= 3{mol/s};
	flash.input['vapor'].f['b']	:= 3{mol/s};
	flash.input['vapor'].f['c']	:= 3{mol/s};
	flash.input['vapor'].state.T	:= 345{K};
	flash.prodsplit['vapor_product'] := 0.0;
	flash.prodsplit['distillate'] := 1.0;
	flash.reflux_ratio		:= 3.0;
     END values;
END td_test_condenser;


MODEL td_test_reboiler REFINES test_reboiler;

	flash IS_REFINED_TO td_reboiler;

	flash.data['a'] IS_REFINED_TO acetone;
	flash.data['b'] IS_REFINED_TO chloroform;
	flash.data['c'] IS_REFINED_TO benzene;

	flash.input['liquid'] IS_REFINED_TO liquid_stream;
  METHODS
     METHOD values;
	flash.alpha['a'] 		:= 1.5;
	flash.alpha['b'] 		:= 1.2;
	flash.alpha['c'] 		:= 1.0;
	flash.input['liquid'].f['a'] 	:= 3{mol/s};
	flash.input['liquid'].f['b']	:= 3{mol/s};
	flash.input['liquid'].f['c']	:= 3{mol/s};
	flash.input['liquid'].state.T	:= 335{K};
	flash.prodsplit['vapor_product'] := 0.0;
	flash.prodsplit['bottoms'] := 1.0;
	flash.reboil_ratio		:= 3.0;
    END values;
END td_test_reboiler;

