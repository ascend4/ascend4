(* test file for an empty ascend system *)
(*
  The following definitions test most of the features of
  sparse arrays, aliasing, and parser/instantiator error
  message generation.
  The conditions for a successful pass are given with each MODEL.
  We have a dummy relation defined so this file can run standalone.
*)
RELATION_DEFINITION
END FOR;

MODEL weird_alias;
(* 
   tests statement order doesn't matter.
   pass == complete failure and recursion warning.
*)
  a ALIASES b;
  b ALIASES a;
END wierd_alias;
MODEL simple_alias;
(* 
   tests statement order doesn't matter.
   pass == complete instantiation.
*)
  a ALIASES b;
  b IS_A real;
END simple_alias;

MODEL dense_array_of_alii;
(* 
   tests statement order doesn't matter and dense array of alii.
   btw a dense array of alii is a really wierd thing but we must test it.
   pass == complete instantiation.
*)
  m,n IS_A integer_constant;
  m:==n+2;
  af[m..n] ALIASES b; (* empty array *)
  at[n..m] ALIASES b; (* 3 elements *)
  b IS_A real;
END dense_array_of_alii;

MODEL illegal_relation;
(* 
   tests that we cannot alias relations at this time (violates 1 parent rule)
   pass == parse failure.
*)
  x IS_A real;
  r: x = 1;
  a ALIASES r;
END illegal_relation;

MODEL sparse_array_of_alii;
(* 
   tests sparse array of alii.
   btw an array of alii is a really wierd thing but we must test it.
   pass == complete instantiation.
*)
  b IS_A real;
  FOR I IN [1..2] CREATE
  FOR J IN [3] CREATE
  FOR K IN [4..5,9] CREATE
    a[I][J][K] ALIASES b;
  END FOR;
  END FOR;
  END FOR;
END sparse_array_of_alii;

MODEL alii_of_array;
(*
  tests alias of sub arrays.
  pass == instantiation of all but e which does not exist;
  stronger pass would be for e declaration to be disallowed
  by parser.
*)
  t[1..2][5..7][8..9] IS_A real;
  a ALIASES t;
  b ALIASES t[1];
  c ALIASES t[1][5];
  d ALIASES t[1][5][8];
  e ALIASES t[1][6][9][11];
END alii_of_array;

MODEL alii_of_relation;
(*
  tests alias of sub arrays.
  pass == fail to parse.
  a relation that can't have 2 parents.
*)
  x IS_A real;
  FOR I IN [1..2] CREATE
  FOR J IN [3] CREATE
  FOR K IN [4..5,9] CREATE
    t[I][J][K]: x=I+J+K;
  END FOR;
  END FOR;
  END FOR;
  a ALIASES t;
  b ALIASES t[1];
  c ALIASES t[1][3];
  d ALIASES t[1][3][5];
  e ALIASES t[1][3][9][11];
END alii_of_relation;

MODEL mass;
  mole IS_A boolean;
END mass;


MODEL order_of_sparse;
(*
  testing order doesn't matter.
  testing indirect addressing of arrays.
  pass = all but z2, q instantiate.
*)

  FOR j IN [1..2] CREATE
    FOR i IN process[j] CREATE
      flow[i][j] IS_A mass;
    END FOR;
  END FOR;
  FOR j IN [1..2] CREATE
    FOR i IN process[j] CREATE
      q IS_A mass; (* illegal *)
    END FOR;
  END FOR;

  (* sparse relations *)
  FOR j IN [1..2] CREATE
    FOR i IN process[j] CREATE
      rel[i][j]: x=1;
    END FOR;
  END FOR;
  (* sparse relations transpose *)
  FOR j IN [1..2] CREATE
    FOR i IN process[j] CREATE
      rel2[j][i]: y=1;
    END FOR;
  END FOR;

  (* indirect address IS_A illegal *)
  z2[process[i]] IS_A mass; 

  x,y IS_A real;
  process[1..3] IS_A set OF integer_constant;

  (* plain old array *)
  z['a','b'] IS_A integer;

  process[1] :== [2];
  process[2] :== [7,5,3];
  process[3] :== [4,6];

  n,m[1..3] IS_A  integer_constant;
  phases IS_A set OF symbol_constant;
  (* computed dense aliases test *)
  b[phases - ['a']] ALIASES n;
  m[2] :==2;
  FOR i IN [1..3] CREATE
    (* indirect addressing *)
    p[m[i]] IS_A real; 
    qrel[m[i]]: x = 1;
  END FOR;
  m[3] :==m[1]-2;
  m[1] :==n;
  n:==3;
  phases:==['a','b'];

END order_of_sparse;
