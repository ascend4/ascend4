(*********************************************************************\
                        isom.asc
                        by Joseph J. Zaher
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

Use of this module is demonstrated by the associated script file
isom.s.
\*********************************************************************)

(*********************************************************************\
  $Date: 1997/07/03 14:51:47 $
  $Revision: 1.6 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/isom.asc,v $
\*********************************************************************)

(**
 **  I  S  O  M  .  A  S  C
 **  ----------------------
 **
 **  ASCEND structure for the modeling of a pentane isomerization process.
 **
 **  Joseph J. Zaher
 **  06/92
 **
 **) 


(* REQUIRE plot.lib *)
(* REQUIRE integration.lib *)
(* REQUIRE H_G_thermodynamics.lib *)

MODEL kinetics REFINES derivatives;
      
    n_eq                                :== 5;
    n_obs                               :== 1;
    state                               IS_A Pitzer_mixture;
    state.components                    :== ['H2', 'C2', 'C3', 'iC5', 'nC5'];
    state.data['H2']                    IS_REFINED_TO hydrogen;
    state.data['C2']                    IS_REFINED_TO ethane;
    state.data['C3']                    IS_REFINED_TO propane;
    state.data['iC5']                   IS_REFINED_TO i_pentane;
    state.data['nC5']                   IS_REFINED_TO n_pentane;
    catalyst                            IS_A mass;
    F                                   IS_A molar_rate;
    x                                   IS_REFINED_TO factor;
    dydx[1..4]                          IS_REFINED_TO factor;
    dydx[5]                             IS_REFINED_TO molar_energy;

        y[1], state.y['C2'] ARE_THE_SAME;
        y[2], state.y['C3'] ARE_THE_SAME;
        y[3], state.y['iC5'] ARE_THE_SAME;
        y[4], state.y['nC5'] ARE_THE_SAME;
        y[5], state.H ARE_THE_SAME;

	obs[1], state.H ARE_THE_SAME;
	
        dydx[1]*state.V*F = 1.0{cm^3/g/s}
            *catalyst
            *(exp(7.3 - 10000.0{R}/state.T)*state.y['iC5'] + 
            exp(7.1 - 11000.0{R}/state.T)*state.y['nC5'])
            /(1.0 + 1.0{1/psia}*state.P
            *(0.63726-0.0010452{1/R}*state.T+4.2182e-7{1/R^2}*state.T^2))^2;
        dydx[2], dydx[1] ARE_THE_SAME;
        dydx[3]*state.V*F = 1.0{cm^3/g/s}
            *catalyst
            *(exp(9.9 - 8500.0{R}/state.T)*state.y['nC5'] -
            exp(10.7 - 10100.0{R}/state.T)*state.y['iC5'] -
            exp(7.3 - 10000.0{R}/state.T)*state.y['iC5'])
            /(1.0 + 1.0{1/psia}*state.P
            *(0.63726-0.0010452{1/R}*state.T+4.2182e-7{1/R^2}*state.T^2))^2;
        dydx[4]*state.V*F = 1.0{cm^3/g/s}
            *catalyst
            *(exp(10.7 - 10100.0{R}/state.T)*state.y['iC5'] -
            exp(9.9 - 8500.0{R}/state.T)*state.y['nC5'] -
            exp(7.1 - 11000.0{R}/state.T)*state.y['nC5'])
            /(1.0 + 1.0{1/psia}*state.P
            *(0.63726-0.0010452{1/R}*state.T+4.2182e-7{1/R^2}*state.T^2))^2;

        state.T := 980.0{R};
        state.P := 280.0{psia};
        state.y['H2'] := 0.50;
        state.y['C2'] := 0.04;
        state.y['C3'] := 0.02;
        state.y['iC5'] := 0.11;
        state.y['nC5'] := 0.33;
        catalyst := 10000.0{lbm};
        F := 800.0{lb_mole/hour};

    METHODS
        METHOD clear;
            RUN state.clear;
            catalyst.fixed := FALSE;
            F.fixed := FALSE;
            x.fixed := FALSE;
            y[1..n_eq].fixed := FALSE;
            dydx[1..n_eq].fixed := FALSE;
        END clear;
        METHOD specify;
            RUN state.specify;
            state.T.fixed := FALSE;
            state.H.fixed := TRUE;
            state.y[state.components].fixed := TRUE;
            state.y['H2'].fixed := FALSE;
            catalyst.fixed := TRUE;
            F.fixed := TRUE;
            x.fixed := TRUE;
            dydx[1..n_eq].fixed := FALSE;
            dydx[5] := 0.0{BTU/lb_mole};
            dydx[5].fixed := TRUE;
        END specify;

END kinetics;

MODEL isomerization1 REFINES lsode;

    nstep                               :== 8;
    d                                   IS_REFINED_TO kinetics;
    graph, enthalpy_graph               IS_A plt_plot_integer;
    
        atol[1..d.n_eq] := 1.0e-6;
        rtol[1..d.n_eq] := 1.0e-6;

        graph.title :== 'Isomerization';
        graph.XLabel :== 'Fraction of Catalyst';
        graph.YLabel :== 'Mole fraction';
        graph.ncurve :== 4;
        graph.curve[1].legend :== 'ethane';
        graph.curve[2].legend :== 'propane';
        graph.curve[3].legend :== 'isopentane';
        graph.curve[4].legend :== 'normal pentane';
        graph.curve[1..graph.ncurve].npnt :== nstep + 1;

        enthalpy_graph.title :== 'Isomerization';
        enthalpy_graph.XLabel :== 'Fraction of Catalyst';
        enthalpy_graph.YLabel :== 'Enthalpy (J/gm_mole)';
        enthalpy_graph.ncurve :== 1;
        enthalpy_graph.curve[1].legend :== 'enthalpy';
        enthalpy_graph.curve[1].npnt :== nstep + 1;

    METHODS
        METHOD values;
            FOR i IN [0..nstep] DO
                x[i] := i*0.125;
            END FOR;
        END values;
        METHOD clear;
            RUN d.clear;
            x[0..nstep].fixed := FALSE;
            y[0..nstep][1..d.n_eq].fixed := FALSE;
            obs[0..nstep][1..d.n_obs].fixed := FALSE;
        END clear;                
        METHOD specify; 
            RUN d.specify;
            d.state.T.fixed := TRUE;
            d.state.H.fixed := FALSE;
        END specify;
        METHOD plot;
            FOR i IN [1..graph.ncurve] DO
                FOR j IN [0..nstep] DO
                    graph.curve[i].pnt[j+1].x := x[j];
                    graph.curve[i].pnt[j+1].y := y[j][i];
                END FOR;
            END FOR;
        END plot;
        METHOD plot_enthalpy;
	    FOR j IN [0..nstep] DO
		enthalpy_graph.curve[1].pnt[j+1].x := x[j];
		enthalpy_graph.curve[1].pnt[j+1].y := obs[j][1];
	    END FOR;
	END plot_enthalpy;
   
END isomerization1;

MODEL isomerization2 REFINES integration;

    nstep                               :== 8;
    step[1..nstep]                      IS_REFINED_TO midpoint;
    initial                             IS_REFINED_TO kinetics;
    graph, temperature_graph            IS_A plt_plot_integer;

        MAXIMIZE 92*final.state.y['iC5'] + 63*final.state.y['nC5'];

        graph.title :== 'Isomerization';
        graph.XLabel :== 'Fraction of Catalyst';
        graph.YLabel :== 'Mole fraction';
        graph.ncurve :== 4;
        graph.curve[1].legend :== 'ethane';
        graph.curve[2].legend :== 'propane';
        graph.curve[3].legend :== 'isopentane';
        graph.curve[4].legend :== 'normal pentane';
        graph.curve[1..graph.ncurve].npnt :== nstep + 1;

	temperature_graph.title :== 'Isomerization';
        temperature_graph.XLabel :== 'Fraction of Catalyst';
        temperature_graph.YLabel :== 'Temperature (K)';
        temperature_graph.ncurve :== 1;
        temperature_graph.curve[1].legend :== 'temperature';
        temperature_graph.curve[1].npnt :== nstep + 1;

    METHODS
        METHOD values;
            initial.x := 0.00;
            step[1..nstep].h := 0.125;
        END values;
        METHOD clear;
            RUN step[1..nstep].clear;
        END clear;
        METHOD specify;
            FOR i IN [1..nstep] DO
                RUN step[nstep - i + 1].specify;
            END FOR;
            initial.state.T.fixed := TRUE;
            initial.state.H.fixed := FALSE;
        END specify;
        METHOD plot;
            FOR i IN [1..graph.ncurve] DO
                FOR j IN [1..nstep] DO
                    graph.curve[i].pnt[j].x := step[j].initial.x;
                    graph.curve[i].pnt[j].y := step[j].initial.y[i];
                END FOR;
                graph.curve[i].pnt[nstep+1].x := final.x;
                graph.curve[i].pnt[nstep+1].y := final.y[i];
            END FOR;
        END plot;
        METHOD temperature_plot;
	    FOR j IN [1..nstep] DO
		temperature_graph.curve[1].pnt[j].x := step[j].initial.x;
		temperature_graph.curve[1].pnt[j].y := step[j].initial.state.T;
	    END FOR;
	    temperature_graph.curve[1].pnt[nstep+1].x := final.x;
	    temperature_graph.curve[1].pnt[nstep+1].y := final.state.T;
	END temperature_plot;

END isomerization2;
