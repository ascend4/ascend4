(*********************************************************************\
                        distill.asc
                        by Joseph J. Zaher
                        Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1994

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

This module <does>
Use of this module is demonstrated by the associated script file
distill.s.
\*********************************************************************)

(*********************************************************************\
  $Date: 1997/07/03 14:51:43 $
  $Revision: 1.6 $
  $Author: mthomas $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/examples/distill.asc,v $
\*********************************************************************)
(**
 **
 **  D  I  S  T  I  L  L  .  A  S  C
 **  -------------------------------
 **
 **  ASCEND structure for the modeling of an azeotropic distillation
 **  column having only ten trays and separating only two components,
 **  acetone and normal hexane.
 **
 **  Joseph J. Zaher
 **  05/93
 **
 **)


(* REQUIRE flowsheet.lib *)
(* REQUIRE plot.lib *)

MODEL tray REFINES flash;

    inputs                              :== ['top', 'bottom'];

        state.mix['liquid'], feed['top'].state ARE_ALIKE;
        state.mix['vapor'], feed['bottom'].state ARE_ALIKE;

END tray;


MODEL feedtray REFINES flash;

    inputs                              :== ['top', 'side', 'bottom'];

        state.mix['liquid'], feed['top'].state ARE_ALIKE;
        state.mix['vapor'], feed['bottom'].state ARE_ALIKE;
        feed['side'].state, state ARE_ALIKE;
        feed['side'].state.phases, state.phases ARE_THE_SAME;
        feed['side'].state.reference, state.reference ARE_THE_SAME;
        feed['side'].state.mix['liquid'], state.mix['liquid'] ARE_ALIKE;
        feed['side'].state.mix['vapor'], state.mix['vapor'] ARE_ALIKE;

END feedtray;


MODEL condenser REFINES flash;

    inputs                              :== ['bottom'];

        state.mix['vapor'], feed['bottom'].state ARE_ALIKE;

END condenser;


MODEL evaporator REFINES flash;

    inputs                              :== ['top'];

        state.mix['liquid'], feed['top'].state ARE_ALIKE;

END evaporator;


MODEL distill REFINES unit_operation;

    inputs                              :== ['side'];
    feed['side'].state                  IS_REFINED_TO heterogeneous_mixture;
    feed['side'].state.phases           :== ['vapor','liquid'];
    feed['side'].state.reference        :== 'liquid';
    feed['side'].state.mix['vapor']     IS_REFINED_TO Pitzer_mixture;
    feed['side'].state.mix['liquid']    IS_REFINED_TO UNIFAC_mixture;
    feed['side'].state.components       :== ['A','H'];
    feed['side'].state.data['A']        IS_REFINED_TO acetone;
    feed['side'].state.data['H']        IS_REFINED_TO n_hexane;
    outputs                             :== ['bottom','top'];
    bottom                              IS_A integer_constant;
    side                                IS_A integer_constant;
    top                                 IS_A integer_constant;
    bottom                              :== 1;
    side                                :== 7;
    top                                 :== 12;
    stage[bottom..top]                  IS_A flash;
    stage[bottom]                       IS_REFINED_TO evaporator;
    stage[bottom+1..side-1]             IS_REFINED_TO tray;
    stage[side]                         IS_REFINED_TO feedtray;
    stage[side+1..top-1]                IS_REFINED_TO tray;
    stage[top]                          IS_REFINED_TO condenser;
    distributor['top','bottom']         IS_A splitter;
    distributor['top'].outputs          :== ['internal','external'];
    distributor['bottom'].outputs       :== ['internal','external'];
    reflux                              IS_A factor; 
    reboil                              IS_A factor;
    key                                 IS_A symbol_constant;
    key                                 :== 'A';
    components                          IS_A set OF symbol_constant;

        components :== UNION[feed[i].state.components | i IN inputs];

        (* tower *)
        stage[bottom..top].state ARE_ALIKE;
        FOR plate IN [bottom+1..top-2] CREATE
            stage[plate+1].product['bottom'], 
                stage[plate].feed['top'] ARE_THE_SAME;
            stage[plate+1].feed['bottom'],
                stage[plate].product['top'] ARE_THE_SAME;
        END FOR;

        (* evaporator *)
        distributor['bottom'].feed['inlet'],
            stage[bottom+1].product['bottom'] ARE_THE_SAME;
        distributor['bottom'].product['external'],
            product['bottom'] ARE_THE_SAME;
        distributor['bottom'].product['internal'],
            stage[bottom].feed['top'] ARE_THE_SAME;
        stage[bottom].product['top'],
            stage[bottom+1].feed['bottom'] ARE_THE_SAME;
        reboil*(stage[bottom].product['bottom'].F + product['bottom'].F) =
            stage[bottom+1].feed['bottom'].F;

        (* Feed tray *)
        feed['side'], stage[side].feed['side'] ARE_THE_SAME;

        (* Condenser *)
        distributor['top'].feed['inlet'],
            stage[top].product['bottom'] ARE_THE_SAME;
        distributor['top'].product['external'],
            product['top'] ARE_THE_SAME;
        distributor['top'].product['internal'],
            stage[top-1].feed['top'] ARE_THE_SAME;
        stage[top].feed['bottom'],
            stage[top-1].product['top'] ARE_THE_SAME;
        reflux*(stage[top].product['top'].F + product['top'].F) =
            stage[top-1].feed['top'].F;

        graph                           IS_A plt_plot_integer;

        (* plotting *)
        graph.title :== 'Distillation of acetone and hexane';
        graph.XLabel :== 'acetone in liquid';
        graph.YLabel :== 'acetone in vapor';
        graph.ncurve :== 4;
        graph.curve[1].npnt :== 2*(top - 2)+1;
        graph.curve[1].legend :== 'stages';
        graph.curve[2].npnt :== top-2;
        graph.curve[2].legend := 'equilibrium curve';
        graph.curve[3].npnt :== top-1;
        graph.curve[3].legend :== 'operating line';
        graph.curve[4].npnt :== 2;
        graph.curve[4].legend :== 'total reflux line';
        FOR plate IN [1..top-2] CREATE
            graph.curve[1].pnt[2*plate-1].x, 
                graph.curve[1].pnt[2*plate].x,
                stage[plate+1].product['bottom'].state.y[key] ARE_THE_SAME;
            graph.curve[1].pnt[2*plate].y,
                graph.curve[1].pnt[2*plate+1].y,
                stage[plate+1].product['top'].state.y[key] ARE_THE_SAME;
            graph.curve[2].pnt[plate],
                graph.curve[1].pnt[2*plate] ARE_THE_SAME;
            graph.curve[3].pnt[plate],
                graph.curve[1].pnt[2*plate-1] ARE_THE_SAME;
        END FOR;
        graph.curve[1].pnt[1].y, 
            stage[bottom+1].feed['bottom'].state.y[key] ARE_THE_SAME;
        graph.curve[1].pnt[2*(top-2)+1].x,
            product['top'].state.y[key] ARE_THE_SAME;
        graph.curve[3].pnt[top-1],
            graph.curve[1].pnt[2*(top-2)+1] ARE_THE_SAME;
        graph.curve[4].pnt[1], 
            graph.curve[3].pnt[1] ARE_THE_SAME;
        graph.curve[4].pnt[2], 
            graph.curve[3].pnt[top-1] ARE_THE_SAME;
      
    METHODS
        METHOD values;
            feed['side'].state.T := 320.0{K};
            feed['side'].state.P := 760.0{mmHg};
            feed['side'].state.y['A'] := 0.25;
            feed['side'].state.y['H'] := 0.75;
            feed['side'].state.phi['liquid'] := 1.0;
            feed['side'].state.phi['vapor'] := 0.0;
            feed['side'].state.alpha['vapor']['A'] := 3.00;
            feed['side'].state.alpha['vapor']['H'] := 1.00;
            feed['side'].F := 100.0{g_mole/s};
            stage[bottom..top].T := feed['side'].state.T;
            stage[bottom..top].P := feed['side'].state.P;
            FOR i IN [bottom..top] DO
                stage[i].state.alpha['vapor']['A'] := 5.0 - 0.35*(i-bottom);
                stage[i].state.alpha['vapor']['H'] := 1.0;
            END FOR;
            FOR i IN components DO
                stage[bottom..top].state.y[i] := 
                    feed['side'].state.y[i];
                stage[bottom..top].state.mix['liquid'].y[i] :=
                    feed['side'].state.y[i];
                stage[bottom..top].state.mix['vapor'].y[i] :=
                    feed['side'].state.y[i];
            END FOR;
        END values;

        METHOD clear;
            RUN feed[inputs].clear;
            RUN product[outputs].clear;
            RUN stage[bottom..top].clear;
            RUN distributor['top','bottom'].clear;
            reflux.fixed := FALSE;
            reboil.fixed := FALSE;
        END clear;

        METHOD relative_volatility;
            RUN feed[inputs].specify;
            RUN product[outputs].specify;
            RUN stage[bottom..top].specify;
            RUN distributor['top','bottom'].specify;
            stage[bottom..top].state.phi['vapor'].fixed := FALSE;
            stage[bottom..top].state.phi['liquid'].fixed := FALSE;
            FOR i IN components DO
                stage[bottom+1..top].feed['bottom'].state.y[i].fixed := FALSE;
                stage[bottom+1..top].feed['bottom'].F.fixed := FALSE;
                distributor['top'].feed['inlet'].state.y[i].fixed := FALSE;
                distributor['bottom'].feed['inlet'].state.y[i].fixed := FALSE;
            END FOR;
            distributor['top'].feed['inlet'].F.fixed := FALSE;
            distributor['top'].phi['internal','external'].fixed := FALSE;
            distributor['bottom'].feed['inlet'].F.fixed := FALSE;
            distributor['bottom'].phi['internal','external'].fixed := FALSE;
            stage[bottom].state.phi['vapor'] := 1.0;
            stage[bottom].state.phi['vapor'].fixed := TRUE;
            stage[top].state.phi['vapor'] := 0.0;
            stage[top].state.phi['vapor'].fixed := TRUE;
            product['top'].F := 40.0{g_mole/s};
            product['top'].F.fixed := TRUE;
            reflux := 0.5;
            reflux.fixed := TRUE;
        END relative_volatility;

        METHOD constant_overflow;
            stage[bottom+1..top-1].Q.fixed := FALSE;
            stage[bottom+1..top-1].feed['bottom'].F := 60.0{g_mole/s};
            stage[bottom+1..top-1].feed['bottom'].F.fixed := TRUE;
        END constant_overflow;
    
        METHOD equilibrium;
            RUN relative_volatility;
            stage[bottom..top].T.fixed := FALSE;
        END equilibrium;

        METHOD adiabatic;
            stage[bottom+1..top-1].Q := 0.0{cal/s};
            stage[bottom+1..top-1].Q.fixed := TRUE;
            stage[bottom+1..top-1].feed['bottom'].F.fixed := FALSE;
        END adiabatic;

        METHOD specify;
            RUN equilibrium;
            RUN adiabatic;
        END specify;

END distill;
