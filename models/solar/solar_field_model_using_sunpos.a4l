(*  This model simulates the Solar field according to the approach of the patnode. *) 

REQUIRE "atoms.a4l";
REQUIRE "solar/solar_types.a4l";

REQUIRE "johnpye/thermo_types.a4c";
REQUIRE "johnpye/sunpos.a4c";


MODEL sunpos_wrapper REFINES sunpos;
		
	beta = 1.0 * theta_z;
	
	METHODS
		METHOD specify;
			FIX L_st, L_loc, phi; (* time and location *)
			FIX gamma; (* surface orientation *)
			FIX t;			
		END specify;
		
		METHOD values;
		END values;
		
		METHOD self_test;
			ASSERT abs(theta-35.0{deg}) < 0.15{deg};
			ASSERT abs(delta-(-13.80{deg})) < 0.02{deg};
		END self_test;		
END sunpos_wrapper;


(* To calculate heat absorbed by the solar receiver of cylindrical shape *) 

MODEL Qabsorbed;

(* Variables *) 

	value 			IS_A intensity; (* Solar radiation absorbed by the receiver tubesin W/m2 *)
	DNI 			IS_A intensity; (* Direct normal insolation in W/m2 *)
	GAMMA			IS_A angle;     (* surface azimuth angle, south=0, west positive *)
	Standard_Time	IS_A time;      (* in hr *) 
	DST				IS_A time;      (* Daylight savings time adjustment, 1 hr during daylight savings time, o during standard time  *) 
	Lst				IS_A angle;     (* Standard meridian for the local time zone, deg *) 
	Lloc			IS_A angle;     (* Local merididan of the collector site, deg *) 
	PHI				IS_A angle;     (* lattitude location of the plant in deg *) 
	Iam				IS_A factor;    (* Incidence angle modifier *) 
	Rs				IS_A factor;    (* Row shadow factor *) 
	(* Weff			IS_A distance;   Effective unshaded width of mirror aperture, m *) 
	W				IS_A distance;  (* Collector aperture width, m *) 
	Lspacing		IS_A distance;  (* Length of spacing between troughs, m *) 
	ENDLOSS			IS_A factor;    (* End loss for the heat collecting elements- HCE *) 
	F				IS_A distance;  (* Focal length of the collectors, m *) 

	Lsca			IS_A distance;  (* Length of single solar collector assembly, m *) 
	Nfield			IS_A fraction;  (* Field efficiency *) 
	Nhce			IS_A fraction;  (* Number of HCE types in the field *) 
	SFAavail		IS_A fraction;  (* Fraction of solar field which is operable and tracking the sun *) 

(* parts *)
	Sunpos IS_A sunpos_wrapper;

(* interconnections *)
	PHI, Sunpos.phi ARE_THE_SAME;
	Lst, Sunpos.L_st ARE_THE_SAME;
	Lloc, Sunpos.L_loc ARE_THE_SAME;
	Standard_Time, Sunpos.t  ARE_THE_SAME;
	GAMMA, Sunpos.gamma  ARE_THE_SAME;
	
(* Equations *) 	
	value = DNI * cos(Sunpos.theta) * Iam * Rs * ENDLOSS * Nfield * Nhce * SFAavail;
	Iam = 1 + 8.84e-4 * (Sunpos.theta/cos(Sunpos.theta)) - 5.369e-5 * (Sunpos.theta^2)/cos(Sunpos.theta);	
	(* Rs = Weff / W; *)
	Rs = (Lspacing/W) * (cos(Sunpos.theta_z)/cos(Sunpos.theta));	
	ENDLOSS = 1 - F * tan(Sunpos.theta) / Lsca;

	METHODS
		METHOD specify;
			FIX DNI;
			FIX Lst;
			FIX Lloc;
			FIX DST;
			FIX Standard_Time;
			FIX Lspacing;
			FIX W;
			FIX F;

			FIX Lsca;
			FIX Nfield;
			FIX Nhce;
			FIX SFAavail;
			FIX PHI;
			
			RUN Sunpos.specify;
		END specify;	
		
		METHOD values;		
			IF (Standard_Time > 12{hour}) THEN
				GAMMA := 90{deg};
			END IF;
			IF (Standard_Time <= 12{hour}) THEN
				GAMMA := -90{deg};
			END IF;
			
			(*  guesses  *) 
			value := 100 {watt/m^2};

			DNI := 60 {watt/m^2};
			Lst := -105 {deg};
			Lloc := -110 {deg};
			DST := 0 {hour};
			PHI := 37.21 {deg};
			Standard_Time := 15 {hour};
			Lspacing := 15 {m};
			W := 5 {m};
			F := 5 {m};
			Lsca := 50 {m};
			Nfield := 0.857;
			Nhce := 0.832;
			SFAavail := 1;
			
		END values;

		
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;	
END Qabsorbed;


(* To calculate heat loss per metre for the field *) 
MODEL HeatLossField;

(* Variables *) 

	DNI IS_A intensity;   (* Direct normal insolation in W/m2 *) 
	Ti IS_A temperature;  (* Input temperature to the field, deg cel *) 
	To IS_A temperature;  (* Output temperature from the field, deg cel *) 
	
	type IS_A variable;
	HCEfra IS_A fraction;  (* The fraction of HCE type in the field *) 

	a0 IS_A solver_var;
	a1 IS_A solver_var;
	a2 IS_A solver_var;
	a3 IS_A solver_var;
	b0 IS_A solver_var;
	b1 IS_A solver_var;
	
	HLfield IS_A heatloss_per_unit_lenght;  

	(* Equation *) 
	
	HLfield * (To-Ti) = HCEfra * (a0*(To-Ti) + (a1/2)*(To^2 - Ti^2) + (a2/3)*(To^3 - Ti^3) + (a3/4)*(To^4 - Ti^4) * DNI*(b0*(To-Ti) + (b1/3)*(To^3 - Ti^3)));

	METHODS	
		METHOD specify;		
			FIX a0;
			FIX a1;
			FIX a2;
			FIX a3;
			FIX b0;
			FIX b1;
			
			FIX DNI;
			FIX Ti;			
		END specify;
	
		METHOD values;		
			DNI := 60 {watt/m^2};
			Ti := 30 {K};
		
			IF (type = 1) THEN
			(*  air  *) 
			a0 := -2.247372E+01 {watt/m^2};
			a1 :=  8.374490E-01 {watt/m^2/K};
			a2 :=  0.00         {watt/m^2/K^2};
			a3 :=  4.620143E-06 {watt/m^2/K^3};
			b0 :=  6.983190E-02	{m};
			b1 :=  9.312703E-08 {m/K^2};
			END IF;
			
			IF (type = 2) THEN
			(*  vaccum  *) 
			a0 := -2.247372E+01 {watt/m^2};
			a1 :=  8.374490E-01 {watt/m^2/K};
			a2 :=  0.00         {watt/m^2/K^2};
			a3 :=  4.620143E-06 {watt/m^2/K^3};
			b0 :=  6.983190E-02	{m};
			b1 :=  9.312703E-08 {m/K^2};
			END IF;
			
			IF (type = 3) THEN
			(*  hydrogen  *) 
			a0 := -2.247372E+01 {watt/m^2};
			a1 :=  8.374490E-01 {watt/m^2/K};
			a2 :=  0.00         {watt/m^2/K^2};
			a3 :=  4.620143E-06 {watt/m^2/K^3};
			b0 :=  6.983190E-02	{m};
			b1 :=  9.312703E-08 {m/K^2};
			END IF;
		END values;		
END HeatLossField;



(* To calculate Q collected by the solar field in W/m2 *) 
MODEL Qcollected;
	
	(*  variables  *) 
    field_types IS_A set OF symbol_constant;
    field_types :== ['air','vaccum','hydrogen'];


	DNI IS_A intensity;
	
	Ti IS_A temperature;  (* Input temperature to the field, deg cel *) 
	To IS_A temperature;  (* Output temperature from the field, deg cel *) 
	Tambient IS_A temperature;  (* Ambient temperature, deg cel *) 
	
	width IS_A distance;	(* Width of mirror aperure, m *) 
	
	RecHL IS_A intensity;   (* Receiver heat loss, W/m2 *) 
	SfHL IS_A intensity;    (* Soalr field piping heat loss, W/m2 *) 
	
	value IS_A intensity;
	delT IS_A delta_temperature;

	rho_i IS_A mass_density;
	hi IS_A specific_enthalpy;
	
	ho IS_A specific_enthalpy;
		
	delHfield IS_A specific_enthalpy;
	
	Lsca IS_A distance;   (* Length of single solar collector assembly, m *) 
	Nsca IS_A factor;     (* Number of solar collector assemblies in the field *) 
	Vhtf IS_A volume_rate; (* m3/hr *) 


	(*  parts  *)
	Qabs IS_A Qabsorbed;
	hlfield[field_types] IS_A HeatLossField;
		
	
	(*  interconnecting  *)  (* Annulus types- air, vaccum, hydrogen *) 
    To,
    hlfield['air'].To,
    hlfield['vaccum'].To,
    hlfield['hydrogen'].To	ARE_THE_SAME;
    DNI, Qabs.DNI			ARE_THE_SAME;
    Lsca, Qabs.Lsca			ARE_THE_SAME;

	
	(*  equations  *)
	RecHL * width = SUM[hlfield[field_types].HLfield];	
	delT * 2 = (To + Ti) - Tambient * 2;
	SfHL = 0.01693{watt/m^2/K}*delT - 0.0001683{watt/m^2/K^2}*(delT^2) + 0.78e-7{watt/m^2/K^3}*(delT^3);	
	value = Qabs.value - (RecHL + SfHL);
	rho_i = 1074.0{kg/m^3} - 0.6367{kg/m^3/K}*Ti - 0.0007762{kg/m^3/K^2}*Ti^2;
	delHfield * (Vhtf * rho_i) = value * width * Lsca * Nsca;
	hi = 1000{m^2/s^2} * (-18.34 + 1.498{1/K}*Ti + 0.001377{1/K^2}*Ti^2);
	ho = 1000{m^2/s^2} * (-18.34 + 1.498{1/K}*To + 0.001377{1/K^2}*To^2);
	delHfield = abs(hi - ho);
	
	
	METHODS
		METHOD specify;
			FIX DNI;
			FIX Ti;
			FIX Tambient;			
			FIX width;
			FIX Lsca;
			FIX Nsca;
			FIX Vhtf;
			FIX hlfield[field_types].HCEfra;
			FIX hlfield[field_types].type;
			
			RUN hlfield[field_types].specify;			
			RUN Qabs.specify;
		END specify;
		
		METHOD values;
			DNI := 60 {watt/m^2};
			Ti := 60{K};
			Tambient := 30{K};
			
			width := 5{m};
			Lsca := 50 {m};
			Nsca := 256;
			Vhtf := 400{m^3/hour};

			hlfield['air'].type := 1;
			hlfield['vaccum'].type := 2;
			hlfield['hydrogen'].type := 3;

			hlfield['air'].HCEfra := 1.0;
			hlfield['vaccum'].HCEfra := 0.0;
			hlfield['hydrogen'].HCEfra := 0.0;


			Qabs.Lst := -105 {deg};
			Qabs.Lloc := -110 {deg};
			Qabs.DST := 0 {hour};
			Qabs.PHI := 37.21 {deg};
			Qabs.Standard_Time := 15 {hour};
			Qabs.Lspacing := 15 {m};
			Qabs.W := 5 {m};
			Qabs.F := 5 {m};
			Qabs.Nfield := 0.857;
			Qabs.Nhce := 0.832;
			Qabs.SFAavail := 1;

			RUN hlfield[field_types].values;
			RUN Qabs.values;

			(*  guesses  *) 
			To := 100{K};
		END values;
		
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;
END Qcollected;

