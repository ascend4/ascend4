(*  This model simulates the Solar field according to the approach of the patnode. *) 

REQUIRE "atoms.a4l";
REQUIRE "solar/solar_types.a4l";

REQUIRE "johnpye/thermo_types.a4c";

(* To calculate heat absorbed by the soalar receiver of cylindrical shape *) 

MODEL Qabsorbed;

(* Variables *) 

	value 			IS_A intensity; (* Solar radiation absorbed by the receiver tubesin W/m2 *) 
	DNI 			IS_A intensity; (* Direct normal insolation in W/m2 *) 
	THETA 			IS_A angle;     (* Angle of incidence *) 
	THETAz	 		IS_A angle;     (* Azimuthal angle of incidence *) 
	DEL 			IS_A angle;     (* Declination angle in deg *) 
	OMEGA			IS_A angle;     (* Hour angle in deg *) 
	n 				IS_A time;      (* The day number of year *) 
	Solar_Time		IS_A time;      (* Solar time in hr *) 
	Standard_Time	IS_A time;      (* in hr *) 
	DST				IS_A time;      (* Daylight savings time adjustment, 1 hr during daylight savings time, o during standard time  *) 
	Lst				IS_A angle;     (* Standard meridian for the local time zone, deg *) 
	Lloc			IS_A angle;     (* Local merididan of the collector site, deg *) 
	E				IS_A time;      (* Equation of the time, min *) 
	B				IS_A angle;     (* in deg *) 
	PHI				IS_A angle;     (* lattitude location of the plant in deg *) 
	Iam				IS_A factor;    (* Incidence angle modifier *) 
	Rs				IS_A factor;    (* Row shadow factor *) 
	Weff			IS_A distance;  (* Effective unshaded width of mirror aperture, m *) 
	W				IS_A distance;  (* Collector aperture width, m *) 
	Lspacing		IS_A distance;  (* Length of spacing between troughs, m *) 
	ENDLOSS			IS_A factor;    (* End loss for the heat collecting elements- HCE *) 
	F				IS_A distance;  (* Focal length of the collectors, m *) 

	Lsca			IS_A distance;  (* Length of single solar collector assembly, m *) 
	Nfield			IS_A fraction;  (* Field efficiency *) 
	Nhce			IS_A fraction;  (* Number of HCE types in the field *) 
	SFAavail		IS_A fraction;  (* Fraction of solar field which is operable and tracking the sun *) 

(* Equations *) 
	
	value = DNI * cos(THETA) * Iam * Rs * ENDLOSS * Nfield * Nhce * SFAavail;

	THETA = arccos( (cos(THETAz)^2 + (cos(DEL)^2)*(sin(OMEGA)^2))^0.5);
	
	DEL = 23.45{deg} * sin(360{deg}* (284{day}+n)/365{day});
	OMEGA = (Solar_Time - 12{hour}) * 15{deg/hour};
	Solar_Time = Standard_Time - DST + (Lst - Lloc)/15{deg/hour} + E*(1{hour})/(60{min});
	E = 229.18{min} * (0.000075 + 0.001868*cos(B) - 0.032077*sin(B) - 0.014615*cos(2*B) - 0.04089*sin(2*B));
	B = 360{deg} * (n-1{day})/365{day};
	THETAz = arccos( cos(DEL)*cos(PHI)*cos(OMEGA) + sin(DEL)*sin(PHI) );
	
	Iam = 1 + 8.84e-4 * (THETA/cos(THETA)) - 5.369e-5 * (THETA^2)/cos(THETA);
	
	Rs = Weff / W;
	Rs = (Lspacing/W) * (cos(THETAz)/cos(THETA));
	
	ENDLOSS = 1 - F * tan(THETA) / Lsca;
	
	
	UNITS
	heat_intensity = {watt/m^2};
	END UNITS;
	

	METHODS
		METHOD specify;
			FIX DNI;
			FIX n;
			FIX Lst;
			FIX Lloc;
			FIX DST;
			FIX Standard_Time;
			FIX Lspacing;
			FIX W;
			FIX F;

			FIX Lsca;
			FIX Nfield;
			FIX Nhce;
			FIX SFAavail;
			FIX PHI;
		END specify;	
		
		METHOD values;
			DNI := 60 {watt/m^2};
			n := 31 {day}; (*  31st January  *) 
			Lst := -105 {deg};
			Lloc := -110 {deg};
			DST := 0 {hour};
			PHI := 37.21 {deg};
			Standard_Time := 12 {hour};
			Lspacing := 15 {m};
			W := 5 {m};
			F := 5 {m};

			Lsca := 50 {m};
			Nfield := 0.857;
			Nhce := 0.832;
			SFAavail := 1;
			
			(*  guesses  *) 
			value := 100 {watt/m^2};
		END values;

		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;

END Qabsorbed;


MODEL test_Qabsorbed;

	Qabs IS_A Qabsorbed;

	METHODS	
		METHOD on_load;
			RUN Qabs.specify;
			RUN Qabs.values;
		END on_load;
		
END test_Qabsorbed;

(* TO calculate heat loss per metre for the field *) 
MODEL HeatLossField;

(* Variables *) 

	DNI IS_A intensity;   (* Direct normal insolation in W/m2 *) 
	Ti IS_A temperature;  (* Input temperature to the field, deg cel *) 
	To IS_A temperature;  (* Output temperature from the field, deg cel *) 
	
	type IS_A variable;
	HCEfra IS_A fraction;  (* The fraction of HCE type in the field *) 

	a0 IS_A solver_var;
	a1 IS_A solver_var;
	a2 IS_A solver_var;
	a3 IS_A solver_var;
	b0 IS_A solver_var;
	b1 IS_A solver_var;
	
	HLfield IS_A heatloss_per_unit_lenght;  

	(* Equation *) 
	
	HLfield * (To-Ti) = HCEfra * (a0*(To-Ti) + (a1/2)*(To^2 - Ti^2) + (a2/3)*(To^3 - Ti^3) + (a3/4)*(To^4 - Ti^4) * DNI*(b0*(To-Ti) + (b1/3)*(To^3 - Ti^3)));

	METHODS	
		METHOD specify;		
			FIX a0;
			FIX a1;
			FIX a2;
			FIX a3;
			FIX b0;
			FIX b1;
			
			FIX DNI;
			FIX Ti;			
		END specify;
	
		METHOD values;		
			DNI := 60 {watt/m^2};
			Ti := 30 {K};
		
			IF (type = 1) THEN
			(*  air  *) 
			a0 := -2.247372E+01 {watt/m^2};
			a1 :=  8.374490E-01 {watt/m^2/K};
			a2 :=  0.00         {watt/m^2/K^2};
			a3 :=  4.620143E-06 {watt/m^2/K^3};
			b0 :=  6.983190E-02	{m};
			b1 :=  9.312703E-08 {m/K^2};
			END IF;
			
			IF (type = 2) THEN
			(*  vaccum  *) 
			a0 := -2.247372E+01 {watt/m^2};
			a1 :=  8.374490E-01 {watt/m^2/K};
			a2 :=  0.00         {watt/m^2/K^2};
			a3 :=  4.620143E-06 {watt/m^2/K^3};
			b0 :=  6.983190E-02	{m};
			b1 :=  9.312703E-08 {m/K^2};
			END IF;
			
			IF (type = 3) THEN
			(*  hydrogen  *) 
			a0 := -2.247372E+01 {watt/m^2};
			a1 :=  8.374490E-01 {watt/m^2/K};
			a2 :=  0.00         {watt/m^2/K^2};
			a3 :=  4.620143E-06 {watt/m^2/K^3};
			b0 :=  6.983190E-02	{m};
			b1 :=  9.312703E-08 {m/K^2};
			END IF;
		END values;		
END HeatLossField;



(* To calculate Q collected by the solar field in W/m2 *) 
MODEL Qcollected;
	
	(*  variables  *) 
    field_types IS_A set OF symbol_constant;
    field_types :== ['air','vaccum','hydrogen'];


	DNI IS_A intensity;
	
	Ti IS_A temperature;  (* Input temperature to the field, deg cel *) 
	To IS_A temperature;  (* Output temperature from the field, deg cel *) 
	Tambient IS_A temperature;  (* Ambient temperature, deg cel *) 
	
	width IS_A distance;	(* Width of mirror aperure, m *) 
	
	RecHL IS_A intensity;   (* Receiver heat loss, W/m2 *) 
	SfHL IS_A intensity;    (* Soalr field piping heat loss, W/m2 *) 
	
	Qcoll IS_A intensity;   
	Qabs IS_A Qabsorbed;
	delT IS_A delta_temperature;

	rho_i IS_A mass_density;
	hi IS_A specific_enthalpy;
	
	ho IS_A specific_enthalpy;
		
	delHfield IS_A specific_enthalpy;
	
	Lsca IS_A distance;   (* Length of single solar collector assembly, m *) 
	Nsca IS_A factor;     (* Number of solar collector assemblies in the field *) 
	Vhtf IS_A volume_rate; (* m3/hr *) 


	(*  parts  *) 
	hlfield[field_types] IS_A HeatLossField;
	
	
	(*  interconnecting  *)  (* Annulus types- air, vaccum, hydrogen *) 
    To,
    hlfield['air'].To,
    hlfield['vaccum'].To,
    hlfield['hydrogen'].To          ARE_THE_SAME;

	
	(*  equations  *) 

	RecHL * width = SUM[hlfield[field_types].HLfield];
	
	delT * 2 = (To + Ti) - Tambient * 2;
	SfHL = 0.01693{watt/m^2/K}*delT - 0.0001683{watt/m^2/K^2}*(delT^2) + 0.78e-7{watt/m^2/K^3}*(delT^3);
	
	Qcoll = Qabs.value - (RecHL + SfHL);


	rho_i = 1074.0{kg/m^3} - 0.6367{kg/m^3/K}*Ti - 0.0007762{kg/m^3/K^2}*Ti^2;
	delHfield * (Vhtf * rho_i) = Qcoll * width * Lsca * Nsca;

	hi = 1000{m^2/s^2} * (-18.34 + 1.498{1/K}*Ti + 0.001377{1/K^2}*Ti^2);
	ho = 1000{m^2/s^2} * (-18.34 + 1.498{1/K}*To + 0.001377{1/K^2}*To^2);
	delHfield = abs(hi - ho);
	
	
	METHODS	
		METHOD specify;		
			FIX DNI;
			FIX Ti;
			FIX Tambient;
			
			FIX width;
			FIX Lsca;
			FIX Nsca;
			FIX Vhtf;

			FIX hlfield[field_types].HCEfra;
			FIX hlfield[field_types].type;
			
			RUN hlfield[field_types].specify;
			
			RUN Qabs.specify;
		END specify;
		
		METHOD values;
			DNI := 60 {watt/m^2};
			Ti := 60{K};
			Tambient := 30{K};
			
			width := 5{m};
			Lsca := 50 {m};
			Nsca := 256;
			Vhtf := 400{m^3/hour};

			hlfield['air'].type := 1;
			hlfield['vaccum'].type := 2;
			hlfield['hydrogen'].type := 3;

			hlfield['air'].HCEfra := 1.0;
			hlfield['vaccum'].HCEfra := 0.0;
			hlfield['hydrogen'].HCEfra := 0.0;

			RUN hlfield[field_types].values;
			RUN Qabs.values;

			(*  guesses  *) 
			To := 100{K};
		END values;
		
		METHOD on_load;
			RUN specify;
			RUN values;
		END on_load;
END Qcollected;



MODEL test_Qcollected;

	Qcoll IS_A Qcollected;

	METHODS
		METHOD on_load;
			RUN Qcoll.specify;
			RUN Qcoll.values;
		END on_load;
		
END test_Qcollected;

