(*
Model of a parabolic trough solar thermal collector field, of the type
of SEGS VI plant, closely following the approach of Angela Patnode (2006).
https://www.nrel.gov/analysis/sam/pdfs/thesis_patnode06.pdf

First version by Vikram Kaadam (2011) as part of GSOC2011.
Second version by John Pye (2012).
*)
REQUIRE "ivpsystem.a4l";
REQUIRE "atoms.a4l";
REQUIRE "johnpye/thermo_types.a4c";
REQUIRE "solar/tracker.a4l"; (* sun position *)
REQUIRE "solar/therminol.a4c"; (* oil properties *)
REQUIRE "johnpye/datareader/testtmy3.a4c"; (* weather data reader *)

(* refinement base, used in the parabolic_trough model... *)
MODEL absorber_loss_base;
END absorber_loss_base;

(*
	Heat loss per metre length of absorber tube, including convective, conductive 
	and radiative losses.	
*) 
MODEL absorber_loss(
	type IS_A symbol_constant;
	T_i_K WILL_BE temperature;
	T_o_K WILL_BE temperature;
	DNI WILL_BE power_per_area;
) REFINES absorber_loss_base;

	T_i, T_o IS_A delta_temperature;
	T_i = T_i_K - 273.15 {K};
	T_o = T_o_K - 273.15 {K};

	a[0..3] IS_A real_constant;
	b[0,1] IS_A real_constant;
	
	SELECT(type)
	CASE 'vacuum':
		(* an intact HCE, evacuated air at 0.0001 Torr *)
		a[0] :== -2.247372E+01 {W/m^2};
		a[1] :==  8.374490E-01 {W/m^2/K};
		a[2] :==  0.00         {W/m^2/K^2};
		a[3] :==  4.620143E-06 {W/m^2/K^3};
		b[0] :==  6.983190E-02 {m};
		b[1] :==  9.312703E-08 {m/K^2};
	CASE 'hydrogen':
		(* intact HCE into which hydrogen has diffused to a pressure off 1 Torr *)
		a[0] :== -2.247372E+01 {W/m^2};
		a[1] :==  8.374490E-01 {W/m^2/K};
		a[2] :==  0.00         {W/m^2/K^2};
		a[3] :==  4.620143E-06 {W/m^2/K^3};
		b[0] :==  6.983190E-02 {m};
		b[1] :==  9.312703E-08 {m/K^2};
	CASE 'air':
		(* a broken glass envelope; contents will be air at ambient pressure *)
		a[0] :== -2.247372E+01 {W/m^2};
		a[1] :==  8.374490E-01 {W/m^2/K};
		a[2] :==  0.00         {W/m^2/K^2};
		a[3] :==  4.620143E-06 {W/m^2/K^3};
		b[0] :==  6.983190E-02 {m};
		b[1] :==  9.312703E-08 {m/K^2};		
	END SELECT;
	
	Qd_loss IS_A power_per_length;  

	(* FIXME this equation assumes temperatures in degC. T^3 in degC? Bah! *)

	(* heat loss calculated as integral wrt temperature, Patnode eq 2.18. *)
	Qd_loss * (T_o - T_i) = SUM[a[i]*(T_o^(i+1) - T_i^(i+1))/(i+1) | i IN [0..3]] + DNI * (b[0] + b[1]/3*(T_o^3 - T_i^3));
	(* NOTE above eq assumes linear temperature rise with position? is that suff valid? *)
	(* NOTE above eq assumes ambient temperature of 25 C (Patnode sect 2.3.2) -- should adjust for changes in T_amb?? *)
	(* NOTE also the equation in Lippke 1995 for bare tubes, which has a different form and requires wind speed *)
	(* NOTE that Lippke says that end loss must be included in the above equation (eq 7, p. 11) *)
END absorber_loss;

MODEL absorber_loss_test;
	type IS_A symbol_constant;
	type :== 'vacuum';
	T_i, T_o IS_A temperature;
	DNI IS_A power_per_area;
	abso IS_A absorber_loss(type,T_i,T_o,DNI);
	Qd_loss ALIASES abso.Qd_loss;
METHODS 
METHOD on_load;
	FIX DNI, T_i, T_o;
	DNI := 1000 {W/m^2};
	T_i := 300 {K} +  273.15 {K};
	T_o := 400 {K} + 237.15 {K};
END on_load;
END absorber_loss_test;


(*
	Model of a parabolic trough field, based on the approach of Patnode, but
	modified to allow for arbitrary (horizontal) orientation of the collector
	axis.
*) 
MODEL parabolic_trough;
	(* field geometry *)
	W_apert    "collector aperture width" IS_A distance;
	L_spacing  "'length of spacing' between troughs" IS_A distance; (* clarification required, assume centre-to-centre? *)
	L_SCA      "length of a single solar collector assembly (SCA)" IS_A distance;
	N_SCA      "total number of solar collector assemblies" IS_A factor;
	f          "focal length of collector" IS_A distance;

	A_field    IS_A area;
	A_field = N_SCA * L_SCA * W_apert;

	(* field performance *)
	Qdd_abs    "solar radiation absorbed by receiver tubes per aperture area" IS_A power_per_area;
	DNI        "direct normal irradiance" IS_A power_per_area;
	IAM        "incidence angle modifier" IS_A factor;
	eta_shading IS_A fraction;
	eta_endloss IS_A fraction;
	eta_field  "averaged field efficiency" IS_A fraction;
	eta_HCE    "averaged heat collection element efficiency" IS_A fraction;
	avail_SF   "solar field availability - on-sun portion" IS_A fraction;
	
	(* tracker and sun position *)
	sun        IS_A solar_tracker_single_horiz;
	t          "local time (standard, not DST correction)" ALIASES sun.t;

	(* constants that define the location -- can we do this better?? *)
	(* Kramer Junction *)
	sun.loc.latitude :== 37.21 {deg};
	sun.loc.longitude :== -117.022 {deg};
	sun.loc.elevation :== 755 {ft};
	(* TODO the location should be extracted from the weather data *)

	(* weather data (download your TMY3, see http://ascend4.org/Data_reader) *)
	dr IS_A tmy3;
	dr.tmydata.filename :== 'johnpye/datareader/723815TY.csv';
	t, dr.t ARE_THE_SAME;
	T_amb ALIASES dr.T;
	T_amb, sun.T ARE_THE_SAME;
	p_amb ALIASES dr.p;
	p_amb, sun.p ARE_THE_SAME;
	DNI, dr.DNI ARE_THE_SAME;

	(* OPTICAL PERFORMANCE *)
	
	(* absorbed solar radiation, Patnode eq 2.1. factored the cos(theta) into IAM. *)	
	absheat_eq: Qdd_abs = DNI * IAM * eta_shading * eta_endloss * eta_field * eta_HCE * avail_SF;
	(* NOTE that eta_field and eta_HCE are given fixed values here, though their 
	components factors are shown in Patnode sect 2.2.5 *)

	(* TODO where is Patnode eq 2.8 ? looks like an error? *)
	
	(* incidence angle modifier, Patnode eq 2.9 *)
	(* TODO check... do these values assume angles in degrees? *)
	IAM * cos(sun.theta) = cos(sun.theta) + 8.84e-4 * sun.theta - 5.369e-5 * sun.theta^2;
	
	(* row shading (Stuetzle), Patnode eq 2.12, limited to range [0,1] *)
	eta_shading_1, eta_shading_2 IS_A factor; (* before being normalised to [0,1] *)
	shading_1: eta_shading_1 = (L_spacing/W_apert) * (cos(sun.zenith)/cos(sun.theta));
	shading_2: eta_shading_2 = 1. + 0.5*((eta_shading_1 - 1) - abs(eta_shading_1 - 1));
	shading_3: eta_shading = (eta_shading_2 + abs(eta_shading_2))/2;

	(* end loss (Lippke), Patnode eq 2.13, limited to range [0,1] *)
	eta_endloss_1, eta_endloss_2 IS_A factor;
	endloss_1: eta_endloss_1 = 1 - f * tan(sun.theta) / L_SCA;
	endloss_2: eta_endloss_2 = 1. + 0.5*((eta_endloss_1 - 1) - abs(eta_endloss_1 - 1));
	endloss_3: eta_endloss = (eta_endloss_2 + abs(eta_endloss_2))/2;

	(* LOSSES FROM HCE *)
	
	T_i, T_o IS_A temperature;
	hce_types IS_A set OF symbol_constant;
	hce_types :== ['air','vacuum','hydrogen'];

	abso[hce_types] IS_A absorber_loss_base;
	hce_frac[hce_types] IS_A fraction;
	FOR i IN hce_types CREATE
		abso[i] IS_REFINED_TO absorber_loss(i, T_i, T_o, DNI);
	END FOR;
	
	Qdd_loss_recv "HCE losses per aperture area" IS_A power_per_area;
	(* receiver heat loss, Patnode eq 2.19 *)
	Qdd_loss_recv * W_apert = SUM[abso[i].Qd_loss * hce_frac[i] | i IN hce_types];
	
	(* LOSSES FROM FIELD PIPING *)
	DT "temperature difference ambient to field piping" IS_A delta_temperature;
	(* average external temp difference, Patnode eq 2.21 *)
	T_amb + DT = 0.5 * (T_i + T_o);

	Qdd_loss_pipe "losses from pipework, per solar field aperture area" IS_A power_per_area;
	
	(* solar field piping loses, Patnode eq 2.20 *)
	Qdd_loss_pipe = 0.01693{W/m^2/K}*DT - 0.0001683{W/m^2/K^2}*(DT^2) + 0.78e-7{W/m^2/K^3}*(DT^3);	
	(* typically 10 W/m2 or less, apparently *)
	
	(* NET ENERGY GAIN IN HTF *)
	
	Vdot_i IS_A volume_rate;
	Qdd_fluid IS_A power_per_area;
	(* net absorbed energy, Patnode eq 2.22 *)
	Qdd_fluid = Qdd_abs - Qdd_loss_pipe - Qdd_loss_recv;
	
	inlet, outlet IS_A therminol;
	inlet.T, T_i ARE_THE_SAME;
	outlet.T, T_o ARE_THE_SAME;
	
	Q_net IS_A energy_rate;
	Q_net = Qdd_fluid * A_field;
	
	(* first-law energy balance, Patnode eq 2.23 *)
	(outlet.h - inlet.h) * inlet.rho * Vdot_i = Q_net;

METHODS
	METHOD specify;
		RUN sun.specify;
		FIX L_spacing;
		FIX W_apert, f, L_SCA, eta_field, eta_HCE, avail_SF;
		
		FIX inlet.T;
		FIX N_SCA;
		FIX Vdot_i;
		FIX hce_frac[hce_types];
		FIX t;
		FREE sun.p, sun.T;
	END specify;

	METHOD values;		
		L_spacing := 13 {m};
		W_apert := 4.83 {m};
		f := 5 {m};
		L_SCA := 50 {m};
		N_SCA := 256;

		(* tracker, including sun position and geographical location *)
		RUN sun.values;
		sun.offset.tz := -8{h};
		sun.offset.h := 0;
		t := 43.5 {d};

		(* fixed field efficiency based on values in Patnode Table 2.1 *)
		eta_field := 0.857;
		eta_HCE := 0.832;
		avail_SF := 1;

		inlet.T := 60{K} + 273.15 {K};
		T_amb := 30{K} + 273.15 {K};
		Vdot_i := 400{m^3/hour};

		hce_frac['air'] := 1.0;
		hce_frac['vacuum'] := 0.0;
		hce_frac['hydrogen'] := 0.0;

		(* initial guess, needed for solving OK  *) 
		T_o := 200 {K} + 273.15{K};
	END values;

	METHOD on_load;
		RUN specify;
		RUN values;
	END on_load;	
END parabolic_trough;

