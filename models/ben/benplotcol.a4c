REQUIRE "ben/bencolumn.a4l";
(* --> measures,system,atoms,components,options,HGthermo,stream,flash,column *)
REQUIRE "plot.a4l";

MODEL demo_plot_column(
	components IS_A set OF symbol_constant;
	reference IS_A symbol_constant;
        n_trays IS_A integer_constant;
        feed_location IS_A integer_constant;
) WHERE (
        reference IN components == TRUE;
        n_trays > 5;
        feed_location > 2;
        feed_location < n_trays - 2;
) REFINES demo_column;

	z_eq_tray_set IS_A set OF integer_constant;
	z_eq_tray_set :== Column.VLE_set;
	z_eq_tray_coord[z_eq_tray_set] IS_A real;
	z_icmp IS_A set OF integer_constant;
	z_icmp :== [1..CARD[components]];

	FOR i IN [components] CREATE
		x_curves[i] IS_A plt_curve(
			Column.zx[i],
			Column.Profile_x[i],
			z_eq_tray_coord
		);
		y_curves[i] IS_A plt_curve(
			Column.zy[i],
			Column.Profile_y[i],
			z_eq_tray_coord
		);
		k_curves[i] IS_A plt_curve(
			Column.zk[i],
			Column.Profile_kvalues_when_full_thermo[i],
			z_eq_tray_coord
		);
	END FOR;
	t_curve IS_A plt_curve(Column.zT,Column.Profile_T,z_eq_tray_coord);
	t_curves[1] ALIASES t_curve;
	p_curve IS_A plt_curve(Column.zP,Column.Profile_P,z_eq_tray_coord);
	p_curves[2] ALIASES p_curve;
	Plot_x IS_A plt_plot_symbol(components,x_curves);
	Plot_y IS_A plt_plot_symbol(components,y_curves);
	Plot_K IS_A plt_plot_symbol(components,k_curves);
	Plot_T IS_A plt_plot_integer([1],t_curves);
	Plot_P IS_A plt_plot_integer([2],p_curves);

(* this stuff needs work 
(* in conversion process from bob's mcplot code.
	SELECT (CARD[components])
	CASE 2: 
	(* mccabe thiele plot only for 2 components *)

(* these get mapped into parameters *)
	mceq.npnt :== Plot_x.curve[reference].npnt;
	mcstages.npnt :== 2*(Plot_x.curve[reference].npnt) + 1;
	mcopline.npnt :== Plot_x.curve[reference].npnt+1;
	mcident.npnt :== 2;
	mcqline.npnt :== 2;


	FOR j IN [1..mceq.npnt] CREATE
		mceq.pnt[j].x, Plot_x.curve[reference].pnt[j].y	ARE_THE_SAME;
		mceq.pnt[j].y, Plot_y.curve[reference].pnt[j].y	ARE_THE_SAME;

		mcstages.pnt[2*j-1], mcopline.pnt[j]	ARE_THE_SAME;
		mcstages.pnt[2*j], mceq.pnt[j]		ARE_THE_SAME;
	END FOR;

	FOR j IN [2..mcopline.npnt-1] CREATE
		mcopline.pnt[j].x, Plot_x.curve[reference].pnt[j-1].y
		ARE_THE_SAME;
		mcopline.pnt[j].y, Plot_y.curve[reference].pnt[j].y
		ARE_THE_SAME;
	END FOR;

	mcstages.pnt[1].x, mcstages.pnt[1].y, Plot_y.curve[reference].pnt[1].y
	ARE_THE_SAME;

	mcstages.pnt[2*(Plot_x.curve[reference].npnt)+1].x,
	mcstages.pnt[2*(Plot_x.curve[reference].npnt)+1].y,
	Plot_x.curve[reference].pnt[Plot_x.curve[reference].npnt].y
	ARE_THE_SAME;

	mcstages.pnt[2*(Plot_x.curve[reference].npnt)+1],
	mcopline.pnt[Plot_x.curve[reference].npnt+1]	ARE_THE_SAME;

	mcident.pnt[1], mcopline.pnt[1]	ARE_THE_SAME;
	mcident.pnt[2], mcopline.pnt[mcopline.npnt] ARE_THE_SAME;

	mcqline.pnt[2], mceq.pnt[col.feed_loc]	ARE_THE_SAME;

(* stuff below here or something very like should work when complete *)

	(* I may be missing the distillate from mceq and mcstagex *)
	mceq IS_A plt_curve(
		Column.zx[reference],
		Column.Profile_x[reference],
		Column.Profile_y[reference]
	);

	mcstagex[mc_sx_pts] ALIASES ((
		(Column.Profile_x[reference][k],Column.Profile_x[reference][k])
		 | k IN z_eq_tray_set),
		Column.Profile_x[reference][Column.N_trays])
	WHERE mc_sx_pts IS_A set OF integer_constant;

	(* this one may be way off *)
	mcstagey[mc_sy_pts] ALIASES ((
		(Column.Profile_Y[reference][k+1],
		 Column.Profile_Y[reference][k])
		 | k IN z_eq_tray_set),
		Column.Profile_x[reference][Column.N_trays])
	WHERE mc_sy_pts IS_A set OF integer_constant;

	(* If we get all the curves built ok, this part is a nobrainer *)
	mc_curves[mc_set] ALIASES (mceq,mcstages,mcopline,mcident,mcqline)
	WHERE mc_set IS_A set OF integer_constant;

	Plot_MT	IS_A plt_plot_integer(mc_set,mc_curves);

	OTHERWISE
	END FOR;  (* select CARD components *)

*)
*)

METHODS
METHOD values;
	RUN demo_column::values;
	FOR i IN z_eq_tray_set DO
		z_eq_tray_coord[i] := i;
	END FOR;
	t_curve.legend := 'temperature';
	p_curve.legend := 'pressure';
	FOR i IN components DO
		y_curves[i].legend := i;
		x_curves[i].legend := i;
		k_curves[i].legend := i;
	END FOR;
	Plot_x.title := 'Liquid Compositions';
	Plot_y.title := 'Vapor Compositions';
	Plot_K.title := 'Volatilities';
	Plot_T.title := 'Temperature';
	Plot_P.title := 'Pressure';
	Plot_P.XLabel := 'tray number';
	Plot_T.XLabel := 'tray number';
	Plot_y.XLabel := 'tray number';
	Plot_x.XLabel := 'tray number';
	Plot_K.XLabel := 'tray number';
	Plot_T.YLabel := '{K}';
	Plot_P.YLabel := '{Pascal}';
	Plot_y.YLabel := 'mole fraction';
	Plot_x.YLabel := 'mole fraction';
	Plot_K.YLabel := 'K value';
	(* make composition plots cover 0 - 1 *)
	Plot_x.Ylow := 0;
	Plot_x.Yhigh := 1;
	Plot_y.Ylow := 0;
	Plot_y.Yhigh := 1;
(* This part ok when Plot_MT is finished above.
	IF CARD[components] == 2 THEN
		Plot_MT.title := 'McCabe-Thiele Diagram';
		Plot_MT.XLabel := 'Liquid composition';
		Plot_MT.YLabel := 'Vapor composition';
		mceq.legend := 'equilibrium';
		mcstages.legend := 'stages';
		mcopline.legend := 'operating line';
		mcident.legend := 'x=y';
		mcqline.legend := 'qline';
	END FOR;
*)
END values;

END demo_plot_column;

MODEL testdemoplotmodel() REFINES testcmumodel();
END testdemoplotmodel;
MODEL mw_demo_plot_column() REFINES testdemoplotmodel();
        mw_column IS_A demo_plot_column(['methanol','water'],'water',13,7);
METHODS 
METHOD defaults;
	RUN mw_column.defaults;
END defaults;
END mw_demo_plot_column;

MODEL abc_demo_plot_column() REFINES testdemoplotmodel();
        abc_column IS_A
        demo_plot_column(['benzene','chloroform','acetone'],'benzene',13,7);
METHODS 
METHOD defaults;
	RUN abc_column.defaults;
END defaults;
END abc_demo_plot_column;

MODEL c567_demo_plot_column() REFINES testdemoplotmodel();
        c567_column IS_A
        demo_plot_column(['n_pentane','n_hexane','n_heptane'],'n_heptane',13,7);
METHODS 
METHOD defaults;
	RUN c567_column.defaults;
END defaults;
END c567_demo_plot_column;
