REQUIRE "ben/benHGthermo.a4l"; 
(* --> measures,system,atoms,components, propertyoptions *)
PROVIDE "benstream.a4l";
(*********************************************************************\
stream.lib
by Robert S. Huss
Part of the Ascend Library

This file is part of the Ascend modeling library.

Copyright (C) 1993-1997 Carnegie Mellon University

The Ascend modeling library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Ascend Language Interpreter is distributed in hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

\*********************************************************************)

(*********************************************************************\
  $Date: 1998/06/01 15:43:30 $
  $Revision: 1.1 $
  $Author: ballan $
  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/ben/benstream.a4l,v $
\*********************************************************************)
(*
  S T R E A M . L I B
  -------------------

  AUTHOR:		Robert S. Huss

  DATES:		5/93 - Original code.
  9/93 - Slight changes to original code,
         added vapor_liquid_stream model.
  6/94 - Made compatible with ASCEND3C
  8/94 - Made compatible with H_G_thermodynamics.lib.
         Can still be used with H_S_thermodynamics.lib
  3/95 - Added relation scaling for absolute convergence

  CONTENTS:	Stream definitions, ranging from a simple molar
                stream to a thermodynamic multiphase stream.  
                Molar stream can be refined to include 
                thermodynamic models, if data are available
                for each component.

  *)


(* ***********************************+************************************ *)
(* ********************      Stream definitions       ********************* *)
(* ***********************************+************************************ *)
MODEL stream_base(
) REFINES cmumodel();
(*
NOTES inline SELF {
Provides common ancestor FOR streams.
NEVER CREATE one OF these
}
END NOTES;
*)
END stream_base;

(* ***********************************+************************************ *)
(* ********************      homogeneous_molar_stream ********************* *)
(* ***********************************+************************************ *)


MODEL homogeneous_molar_stream(
	state WILL_BE homogeneous_mixture;
) REFINES stream_base;

	components ALIASES state.options.ds.components;
	Ftot, f[components]     IS_A molar_rate;
	boundwidth			IS_A bound_width;
	Ftot_scale 		IS_A real;


	FOR i IN components CREATE
	    f_def[i]: f[i]/Ftot_scale = Ftot*state.y[i]/Ftot_scale; 
	END FOR;

  METHODS
METHOD defaults;
	Ftot_scale := 1000 {mole/s};
(* horrible scaling method - global var, ack! *)
END defaults;

    METHOD clear;
	RUN state.clear;
	FREE Ftot;
	FREE f[components];
	f_def[components].included:= TRUE;
    END clear;

    METHOD seqmod;
	RUN state.specify;
	FREE state.y[components];
    END seqmod;

    METHOD specify;  
	RUN seqmod;   
	FIX f[components];
    END specify;

    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;

    METHOD scale;
	RUN state.scale;
	FOR i IN components DO
	    f[i].nominal := f[i] + 0.1{mol/s};
	    f[i].upper_bound := f[i] + boundwidth*f[i].nominal;
	END FOR;
	Ftot.nominal := Ftot + 0.1{mol/s};
	Ftot.upper_bound := Ftot + boundwidth*Ftot.nominal;
	Ftot_scale := Ftot.nominal;
    END scale;
END homogeneous_molar_stream;


(* ***********************************+************************************ *)
(* ********************homogeous_thermodynamic_stream ********************* *)
(* ***********************************+************************************ *)

MODEL homogeneous_td_stream(
	state WILL_BE homogeneous_mixture;
) REFINES homogeneous_molar_stream;
(*
NOTES inline SELF {
td_stream here does NOT denote that the state is a td_homo or td_hetero
mixture. It merely indicates that total H is computed so that certain
thermodynamic principles may be applied using this type of stream.
state.H may be an arbitrary number if the state does not compute
it from some correlation.
}
END NOTES;
*)

	H				ALIASES state.H;
	Htot				IS_A energy_rate;
	Htot_scale			IS_A real;

	Htot_def: Htot/Htot_scale = H*Ftot/Htot_scale;


  METHODS
METHOD defaults;
	RUN homogeneous_molar_stream::defaults;
	Htot_scale := 1{MW};
END defaults;
    METHOD clear;
	RUN state.clear;
	FREE Ftot;
	FREE f[components];
	FREE Htot;
	FREE H;
	f_def[components].included	:= TRUE;
	Htot_def.included		:= TRUE;
    END clear;
    METHOD seqmod;
	RUN state.specify;
	FREE state.y[components];
	FIX H;
    END seqmod;


    METHOD scale;
	RUN state.scale;
	FOR i IN components DO
	    f[i].nominal := f[i] + 0.1{mol/s};
	    f[i].upper_bound := f[i] + boundwidth*f[i].nominal;
	END FOR;
	Ftot.nominal := Ftot + 0.1{mol/s};
	Ftot.upper_bound := Ftot + boundwidth*Ftot.nominal;
	Htot.nominal := abs(Htot) + 1{kW};
	Htot.lower_bound := Htot - boundwidth*Htot.nominal;
	Htot.upper_bound := Htot + boundwidth*Htot.nominal;
	Ftot_scale := Ftot.nominal;
	Htot_scale := Htot.nominal;

    END scale;

END homogeneous_td_stream;


    
(* ***********************************+************************************ *)
(* ********************      two_phase_molar_stream  ********************* *)
(* ***********************************+************************************ *)


MODEL two_phase_molar_stream(
	state WILL_BE two_phase_mixture;
) REFINES stream_base;

	components ALIASES state.components;
	Ftot,
	f[components]		IS_A molar_rate;
	boundwidth		IS_A bound_width;
	Ftot_scale 		IS_A real;


	FOR i IN components CREATE
	    f_def[i]: f[i]/Ftot_scale = Ftot*state.y[i]/Ftot_scale; 
	END FOR;


  METHODS
METHOD defaults;
	Ftot_scale := 1000 {mole/s};
(* horrible scaling method - global var, ack! *)
END defaults;
    METHOD clear;
	RUN state.clear;
	FREE Ftot;
	FREE f[components];
	f_def[components].included:= TRUE;
    END clear;

    METHOD seqmod;
	RUN state.specify;
	FREE state.y[components];
    END seqmod;

    METHOD specify;  
	RUN seqmod;   
	FIX f[components];
    END specify;

    METHOD reset;
	RUN clear;
	RUN specify;
    END reset;

    METHOD scale;
	RUN state.scale;
	FOR i IN components DO
	    f[i].nominal := f[i] + 0.1{mol/s};
	    f[i].upper_bound := f[i] + boundwidth*f[i].nominal;
	END FOR;
	Ftot.nominal := Ftot + 0.1{mol/s};
	Ftot.upper_bound := Ftot + boundwidth*Ftot.nominal;
	Ftot_scale := Ftot.nominal;
    END scale;
END two_phase_molar_stream;


(* ***********************************+************************************ *)
(* ********************     thermodynamic_stream      ********************* *)
(* ***********************************+************************************ *)

MODEL two_phase_td_stream(
	state WILL_BE two_phase_mixture;
) REFINES two_phase_molar_stream;
(*
NOTES inline SELF {
td_stream here does NOT denote that the state is a td_homo or td_hetero
mixture. It merely indicates that total H is computed so that certain
thermodynamic principles may be applied using this type of stream.
state.H may be an arbitrary number if the state does not compute
it from some correlation.
}
END NOTES;
*)

	H				ALIASES state.H;
	Htot				IS_A energy_rate;
	Htot_scale			IS_A real;

	Htot_def: Htot/Htot_scale = H*Ftot/Htot_scale;


  METHODS
METHOD defaults;
	RUN two_phase_molar_stream::defaults;
	Htot_scale := 1{MW};
END defaults;
    METHOD clear;
	RUN state.clear;
	FREE Ftot;
	FREE f[components];
	FREE Htot;
	FREE H;
	f_def[components].included	:= TRUE;
	Htot_def.included		:= TRUE;
    END clear;
    METHOD seqmod;
	RUN state.specify;
	FREE state.y[components];
	FIX H;
    END seqmod;


    METHOD scale;
	RUN state.scale;
	FOR i IN components DO
	    f[i].nominal := f[i] + 0.1{mol/s};
	    f[i].upper_bound := f[i] + boundwidth*f[i].nominal;
	END FOR;
	Ftot.nominal := Ftot + 0.1{mol/s};
	Ftot.upper_bound := Ftot + boundwidth*Ftot.nominal;
	Htot.nominal := abs(Htot) + 1{kW};
	Htot.lower_bound := Htot - boundwidth*Htot.nominal;
	Htot.upper_bound := Htot + boundwidth*Htot.nominal;
	Ftot_scale := Ftot.nominal;
	Htot_scale := Htot.nominal;

    END scale;

END two_phase_td_stream;

(* ***********************************+************************************ *)
(* ********************          vapor_stream         ********************* *)
(* ***********************************+************************************ *)

MODEL vapor_stream (
	state WILL_BE vapor_mixture;
) REFINES homogeneous_td_stream;

  METHODS

    METHOD seqmod;
	RUN state.specify;
	FREE state.y[components];
    END seqmod;

END vapor_stream;


(* ***********************************+************************************ *)
(* ********************         liquid_stream         ********************* *)
(* ***********************************+************************************ *)

MODEL liquid_stream(
	state WILL_BE liquid_mixture;
) REFINES homogeneous_td_stream;

	manual IS_A boolean_start_false; (* Set to TRUE to get Ken behavior *)
	saturated IS_A boolean_start_false;

bubble_point: state.P = state.pure[CHOICE[components]].VP *
		SUM[ state.y[i] * state.pure[i].VP /
			state.pure[CHOICE[components]].VP | i IN components];
	WHEN (manual)
	CASE TRUE:
		USE bubble_point;
		(* user may diddle bubble_point.included flag *)
	CASE FALSE:
		WHEN (saturated)
		CASE TRUE:
			USE bubble_point;
		CASE FALSE:
			(* ignore bubble_point *)
		END WHEN;
	END WHEN;

  METHODS

METHOD defaults;
	saturated := FALSE;
	RUN homogeneous_td_stream::defaults;
END defaults;

    METHOD seqmod;
	RUN state.specify; (* fixes T, among others *)
	FREE state.y[components];
	IF (saturated) THEN
		FREE state.T;
	END IF;
	IF (manual) THEN
		IF (saturated) THEN
	    		bubble_point.included		:= TRUE;
		ELSE
	    		bubble_point.included		:= FALSE;
		END IF;
	END IF;
    END seqmod;

END liquid_stream;


(* ***********************************+************************************ *)
(* ********************      multiphase_stream        ********************* *)
(* ***********************************+************************************ *)

MODEL multiphase_stream( 
	state WILL_BE td_two_phase_mixture;
) REFINES two_phase_td_stream;

	phases ALIASES state.phases;
	phase_flow[phases]		IS_A molar_rate;

	FOR k IN phases CREATE
	    phase_flow_def[k]: phase_flow[k]/Ftot_scale =
		state.phi[k]*Ftot/Ftot_scale;
	END FOR;

  METHODS

    METHOD clear;      
	RUN state.clear;
	FREE Ftot;
	FREE f[components];
	FREE Htot;
	FREE phase_flow[phases];
	Htot_def.included			:= TRUE;
	f_def[components].included	:= TRUE;
	phase_flow_def[phases].included	:= TRUE;
    END clear;

    METHOD scale;
	RUN state.scale;
	FOR i IN components DO
	    f[i].nominal := f[i] + 0.1{mol/s};
	    f[i].upper_bound := f[i] + boundwidth*f[i].nominal;
	END FOR;
	Ftot.nominal := Ftot + 0.1{mol/s};
	Ftot.upper_bound := Ftot + boundwidth*Ftot.nominal;
	Htot.nominal := abs(Htot) + 1{kW};
	Htot.lower_bound := Htot - boundwidth*Htot.nominal;
	Htot.upper_bound := Htot + boundwidth*Htot.nominal;

	FOR j IN phases DO
	    phase_flow[j].nominal := phase_flow[j] + 0.1{mol/s};
	    phase_flow[j].upper_bound :=
		phase_flow[j] + boundwidth*phase_flow[j].nominal;
	END FOR;
	Ftot_scale := Ftot.nominal;
	Htot_scale := Htot.nominal;
    END scale;

    METHOD seqmod;
	RUN state.specify;
	FREE state.y[components];
    END seqmod;

END multiphase_stream;


MODEL vapor_liquid_stream(
	state WILL_BE td_VLE_mixture;
) REFINES multiphase_stream;
(* nobody *)
END vapor_liquid_stream;
