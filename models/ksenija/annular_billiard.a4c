REQUIRE "ivpsystem.a4l";
REQUIRE "atoms.a4l";

MODEL annular_billiard;

	x, y IS_A solver_var; (* coordinates of the particle *)
	a, b IS_A solver_var; (* velocities *)
	R, r IS_A solver_var; (* radii of the outer and inner circles *)
	xo1, yo1, xo2, yo2 IS_A solver_var; (* centers of the outer and inner circles *)
	x0, y0, k, bb, k1, b1, xp, yp, x1, y1, derr IS_A solver_var;
	q, m, B IS_A solver_var;
	vnx, vtx, vny, vty, vnx1, vny1, vn1 IS_A solver_var;
	oev, iev IS_A boolean_var;
	t IS_A time;
	INDEPENDENT t;
	DERIVATIVE OF x, y, a, b, r, R;

	radius1: der(r) = 10*(1/4)*(1/3)*cos(t/3);
	radius2: der(R) = 40*(1/4)*(1/3)*cos(t/3);

	der(x) = a;
	der(y) = b;

	der(a) = (q*B*b)/m;
	der(b) = -(q*B*a)/m;

	normal: derr = (x*a+y*b)/sqrt(x*x+y*y);

	CONDITIONAL
		outer: (x-xo1)*(x-xo1) + (y-yo1)*(y-yo1) > R*R;
		inner: (x-xo2)*(x-xo2) + (y-yo2)*(y-yo2) < r*r;
	END CONDITIONAL;

	oev == SATISFIED(outer);
	iev == SATISFIED(inner);

	ev1: EVENT(oev)
		CASE TRUE:
		OTHERWISE: USE normal;
	END EVENT;

	ev2: EVENT(iev)
		CASE TRUE:
		OTHERWISE: USE normal;
	END EVENT;

METHODS
	METHOD obs_init;
		y.obs_id := 1;
		x.obs_id := 2;
		der(y).obs_id := 3;
		der(x).obs_id := 4;
		r.obs_id := 5;
		R.obs_id := 6;
		derr.obs_id := 7;
		vn1.obs_id := 8;
		der(R).obs_id := 9;
	END obs_init;

	METHOD before_integ;
		FREE a,b,x,y;
	END before_integ;

	METHOD values;
		FIX x := 10;
		FIX y := 20;
		FIX b := 1.5;
		FIX a := 1;
		FIX t := 0 {s};
		oev   := FALSE;
		iev   := FALSE;
		FIX xo1 := 0;
		FIX yo1 := 0;
		FIX xo2 := 0;
		FIX yo2 := 0;
		R  := 40;
		r  := 10;
		FIX q := 0.1;
		FIX m := 1;
		FIX B := 0;
	END values;

	METHOD on_load;
		RUN values;
		RUN obs_init;
	END on_load;

	METHOD ev1;
		x0 := x - a;
		y0 := y - b;
		k  := (yo1 - y)/(xo1 - x);
		bb  := y - k*x;
		b1 := y0 + (1/k)*x0;
		xp := (b1 - bb)/(k + (1/k));
		yp := k*xp + bb;

		vnx := x - xp;
		vny := y - yp;
		vtx := xp - x0;
		vty := yp - y0;

		vn1 := -derr + 2*der(R);
		vnx1 := (vnx*vn1)/derr;
		vny1 := (vny*vn1)/derr;

		x1  := x + vnx1 + vtx;
		y1  := y + vny1 + vty;

		FIX a  := x1 - x;
		FIX b  := y1 - y;
		derr := (x*a+y*b)/sqrt(x*x+y*y);
	END ev1;

	METHOD ev1_end;
		FREE a, b;
	END ev1_end;

	METHOD ev2;
		x0 := x - a;
		y0 := y - b;
		k  := (yo2 - y)/(xo2 - x);
		bb  := y - k*x;
		b1 := y0 + (1/k)*x0;
		xp := (b1 - bb)/(k + (1/k));
		yp := k*xp + bb;

		vnx := x - xp;
		vny := y - yp;
		vtx := xp - x0;
		vty := yp - y0;

		vn1 := -derr + 2*der(r);
		vnx1 := (vnx*vn1)/derr;
		vny1 := (vny*vn1)/derr;

		x1  := x + vnx1 + vtx;
		y1  := y + vny1 + vty;

		FIX a  := x1 - x;
		FIX b  := y1 - y;
		derr := (x*a+y*b)/sqrt(x*x+y*y);
	END ev2;

	METHOD ev2_end;
		FREE a, b;
	END ev2_end;

END annular_billiard;
