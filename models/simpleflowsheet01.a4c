REQUIRE "atoms.a4l";
(* => atoms.a4l, measures.a4l, system.a4l, basemodel.a4l *)
PROVIDE "simpleflowsheet01.a4c";

(*
 *  simpleflowsheet01.a4c
 *  by Arthur W. Westerberg
 *  Part of the ASCEND Library
 *  $Date: 2006/04/10 10:08:42 $
 *  $Revision: 1.95 $
 *  $Author: a.westerberg $
 *
 *  This file is part of the ASCEND Modeling Library.
 *
 *  Copyright (C) 1998 Carnegie Mellon University
 *
 *  The ASCEND Modeling Library is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  The ASCEND Modeling Library is distributed in hope that it
 *  will be useful, but WITHOUT ANY WARRANTY; without even the implied
 *  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139 USA.  Check
 *  the file named COPYING.
 *)


(*

The following example illustrates equation based modeling using the
ASCEND system.  The process is a simple recycle process.



                                          -------
                                         |       |
                   ----------------------| split |----> purge
                  |                      |       |
                  |                       -------
                  |                          ^
                  v                          |
                -----      ---------      -------
               |     |    |         |    |       |
         ----->| mix |--->| reactor |--->| flash |
               |     |    |         |    |       |
                -----      ---------      -------
                                             |
                                             |
                                              ----->  C

This model requires: 	"system.a4l"
		    	"atoms.a4l"
*)


(* ************************************************* *)


MODEL mixture;

	components                      IS_A set OF symbol_constant;
        y[components]                   IS_A fraction;

        SUM[y[i] | i IN components] = 1.0;

  METHODS

    METHOD default_self;
    END default_self;

    METHOD specify;
        FIX y[components];
        FREE y[CHOICE[components]];
    END specify;

    METHOD reset;
        RUN ClearAll;
        RUN specify;
    END reset;

END mixture;

(* ************************************************* *)


MODEL molar_stream;

	components				IS_A set OF symbol_constant;
	state					IS_A mixture;
        Ftot,f[components]			IS_A molar_rate;

	components, state.components		ARE_THE_SAME;


	FOR i IN components CREATE
	    f_def[i]: f[i] = Ftot*state.y[i];
	END FOR;

  METHODS

    METHOD default_self;
    END default_self;

    METHOD seqmod;
	RUN state.specify;
	FREE state.y[components];
    END seqmod;

    METHOD specify;
	RUN seqmod;
	FIX f[components];
    END specify;

    METHOD reset;
	RUN ClearAll;
	RUN specify;
    END reset;

    METHOD scale;
	FOR i IN components DO
 	  f[i].nominal := f[i] + 0.1{mol/s};
	END FOR;
	Ftot.nominal := Ftot + 0.1{mol/s};
    END scale;

END molar_stream;

(* ************************************************* *)


MODEL mixer;

	n_inputs		IS_A		integer_constant;
	feed[1..n_inputs], out	IS_A		molar_stream;

	feed[1..n_inputs].components,
	out.components				ARE_THE_SAME;

	FOR i IN out.components CREATE
	  cmb[i]: out.f[i] = SUM[feed[1..n_inputs].f[i]];
	END FOR;

  METHODS

    METHOD default_self;
    END default_self;

    METHOD seqmod;
    END seqmod;

    METHOD specify;
	RUN seqmod;
	RUN feed[1..n_inputs].specify;
    END specify;

    METHOD reset;
	RUN ClearAll;
	RUN specify;
    END reset;

    METHOD scale;
	RUN feed[1..n_inputs].scale;
	RUN out.scale;
    END scale;

END mixer;

(* ************************************************* *)


MODEL reactor;

	feed, out			IS_A		molar_stream;
	feed.components, out.components			ARE_THE_SAME;

	turnover			IS_A		molar_rate;
	stoich_coef[feed.components]	IS_A		factor;

	FOR i IN feed.components CREATE
		out.f[i] = feed.f[i] + stoich_coef[i]*turnover;
	END FOR;

  METHODS

    METHOD default_self;
    END default_self;

    METHOD seqmod;
	FIX turnover;
	FIX stoich_coef[feed.components];
    END seqmod;

    METHOD specify;
	RUN seqmod;
	RUN feed.specify;
    END specify;

    METHOD reset;
	RUN ClearAll;
	RUN specify;
    END reset;

    METHOD scale;
	RUN feed.scale;
	RUN out.scale;
	turnover.nominal := turnover.nominal+0.0001 {kg_mole/s};
    END scale;

END reactor;

(* ************************************************* *)


MODEL flash;

	feed,vap,liq		IS_A		molar_stream;

	feed.components,
	vap.components,
	liq.components				ARE_THE_SAME;

	alpha[feed.components],
	   ave_alpha		IS_A		factor;

	vap_to_feed_ratio	IS_A		fraction;

	vap_to_feed_ratio*feed.Ftot = vap.Ftot;

	FOR i IN feed.components CREATE
		cmb[i]: feed.f[i] = vap.f[i] + liq.f[i];
		eq[i]:  vap.state.y[i]*ave_alpha = alpha[i]*liq.state.y[i];
	END FOR;

  METHODS

    METHOD default_self;
    END default_self;

    METHOD seqmod;
	FIX alpha[feed.components];
	FIX vap_to_feed_ratio;
    END seqmod;

    METHOD specify;
	RUN seqmod;
	RUN feed.specify;
    END specify;

    METHOD reset;
	RUN ClearAll;
	RUN specify;
    END reset;

    METHOD scale;
	RUN feed.scale;
	RUN vap.scale;
	RUN liq.scale;
    END scale;

END flash;

(* ************************************************* *)


MODEL splitter;

	n_outputs			IS_A		integer_constant;
	feed, out[1..n_outputs]		IS_A		molar_stream;
	split[1..n_outputs]		IS_A		fraction;

	feed.components, out[1..n_outputs].components 	ARE_THE_SAME;

	feed.state,
	out[1..n_outputs].state		ARE_THE_SAME;

	FOR j IN [1..n_outputs] CREATE
		out[j].Ftot = split[j]*feed.Ftot;
	END FOR;

	SUM[split[1..n_outputs]] = 1.0;

  METHODS

    METHOD default_self;
    END default_self;

    METHOD seqmod;
	FIX split[1..n_outputs-1];
    END seqmod;

    METHOD specify;
	RUN seqmod;
	RUN feed.specify;
    END specify;

    METHOD reset;
	RUN ClearAll;
	RUN specify;
    END reset;

    METHOD scale;
	RUN feed.scale;
	RUN out[1..n_outputs].scale;
    END scale;

END splitter;

(* ************************************************* *)


MODEL flowsheet;

	m1				IS_A		mixer;
	r1				IS_A		reactor;
	fl1				IS_A		flash;
	sp1				IS_A		splitter;

(* define sets *)

	m1.n_inputs				:==	2;
	sp1.n_outputs				:==	2;

(* wire up flowsheet *)

	m1.out, r1.feed				ARE_THE_SAME;
	r1.out, fl1.feed			ARE_THE_SAME;
	fl1.vap, sp1.feed			ARE_THE_SAME;
	sp1.out[2], m1.feed[2]			ARE_THE_SAME;

  METHODS

    METHOD default_self;
    END default_self;

    METHOD seqmod;
	RUN m1.seqmod;
	RUN r1.seqmod;
	RUN fl1.seqmod;
	RUN sp1.seqmod;
    END seqmod;

    METHOD specify;
	RUN seqmod;
	RUN m1.feed[1].specify;
    END specify;

    METHOD reset;
	RUN ClearAll;
	RUN specify;
    END reset;

    METHOD scale;
	RUN m1.scale;
	RUN r1.scale;
	RUN fl1.scale;
	RUN sp1.scale;
    END scale;

END flowsheet;

(* ************************************************* *)


MODEL controller;

	fs 			IS_A		flowsheet;
	conv			IS_A		fraction;
	key_components		IS_A		symbol_constant;
	fs.r1.out.f[key_components] = (1 - conv)*fs.r1.feed.f[key_components];

  METHODS

    METHOD default_self;
    END default_self;

    METHOD specify;
	RUN fs.specify;
	FREE fs.r1.turnover;
	FIX conv;
    END specify;

    METHOD reset;
	RUN ClearAll;
	RUN specify;
    END reset;

    METHOD scale;
	RUN fs.scale;
    END scale;

END controller;

(* ************************************************* *)


MODEL test_flowsheet REFINES flowsheet;

	m1.out.components			:==	['A','B','C'];

  METHODS

    METHOD default_self;
        (* no-op. here to avoid STOP statement. *)
    END default_self;
    
    METHOD values;
	m1.feed[1].f['A']		:=	0.005  {kg_mole/s};
	m1.feed[1].f['B']		:=	0.095 {kg_mole/s};
	m1.feed[1].f['C']		:=	0.0  {kg_mole/s};

	r1.stoich_coef['A']		:=	0;
	r1.stoich_coef['B']		:=	-1;
	r1.stoich_coef['C']		:=	1;

	fl1.alpha['A']			:=	12.0;
	fl1.alpha['B']			:=	10.0;
	fl1.alpha['C']			:=	1.0;
	fl1.vap_to_feed_ratio		:=	0.9;
	fl1.ave_alpha			:=	5.0;

	sp1.split[1]			:=	0.01;

	fl1.liq.Ftot			:=	m1.feed[1].f['B'];
    END values;

END test_flowsheet;

(* ************************************************* *)


MODEL test_controller REFINES controller;

	fs			IS_REFINED_TO	test_flowsheet;
	key_components 			:==	'B';

  METHODS

    METHOD default_self;
        (* no-op. here to avoid STOP statement. *)
    END default_self;
    
    METHOD values;
	RUN fs.values;
	conv				:=	0.07;
    END values;

METHOD on_load;
	RUN default_self;
	RUN reset;
	RUN values;
END on_load;

METHOD self_test;
	ASSERT abs(fs.m1.feed[2].f['C'] - 88.43978 {mol/s})< 0.0002 {mol/s};
END self_test;

END test_controller;


(*
 *  simpleflowsheet01.a4c
 *  by Arthur W. Westerberg
 *  Part of the ASCEND Library
 *  $Date: 2006.03.03 10:29:34
 *
 *  This file is part of the ASCEND Modeling Library.
 *
 *  Copyright (C) 1994 - 1998 Carnegie Mellon University
 *
 *  The ASCEND Modeling Library is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  The ASCEND Modeling Library is distributed in hope that it
 *  will be useful, but WITHOUT ANY WARRANTY; without even the implied
 *  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139 USA.  Check
 *  the file named COPYING.
 *)
