REQUIRE "atoms.a4l";
REQUIRE "plot.a4l";

(*  ASCEND modelling environment
	Copyright (C) 1994-1998, 2006 Carnegie Mellon University
	
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2, or (at your option)
	any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330,
	Boston, MA 02111-1307, USA.
*)

(*============================================================================

    I V P S T E P  .  A 4 C
    -----------------------------

    AUTHOR:      Arthur W. Westerberg

    DATES:       07/2002 - Original code (AWW)
                 07/2003 - Tested code.  Works for simple test problem.
		 (AWW)
		 12/2003 - Added Tcl script that runs complete simulation
		 (AWW)

    CONTENTS:	 Models for the numerical integration equations for
                 the two multistep methods: BDF for stiff problems
		 and the Adams Moulton for non-stiff problems.  There
		 is also a framework within which one creates the
		 model for the physical system.  These models are for
		 taking one step of the independent variable.

============================================================================*)


(* ---------------------------------------------------------- *)

MODEL ivpBase() REFINES cmumodel();

    (* ----- ivpBase -----
       The base model for solving DAE initial value problems using the
       multistep methods: (a) a bdf method for stiff problems and (b)
       the Adams Moulton method for non-stiff problems.  A DAE ivp
       model has two types of sets of equations:

       (1) the model of the physical system at the k-th step

	      f(dydx(k), y(k), z(k), u(k), x(k)) = 0
	      h(y(k), z(k), u(k), x(k))          = 0
	      u(k) = u(x(k))

	  where y are the state, z the algebraic and u the forcing
	  variable vectors and x the scalar independent variable, and
	  where f is a vector of functions equal to the number of
	  states, h is a vector of algebraic equations equal in number
	  to the algebraic variables, and where one typically
	  specifies the forcing variables as functions only of the
	  independent variable.

      (2) the numerical multistep integration equations
      
	      y(k) = y(k-1) + s(x[k]-x[k-1];
                                y[k-1],y[k-2],...;
                                dydx[k],dydx[k-1],...)
	      
	  These equations relate the states at the current point to
	  the time derivatives at current and past points and states
	  at past points.  They are not related to the model of the
	  physical system but only to the numerical method being used.

       A common solving approach would be to solve the integration
       equations in an outside loop, and, for each iteration of that
       outside loop, use a Newton-based method to solve the physical
       system model for the state derivatives and the algebraic
       variables.  Often this approach solves the outer loop using a
       simple substitution method - which can be very slow to
       converge.  The following figure illustrates.
 

                       ------------------     
            u(x) ->---|   (inner loop)   |---- z  -->
                      | solve model eqns |
            ------>---|                  |-- dydx-->-  
           |           ------------------            |
           |                                         |
           |           ------------------            |
           |          |   (outer loop)   |           |
            --- y,x =-|  iterate  inte-  |---<-------
                      |   gration eqns   |
                      |                  |
                       ------------------


       By creating both the model and integration equations through
       ASCEND models, ASCEND can simultaneously converge the model
       and integration equations using its sparse Newton-based solver
       - thus making the solving much more efficient.  We wrote this
       model precisely to gain this efficiency.
       

       The integration module - degrees of freedom considerations
       
       For the q-th order bdf and Adams-Moulton (am) methods used
       here, we write a q-th order polynomial in the independent
       variable x for each state variable y[k][i].  This polynomial is
       written in the form of a Taylor Series expanded around the
       current point x[k].

       A q-th order polynomial has the q+1 polynomial coefficients in
       it a[k][i]/i!.  The a[k][i] are estimate the q-th derivative of
       the function at the current point, with the q-th term being an
       estimate of the error in the fit.  We determine these
       coefficients by fitting this polynomial and/or the first
       derivative of this polynomial to past y[j][i] and dy/dt[j][i],
       j<k, data, respectively, and to the computed value for
       dy/dt[k][i] at the current point.  We would need to write
       precisely q+1 such equations for this fitting.  The bdf and am
       methods differ in which equations we write to do this fitting.
       See comments in later in the code for the actual polynomials we
       write.

       We then use this polynomial evaluated at the current point to
       estimate the state y[k][i] at the current point x[k].

       Looking back at the two boxes in the previous figure, the lower
       integration box will have these q+1 equations in it, tabulated
       values for previous points, and the means to use past data and
       the current estimate for dy/dt[k][i] (the input we show above
       for this box) to fit the coefficients for each state variable.
       It will also write the polynomial one additional time to
       provide the estimate for y[k][i] at the current point, which is
       the output from this box.  It thus contains q+2 polynomial
       equations in it, in terms of q+1 unknown coefficients for each
       state.  The model equations introduce the states y[k][i] and their
       derivatives dy/dx[k][i] for the current point and the equation to
       compute the latter in terms of the former, often in the form

           dy/dt[k][i] = f(all y[k],t).  

       So it introduces, in principle two variables and one equation
       for each state.

       To summarize, the integration box introduces q+1 equations and
       q+2 variables per state while the model box introduces 1
       equation and 2 new variables.  The model is in square and
       solvable.


       Predictor behavior

       The polynomial we fit for the current point can easily be used
       to predict y[k+1][i], the values for the states i at the next
       time step.  We can also create polynomials to predict any of
       the non state variables in the problem.  We can include these
       non state variables in the integration model and use the
       current and q past values to determine the coefficients for a
       Taylor Series polynomial that passes through these points.
       This polynomial would only be useful for predicting as it play
       no role in solving the problem.  But often predicting one of
       the algebraic variables might improve the chance to converge
       the equations.


       Error control

       The package checks periodically to see discover the size step
       it should take to keep the error at that the user has
       prescribed.  It can also change the order of the polynomial up
       or down by one if such a move will allow for a larger step.

       We write the polynomial in the form of a Taylor Series around
       the current point.  So the error in estimating the current
       point, as a function of the step size we take, is the highest
       order term in that series.  We back compute the step size
       needed to obtain the error we allow and use it as the step size
       for the next integration step.  We keep this step size for the
       next q steps before checking again.  Changing the order of the
       polynomial can also affect the error.  This package will change
       the order up or down by one (i.e., to q-1 or q+1 (keeping in
       the limits of 1 and 6) if that change allows it to take a
       larger step.  The next to last term in the Taylor Series
       estimates the error when using a polynomial of order q-1.  We
       estimate the derivative for order q+1 as the difference in the
       q-th derivative between the current point and the previous
       point divided by the change in x between these two points -
       i.e., a divided difference which is essentially a free
       calculation.


       Stopping conditions

       We have created this package so one can stop whenever any of
       the variables we are predicting (all the states and whichever
       of the non states we select) crosses through zero.  In taking a
       normal step in this package, we use the error control criterion
       to fix the step size in the independent variable, x, prior to
       taking the next step.  If after we solve the model for this
       step, any one of the variables we have selected to use as
       stopping conditions changes sign, we fix its value to zero and
       resolve the entire model to compute the step size.  As more
       than one such variable may change sign in this final interval,
       we test after each solution to see if another variable changed
       sign in the reduced interval we just computed.  If so, we
       repeat by fixing this new variable to zero and resolving.  In
       this manner we will find the variable that changed sign at the
       earliest point in the final interval.

     *)

     (* ----- ivpBase -----
       TO USE THIS PACKAGE, the user must provide three models that
       are refinements of models we provide here.  The first two
       will be refinements of integrationPoint, while the third must be
       a refinement of ivpStep.  See the comments for those models.
       Also see the model ivpStep.testModel.a4c, which is a prototype
       for what the user must write.
       
       NOTE: THE MODELS IN THIS LIBRARY ARE WRITTEN USING DIMENSIONLESS
       QUANTITIES.  THE USER MUST CONVERT ANY DIMENSIONAL STATES
       AND PREDICTED ALGEBRAIC VARIABLES, AND ALL STOPPING CONDITIONS,
       ERRORS, ETC., TO DIMENSIONLESS VARIABLES FOR TYING INTO THESE
       MODELS.
       
     *)

    
END ivpBase;

(* ---------------------------------------------------------- *)

MODEL factorial(
    N         IS_A integer_constant;
    )
WHERE(
    N>=0;
    N<=12;  (* Note that 12! = 0.48E9, 2^31=2.1E9 *)
) REFINES ivpBase();
    
    (* create a vector of factorials, where fac[i] contains
      i!, where i goes from 0 to N *)

    fac[0..N] IS_A factor;

METHODS

    (* ----- factorial ----- *)

    METHOD default_self;
		fac[0] := 1;

		(* if N=0, the following loop produces no code *)
		FOR i IN [1..N] DO
		    fac[i] := i*fac[i-1];
		END FOR;
    END default_self;

    (* ----- factorial ----- *)

    METHOD specify;
		FIX fac[0..N];
    END specify;

END factorial;

(* ---------------------------------------------------------- *)

MODEL pTrow(
    set IS_A set OF integer_constant;
) REFINES ivpBase();

    (* This model is needed and instanced in
      "MODEL pascalTriangle."  No user should
      instance it by itself. *)

    col[set] IS_A factor;
    
END pTrow;

(* ---------------------------------------------------------- *)

MODEL pascalTriangle(
    dim IS_A integer_constant;
) REFINES ivpBase();
    
    (* Creates a Pascal Triangle of dimension "dim."
      A Pascal triangle gives the coefficients for the
      polynomials resulting from expanding (x-y)^q,
      for q = 0..dim.  For dim=5, the triangle we form
      here is
      
      row(1): 1  1  1  1  1  1
      row(2): 1  2  3  4  5
      row(3): 1  3  6 10
      row(4): 1  4 10
      row(5): 1  5
      row(6): 1
      
      The coefficients for q=4 for (x-y)^4 are then in
      the next to last place in each row, namely
      1, 4, 6, 4, 1
      as in
      (1)x^4 - (4)x^3y + (6)x^2y^2 - (4)xy^3 + (1)y^4.
      *)
 
    FOR i IN [0..dim] CREATE
		row[i] IS_A pTrow([0..dim-i]);
    END FOR;
    
    METHODS
    
    (* ----- pascalTriangle ----- *)

    METHOD default_self;
		FOR i IN [0..dim] DO
		    row[0].col[i] := 1;
		    row[i].col[0] := 1;
		END FOR;
		FOR i IN [1..dim] DO
		    FOR j IN [1..dim-i] DO
			row[i].col[j] := row[i-1].col[j]+row[i].col[j-1];
		    END FOR;
		END FOR;
    END default_self;

    (* ----- pascalTriangle ----- *)

    METHOD specify;
		FOR i IN [0..dim] DO
		    FOR j IN [0..dim-i] DO
			FIX row[i].col[j];
		    END FOR;
		END FOR;
    END specify;
    
END pascalTriangle;

(* ---------------------------------------------------------- *)
(* ---------------------------------------------------------- *)
(* ---------------------------------------------------------- *)
(* ---------------------------------------------------------- *)
(* ---------------------------------------------------------- *)
(* ---------------------------------------------------------- *)

MODEL yPolysDef(
    y         WILL_BE factor;
    dx        WILL_BE factor;
    dim       WILL_BE integer_constant;
    a[0..dim] WILL_BE factor;
) WHERE(
    (dim >= 3) == TRUE;
);

(*
  create a polynomial equation for y of order dim at the
  independent variable dx.
*)

    f                  IS_A factorial(dim);
    yTerm[0..dim]      IS_A factor;
    
    yTerm[dim] = a[dim]/f.fac[dim];
    FOR i IN [2..dim] CREATE
	yTermEqn[i-1]: yTerm[i-1] =
	    a[i-1]/f.fac[i-1] + dx*yTerm[i];
    END FOR;
    yTermEqn0: y = a[0] + dx*yTerm[1];
    
END yPolysDef;

(* ---------------------------------------------------------- *)

MODEL dydxPolysDef(
    dydx      WILL_BE factor;
    dx        WILL_BE factor;
    dim       WILL_BE integer_constant;
    a[0..dim] WILL_BE factor;
) WHERE(
    (dim >= 3) == TRUE;
);

(*
  create a polynomial equation for dydx of order dim at the
  independent variable dx.
*)

    f                  IS_A factorial(dim);
    dydxTerm[0..dim-1] IS_A factor;
    
    dydxTerm[dim] = a[dim]/f.fac[dim-1];
    FOR i IN [3..dim] CREATE
	dydxTermEqn[i-1]: dydxTerm[i-1] =
	    a[i-1]/f.fac[i-2] + dx*dydxTerm[i];
    END FOR;
    dydxTermEqn1: dydx = a[1] + dx*dydxTerm[2];

END dydxPolysDef;

(* ---------------------------------------------------------- *)

MODEL state(
    y             WILL_BE solver_var;
    dydx          WILL_BE solver_var;
    dim           WILL_BE integer_constant;
) WHERE(
    (dim >= 3) == TRUE;
);

(*
  Model to provide storage for the state variable y, its derivative
  dydt, and the  independent variable dx, written at current and
  past points.  Note that dx = 0 at the current point.  All variables
  are stored in dimensionless form (of type factor), by  dividing
  values by nominal values when storing or retrieving.
  
  It also provides polynomials of order dim at current and past points
  for the integration equations written "around" the current point.
 *)
  

    (* storage *)
    yStore[0..dim]     IS_A factor;
    dydxStore[0..dim]  IS_A factor;
    dxStore[0..dim]    IS_A factor;
    
    (* polynomials *)
    a[0..dim]          IS_A factor;
    FOR i IN [1..dim] CREATE
	yPolys[i]      IS_A yPolysDef(yStore[i],    dxStore[i], dim, a);
	dydxPolys[i-1] IS_A yPolysDef(dydxStore[i-1], dxStore[i-1], dim, a);
    END FOR;
    
    (* Note that a[0] and a[1] predict y and dydx at the current point *)
    yPredEqn:    y/y.nominal       = a[0];
    dydxPredEqn: dydx/dydx.nominal = a[1];
  
(*
  
  The solver can now choose which order and which method to use as
  follows for an order q method 
  
  Set coefficients a[q+1..dim] to zero and fix.
  
  To choose the AM method, set only the following included flags to TRUE
    polys.dydxTermEqn[0..q-1]
    polys.yTermEqn[1]

  To choose the BDF method, set only the following included flags to TRUE
    polys.dydxTermEqn[0]
    polys.yTermEqn[1..q]
    
  One will have written q+1 eqns in either case in the q+1 coefficients
  a[0..q].
  
  *)
    
    METHODS
    
    METHOD default_self;
    END default_self;

    METHOD specify;
    END specify;
    
    METHOD values;
    END values;

    METHOD setUseMethodAM;
    END setUseMethodAM;

    METHOD setUseMethodBDF;
    END setUseMethodBDF;

    METHOD incrementPolyOrder;
    END incrementPolyOrder;

    METHOD decrementPolyOrder;
    END decrementPolyOrder;
    
    METHOD stepX;
    END stepX;
    
END state;

(* ---------------------------------------------------------- *)
    
MODEL predictedAlgebraic(
    z WILL_BE solver_var;
    dim WILL_BE integer_constant;
) WHERE(
    (dim >= 3) == TRUE;
);

    (* storage *)
    zStore[0..dim]    IS_A factor;
    dxStore[0..dim]   IS_A factor;
    
    (* polynomials *)
    a[0..dim]         IS_A factor;
    FOR i IN [0..dim] CREATE
	zPolys[i]    IS_A yPolysDef(zStore[i],    dxStore[i], dim, a);
    END FOR;

(*    
  Note that algebraic prediction is only to improve initial guesses
  for z at the current point so z will not necessarily equal its
  converged current value.  Do not include a prediction equation.
  
  The solver can now choose which order to use as follows for an order
  q method
  
  Set coefficients a[q+1..dim] to zero and fix.

  Set only the following include flags to TRUE
    polys.yTermEqn[0..q]
  
  One will have written q+1 eqns in the q+1 coefficients a[0..q].
*)

END predictedAlgebraic;

(* ---------------------------------------------------------- *)

MODEL myDynamicModel;
    
    maxPolyOrder          IS_A integer_constant;
    maxPolyOrder          :== 6;

    t,dt                  IS_A time;
    holdup                IS_A mole;
    dholdup_dt            IS_A delta_molar_rate;
    flowIn, flowOut,
    flowStop, flowMin     IS_A molar_rate;
    Cv                    IS_A positive_factor; (* valve constant *)
    
    holdupState           IS_A state(holdup, dholdup_dt, maxPolyOrder);
    predFlowStop          IS_A predictedAlgebraic(flowStop, maxPolyOrder);

    eqnDynTankholdup:     dholdup_dt = flowIn - flowOut;
    eqnFlowOut:           (flowOut/1{mol/s})^2 = Cv^2*(holdup/1.0{mol});
    eqnStoppingCond:      flowStop = flowOut - flowMin;

    METHODS

    METHOD default_self;
    END default_self;
	
    METHOD specifyForInitializing;
    END specifyForInitializing;
    
    METHOD valuesForInitializing;
    END valuesForInitializing;
    
    METHOD specifyForStepping;
    END specifyForStepping;
    
    METHOD valuesForStepping;
    END valuesForStepping;

    METHOD testForIndexProblem;
    END testForIndexProblem;

END myDynamicModel;

(* ---------------------------------------------------------- *)


