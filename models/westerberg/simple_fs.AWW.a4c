REQUIRE "atoms.a4l";
(* => atoms.a4l, measures.a4l, system.a4l, basemodel.a4l *)
PROVIDE "simple_fs.a4c";
(*
 * This file is part of the ASCEND Modeling Library and is released
 * under the GNU Public License as described at the end of this file.
 *
 * Use of this module is demonstrated by the associated script file
 * simple_fs.a4s.
 *)

(*

The following example illustrates equation based modeling using the
ASCEND system.  The process is a simple recycle process.



                                          -------
                                         |       |
                   ----------------------| split |----> purge
                  |                      |       |
                  |                       -------
                  |                          ^
                  v                          |
                -----      ---------      -------
               |     |    |         |    |       |
         ----->| mix |--->| reactor |--->| flash |
               |     |    |         |    |       |
                -----      ---------      -------
                                             |
                                             |
                                              ----->  C

This model requires:    "system.a4l"
                        "atoms.a4l"
*)


(* ************************************************* *)


MODEL mixture;

    components                      IS_A set OF symbol_constant;
    y[components]                   IS_A fraction;

    SUM[y[i] | i IN components] = 1.0;

    METHODS
    
    METHOD default_self;
    END default_self;

    METHOD specify;
	FIX y[components];
        FREE y[CHOICE[components]];
    END specify;

 END mixture;

(* ************************************************* *)


MODEL molar_stream;

    components                              IS_A set OF symbol_constant;
    state                                   IS_A mixture;
    Ftot,f[components]                      IS_A molar_rate;

    components, state.components            ARE_THE_SAME;


    FOR i IN components CREATE
	f_def[i]: f[i] = Ftot*state.y[i];
    END FOR;

    METHODS
  
    METHOD default_self;
    END default_self;

    METHOD specify;
        RUN state.specify;
        FREE state.y[components];
        FIX f[components];
    END specify;

    METHOD scale;
        FOR i IN components DO
          f[i].nominal := f[i] + 0.1{mol/s};
        END FOR;
        Ftot.nominal := Ftot + 0.1{mol/s};
    END scale;

END molar_stream;

(* ************************************************* *)


MODEL mixer;

    n_inputs                IS_A            integer_constant;
    feed[1..n_inputs], out  IS_A            molar_stream;

    feed[1..n_inputs].components,
    out.components                          ARE_THE_SAME;

    FOR i IN out.components CREATE
	cmb[i]: out.f[i] = SUM[feed[1..n_inputs].f[i]];
    END FOR;

    METHODS

    METHOD default_self;
	RUN feed[1..n_inputs].default_self;
	RUN out.default_self;
    END default_self;

    METHOD specify;
	RUN feed[1..n_inputs].specify;
	RUN out.specify;
	FREE out.f[out.components];
    END specify;

    METHOD scale;
        RUN feed[1..n_inputs].scale;
        RUN out.scale;
    END scale;

END mixer;

(* ************************************************* *)


MODEL reactor;

    feed, out                       IS_A            molar_stream;
    feed.components, out.components                 ARE_THE_SAME;

    turnover                        IS_A            molar_rate;
    stoich_coef[feed.components]    IS_A            factor;

    FOR i IN feed.components CREATE
	out.f[i] = feed.f[i] + stoich_coef[i]*turnover;
    END FOR;

    METHODS

    METHOD default_self;
	RUN feed.default_self;
	RUN out.default_self;
    END default_self;

    METHOD specify;
	FIX turnover;
        FIX stoich_coef[feed.components];
	RUN feed.specify;
	RUN out.specify;
	FREE out.f[out.components];
    END specify;

    METHOD scale;
        RUN feed.scale;
        RUN out.scale;
        turnover.nominal := turnover.nominal+0.0001 {kg_mole/s};
    END scale;

END reactor;

(* ************************************************* *)


MODEL flash;

    feed,vap,liq            IS_A            molar_stream;

    feed.components,
    vap.components,
    liq.components                          ARE_THE_SAME;

    alpha[feed.components],
    ave_alpha            IS_A            factor;

    vap_to_feed_ratio       IS_A            fraction;

    vap_to_feed_ratio*feed.Ftot = vap.Ftot;

    FOR i IN feed.components CREATE
	cmb[i]: feed.f[i] = vap.f[i] + liq.f[i];
	eq[i]:  vap.state.y[i]*ave_alpha = alpha[i]*liq.state.y[i];
    END FOR;

    METHODS

    METHOD default_self;
	RUN feed.default_self;
	RUN vap.default_self;
	RUN liq.default_self;
    END default_self;

    METHOD specify;
        FIX alpha[feed.components];
        FIX vap_to_feed_ratio;
        RUN feed.specify;
	RUN vap.specify;
	RUN liq.specify;
	FREE vap.f[feed.components];
	FREE liq.f[feed.components];
    END specify;

    METHOD scale;
        RUN feed.scale;
        RUN vap.scale;
        RUN liq.scale;
    END scale;

END flash;

(* ************************************************* *)


MODEL splitter;

    n_outputs                       IS_A            integer_constant;
    feed, out[1..n_outputs]         IS_A            molar_stream;
    split[1..n_outputs]             IS_A            fraction;

    feed.components, out[1..n_outputs].components   ARE_THE_SAME;

    feed.state,
    out[1..n_outputs].state         ARE_THE_SAME;
    
    FOR j IN [1..n_outputs] CREATE
	out[j].Ftot = split[j]*feed.Ftot;
    END FOR;

    SUM[split[1..n_outputs]] = 1.0;

    METHODS

    METHOD default_self;
	RUN feed.default_self;
	RUN out[1..n_outputs].default_self;
    END default_self;

    METHOD specify;
	FIX split[1..n_outputs-1];
	RUN feed.specify;
	RUN out[1..n_outputs].specify;
	FREE out[1..n_outputs].f[feed.components];
    END specify;

    METHOD scale;
        RUN feed.scale;
        RUN out[1..n_outputs].scale;
    END scale;

END splitter;

(* ************************************************* *)


MODEL flowsheet;

    m1                              IS_A            mixer;
    r1                              IS_A            reactor;
    fl1                             IS_A            flash;
    sp1                             IS_A            splitter;

    (* define sets *)

    m1.n_inputs                             :==     2;
    sp1.n_outputs                           :==     2;

    (* wire up flowsheet *)

    m1.out, r1.feed                         ARE_THE_SAME;
    r1.out, fl1.feed                        ARE_THE_SAME;
    fl1.vap, sp1.feed                       ARE_THE_SAME;
    sp1.out[2], m1.feed[2]                  ARE_THE_SAME;
    
    maxProduct: MAXIMIZE fl1.liq.f['C'];
    minReactant: MINIMIZE fl1.liq.f['B'];

    METHODS

    METHOD default_self;
	RUN m1.default_self;
	RUN r1.default_self;
	RUN fl1.default_self;
	RUN sp1.default_self;
    END default_self;

    METHOD specify;
	RUN sp1.specify;
	RUN fl1.specify;
	RUN r1.specify;
	RUN m1.specify;
	FREE sp1.out[2].f[sp1.feed.components];
    END specify;

    METHOD scale;
        RUN m1.scale;
        RUN r1.scale;
        RUN fl1.scale;
        RUN sp1.scale;
    END scale;

END flowsheet;

(* ************************************************* *)


MODEL controller;

    fs                      IS_A            flowsheet;
    conv                    IS_A            fraction;
    key_components          IS_A            symbol_constant;
    fs.r1.out.f[key_components] = (1 - conv)*fs.r1.feed.f[key_components];

    METHODS

    METHOD default_self;
	RUN fs.default_self;
    END default_self;

    METHOD specify;
        RUN fs.specify;
        FREE fs.r1.turnover;
        FIX conv;
    END specify;

    METHOD scale;
        RUN fs.scale;
    END scale;

END controller;

(* ************************************************* *)


MODEL test_flowsheet REFINES flowsheet;

    m1.out.components                       :==     ['A','B','C'];

    METHODS

    METHOD values;
	m1.feed[1].f['A']               :=      0.005  {kg_mole/s};
        m1.feed[1].f['B']               :=      0.095 {kg_mole/s};
        m1.feed[1].f['C']               :=      0.0  {kg_mole/s};

        r1.stoich_coef['A']             :=      0;
        r1.stoich_coef['B']             :=      -1;
        r1.stoich_coef['C']             :=      1;

        fl1.alpha['A']                  :=      12.0;
        fl1.alpha['B']                  :=      10.0;
        fl1.alpha['C']                  :=      1.0;
        fl1.vap_to_feed_ratio           :=      0.9;
        fl1.ave_alpha                   :=      5.0;

        sp1.split[1]                    :=      0.01;

        fl1.liq.Ftot                    :=      m1.feed[1].f['B'];
    END values;

END test_flowsheet;

(* ************************************************* *)


MODEL test_controller REFINES controller;

    fs                      IS_REFINED_TO   test_flowsheet;
    key_components                  :==     'B';

    METHODS

    METHOD default_self;
    END default_self;
    
    METHOD values;
        RUN fs.values;
        conv                            :=      0.07;
    END values;

END test_controller;


(*
 *  simple_fs.a4c
 *  by Arthur W. Westerberg
 *  Part of the ASCEND Library
 *  $Date: 98/06/17 19:28:37 $
 *  $Revision: 1.2 $
 *  $Author: mthomas $
 *  $Source: /afs/cs.cmu.edu/project/ascend/Repository/models/simple_fs.a4c,v $
 *
 *  This file is part of the ASCEND Modeling Library.
 *
 *  Copyright (C) 1994 - 1998 Carnegie Mellon University
 *
 *  The ASCEND Modeling Library is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  The ASCEND Modeling Library is distributed in hope that it
 *  will be useful, but WITHOUT ANY WARRANTY; without even the implied
 *  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139 USA.  Check
 *  the file named COPYING.
 *)
