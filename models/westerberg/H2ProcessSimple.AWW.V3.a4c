REQUIRE "simpleUnits.AWW.a4c";
REQUIRE "flash.a4l";

(* this REQUIRE statement will lead to many different files
  being loaded recursively.  simpleUnits REQUIRES other files
  and so forth.  The easiest way to follow this is to load
  this file into ASCEND and see all the files that are also
  loaded as a result.
  
  If you load this file into ASCEND, all the various types with which
  this model is created will be loaded.  You should be able to find
  the files in which each is defined. *)

(* look in atoms.a4l for list of all defined veriable types *)

MODEL simpleH2Process;

    (* it is tiring to type symbols as strings.  This move defines
      strings that this model will use throughout *)
    
    H2,
    O2,
    N2,
    C1,
    C2,
    CM,
    CD,
    Wa  IS_A symbol_constant;
        
    
    
    
    (* look in components.a4l for list of available components.
      There are several hundred listed -- i.e., all those in Reid,'
      Prausnitz and Polling. *)

    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';
    
    (* look in components.a4l for "components_data" model *)
    (* look in phases.a4l for "phases_data" model *)

    compsAll IS_A set OF symbol_constant;
    compsAll           :== [H2, O2, N2, C1, C2, CM, CD, Wa];    
       cdAll           IS_A components_data(compsAll,          Wa);

    compsH2 IS_A set OF symbol_constant;
    compsH2            :== [H2                           ];
       cdH2            IS_A components_data(compsH2,          H2);

    compsWa IS_A set OF symbol_constant;
    compsWa             :== [                            Wa];
       cdWa             IS_A components_data(compsWa,            Wa);

    compsH2Wa IS_A set OF symbol_constant;
    compsH2Wa           :== [H2,                         Wa];
       cdH2Wa           IS_A components_data(compsH2Wa,          Wa);

    compsO2N2 IS_A set OF symbol_constant;
    compsO2N2          :== [    O2, N2                   ];
       cdO2N2          IS_A components_data(compsO2N2,        N2);

    compsC1C2 IS_A set OF symbol_constant;
    compsC1C2          :== [            C1, C2           ];
       cdC1C2          IS_A components_data(compsC1C2,        C1);

    compsH2C1C2 IS_A set OF symbol_constant;
    compsH2C1C2        :== [H2,         C1, C2           ];
       cdH2C1C2        IS_A components_data(compsH2C1C2,      C1);

    compsH2C1Wa IS_A set OF symbol_constant;
    compsH2C1Wa         :== [H2,         C1,             Wa];
       cdH2C1Wa         IS_A components_data(compsH2C1Wa,        Wa);

    compsH2C1C2Wa IS_A set OF symbol_constant;
    compsH2C1C2Wa       :== [H2,         C1, C2,         Wa];
       cdH2C1C2Wa       IS_A components_data(compsH2C1C2Wa,      Wa);

    compsO2N2CDWa IS_A set OF symbol_constant;    
    compsO2N2CDWa       :== [    O2, N2,             CD, Wa];
       cdO2N2CDWa       IS_A components_data(compsO2N2CDWa,      Wa);

    compsH2C1CMCDWa IS_A set OF symbol_constant;
    compsH2C1CMCDWa     :== [H2,         C1,     CM, CD, Wa];
       cdH2C1CMCDWa     IS_A components_data(compsH2C1CMCDWa,    Wa);

    compsO2N2C1CDWa IS_A set OF symbol_constant;
    compsO2N2C1CDWa     :== [    O2, N2, C1,         CD, Wa];
       cdO2N2C1CDWa     IS_A components_data(compsO2N2C1CDWa,    Wa);

    compsH2O2N2C1CDWa IS_A set OF symbol_constant;
    compsH2O2N2C1CDWa   :== [H2, O2, N2, C1,         CD, Wa];
       cdH2O2N2C1CDWa   IS_A components_data(compsH2O2N2C1CDWa,  Wa);

    compsH2O2N2C1CMCDWa IS_A set OF symbol_constant;
    compsH2O2N2C1CMCDWa :== [H2, O2, N2, C1,     CM, CD, Wa];
       cdH2O2N2C1CMCDWa IS_A components_data(compsH2O2N2C1CMCDWa,Wa);


    pdV IS_A phases_data('V','Pitzer_vapor_mixture','none','none');
    pdL IS_A phases_data('L', 'none', 'UNIFAC_liquid_mixture','none');
    pdVL IS_A phases_data('VL','Pitzer_vapor_mixture',
        'UNIFAC_liquid_mixture','none');
    equil IS_A boolean;

    (* look in stream_holdup.a4l for "stream" model *)

    (* Construct flowsheet as per PFD
         Define all output streams for each unit
         Define heat into unit
         Define unit *)

    (* U00 Outside world. Feed streams to process *)
    S0011 IS_A stream(cdC1C2, pdV, equil); (* city gas to process *)
    S0051 IS_A stream(cdWa, pdL, equil);    (* water to process *)
    S0041 IS_A stream(cdO2N2, pdV, equil); (* air to furnace *)
    S0042 IS_A stream(cdC1C2, pdV, equil); (* city gas to furnace *)
    
    S6311x IS_A stream(cdH2Wa, pdV, equil);  (* broken H2 recycle *)
    S6251x IS_A stream(cdWa, pdL, equil);   (* broken Wa recycle *)
    
    (* U11 H2Mix *)
    S1112 IS_A stream(cdH2C1C2Wa, pdV, equil);
    QinU11 IS_A energy_rate;
    U11 IS_A unitTwoInOneOut(S0011, S6311x, S1112, QinU11);
    
    (* U12 Feed Hx Cold Side *)
    S1222 IS_A stream(cdH2C1C2Wa, pdV, equil);
    QinU12 IS_A energy_rate;
    U12 IS_A unitOneInOneOut(S1112, S1222, QinU12);

    (* U13 Feed Hx Hot Side *)
    S1300 IS_A stream(cdWa, pdL, equil);
    QinU13 IS_A energy_rate;
    U13 IS_A unitOneInOneOut(S5413, S1300, QinU13);

    (* U21 Comp Ideal *)
    S2100 IS_A stream(cdH2C1C2Wa, pdV, equil);
    QinU21 IS_A energy_rate;
    U21 IS_A unitOneInOneOut(S1222, S2100, QinU21);

    (* U22 Comp *)
    S2225 IS_A stream(cdH2C1C2Wa, pdV, equil);
    QinU22 IS_A energy_rate;
    U22 IS_A unitOneInOneOut(S1222, S2225, QinU22);
    
    (* U23 Expander Ideal *)
    S2300 IS_A stream(cdWa, pdV, equil);
    QinU23 IS_A energy_rate;
    U23 IS_A unitOneInOneOut(S5524, S2300, QinU23);
    
    (* U24 Expander *)
    S2461 IS_A stream(cdWa, pdV, equil);
    QinU24 IS_A energy_rate;
    U24 IS_A unitOneInOneOut(S5524, S2461, QinU24);

    (* U25 Add Steam *)
    S2531 IS_A stream(cdH2C1C2Wa, pdV, equil);
    QinU25 IS_A energy_rate;
    U25 IS_A unitTwoInOneOut(S2225, S5525, S2531, QinU25);

    (* U31 React Hx Cold Side - reactor *)
    S3133 IS_A stream(cdH2C1C2Wa, pdV, equil);
    QinU31 IS_A energy_rate;
    U31 IS_A unitOneInOneOut(S2531, S3133, QinU31);

    (* U32 React Hx Hot Side *)
    S3253 IS_A stream(cdO2N2CDWa, pdV, equil);
    QinU32 IS_A energy_rate;
    U32 IS_A unitOneInOneOut(S4532, S3253, QinU32);
    
    (* U33 Crack: C2 + H2 = 2 C1 - reactor *)
    S3334 IS_A stream(cdH2C1Wa, pdV, equil);
    QinU33 IS_A energy_rate;
    U33 IS_A unitOneInOneOut(S3133, S3334, QinU33);

    (* U34 Reform: C1 + Wa = CM + 3H2 - reactor *)
    S3435 IS_A stream(cdH2C1CMCDWa, pdV, equil);
    QinU34 IS_A energy_rate;
    U34 IS_A unitOneInOneOut(S3334, S3435, QinU34);

    (* U35 WGS: water gas shift: CM + Wa = CD + H2 - reactor *)
    S3536 IS_A stream(cdH2C1CMCDWa, pdV, equil);
    QinU35 IS_A energy_rate;
    U35 IS_A unitOneInOneOut(S3435, S3536, QinU35);

    (* U36 membrane - reactor *)
    S3641 IS_A stream(cdH2C1CMCDWa, pdV, equil);
    S3661 IS_A stream(cdH2, pdV, equil);
    QinU36 IS_A energy_rate;
    U36 IS_A unitOneInTwoOut(S3536, S3641, S3661, QinU36);

    (* U41 Air Mix - furnace*)
    S4142 IS_A stream(cdH2O2N2C1CMCDWa, pdV, equil);
    QinU41 IS_A energy_rate;
    U41 IS_A unitTwoInOneOut(S0041, S3641, S4142, QinU41);
    
    (* U42 Methane Mix - furnace *)
    S4243 IS_A stream(cdH2O2N2C1CMCDWa, pdV, equil);
    QinU42 IS_A energy_rate;
    U42 IS_A unitTwoInOneOut(S0042, S4142, S4243, QinU42);
    
    (* U43 CM rxn: CM + 0.5O2 = CD - furnace *)
    S4344 IS_A stream(cdH2O2N2C1CDWa, pdV, equil);
    QinU43 IS_A energy_rate;
    U43 IS_A unitOneInOneOut(S4243, S4344, QinU43);

    (* U44 H2 rxn: H2 + 0.5O2 = Wa - furnace *)
    S4445 IS_A stream(cdO2N2C1CDWa, pdV, equil);
    QinU44 IS_A energy_rate;
    U44 IS_A unitOneInOneOut(S4344, S4445, QinU44);
    
    (* U45 C1 rxn: C1 + 1.5O2 = CD + Wa - furnace *)
    S4532 IS_A stream(cdO2N2CDWa, pdV, equil);
    QinU45 IS_A energy_rate;
    U45 IS_A unitOneInOneOut(S4445, S4532, QinU45);
    
    (* U51 Water Mix *)
    S5152 IS_A stream(cdWa, pdL, equil);
    QinU51 IS_A energy_rate;
    U51 IS_A unitTwoInOneOut(S0051, S6251x, S5152, QinU51);

    (* U52 Steam Hx Cold Side *)
    S5254 IS_A stream(cdWa, pdV, equil);
    QinU52 IS_A energy_rate;
    U52 IS_A unitOneInOneOut(S5152, S5254, QinU52);

    (* U54 Steam Split *)
    S5455 IS_A stream(cdWa, pdV, equil);
    S5413 IS_A stream(cdWa, pdV, equil);
    QinU54 IS_A energy_rate;
    U54 IS_A unitOneInTwoOut(S5254, S5455, S5413, QinU54);

    (* U55 Steam Split *)
    S5525 IS_A stream(cdWa, pdV, equil);
    S5524 IS_A stream(cdWa, pdV, equil);
    QinU55 IS_A energy_rate;
    U55 IS_A unitOneInTwoOut(S5455, S5525, S5524, QinU55);

    (* U53 Steam Hx Hot Side *)
    S5300 IS_A stream(cdO2N2CDWa, pdV, equil);
    QinU53 IS_A energy_rate;
    U53 IS_A unitOneInOneOut(S3253, S5300, QinU53);
    
    (* U61 Steam Mix *)
    S6162 IS_A stream(cdH2Wa, pdV, equil);
    QinU61 IS_A energy_rate;
    U61 IS_A unitTwoInOneOut(S3661, S2461, S6162, QinU61);

    (* U62 Flash *)
    S6251 IS_A stream(cdWa, pdL, equil);
    S6263 IS_A stream(cdH2Wa, pdV, equil);
    QinU62 IS_A energy_rate;
    U62 IS_A unitOneInTwoOut(S6162, S6263, S6251, QinU62);
    
    (* U63 H2 Split *)
    S6300 IS_A stream(cdH2Wa, pdV, equil);
    S6311 IS_A stream(cdH2Wa, pdV, equil);
    QinU63 IS_A energy_rate;
    U63 IS_A unitOneInTwoOut(S6263, S6300, S6311, QinU63);
    

    (* special relations for units *)
    
    (* U11 H2 Mix *)
    (* assume constant pressure and adiabatic *)
    QinU11 := 0 {kJ/s};
    FIX QinU11;
    FREE U11.delT;
    
    (* U12 Feed Hx Cold Side *)

    (* U13 Feed Hx Hot Side *)

    (* U21 Comp Ideal *)
    IsentropicComp: U21.feedMolarEntropy = U21.productMolarEntropy;
     (* Isentropic requirement *)
    U21.product.P := 150 {psia};
    FIX U21.product.P;
    FREE U21.delP;
    FREE U21.delT;
    
    (* U22 Comp *)
    EffU22 IS_A fraction;
    EffU22*QinU22 = QinU21;
    U22.product.P = U21.product.P;
    FIX EffU22;
    FREE U22.delP;
    FREE U22.delT;
    EffU22 := 0.95;

    (* U23 Expander Ideal *)
    IsentropicExpander: U23.feedMolarEntropy = U23.productMolarEntropy;
    (* Isentropic requirement *)
    U23.product.P := 100 {psia};
    FIX U23.product.P;
    FREE U23.delP;
    FREE U23.delT;
    
    (* U24 Expander *)
    EffU24 IS_A fraction;
    EffU24*QinU24 = QinU23;
    U24.product.P = U23.product.P;
    FIX EffU24;
    FREE U24.delP;
    FREE U24.delT;
    EffU24 := 0.95;

    (* U25 Add Steam *)
    (* adiabatic *)
    QinU25 := 0.0 {kJ/s};
    FIX QinU25;
    FREE U25.product.delT;

    (* U31 React Hx Cold Side *)
    (* fix outlet temperature at 500 deg C *)
    U31.product.T := 773.16 {K};
    FIX U31.product.T;
    FREE U31.delT;

    (* U32 React Hx Hot Side *)
    (* fix outlet temperature *)
    U32.product.T := 900 {K};
    FIX U32.product.T;
    FREE U32.delT;
    
    (* U33 Crack: C2 + H2 = 2C1 *)
    U33.stoichCoef[C2] := -1;
    U33.stoichCoef[H2] := -1;
    U33.stoichCoef[C1] := 2;
    (* completely use up C2 *)
    U33.error_LostFlowOut := 0.0 {mol/s};
    FIX U33.error_LostFlowOut;
    FREE U33.turnover;
    (* adiabatic *)
    QinU33 := 0 {kJ/s};
    FIX QinU33;
    FREE U33.delT;

    (* U34 Reform: C1 + Wa = CM + 3H2 *)
    U34.stoichCoef[C1] := -1;
    U34.stoichCoef[Wa] := -1;
    U34.stoichCoef[CM] := 1;
    U34.stoichCoef[H2] := 3;
    (* convert specified fraction of C1 *)
    convU34C1 IS_A fraction;
    convU34C1 := 0.8;
    FIX convU34C1;
    U34.product.f[C1] = (1.0-convU34C1)*U34.feed.f[C1];    
    FREE U34.product.turnover;
    (* adiabatic *)
    QinU34 := 0 {kJ/s};
    FIX QinU34;
    FREE U34.delT;

    (* U35 WGS: CM + Wa = CD + H2 *)
    U35.stoichCoef[CM] := -1;
    U35.stoichCoef[Wa] := -1;
    U35.stoichCoef[CD] := 1;
    U35.stoichCoef[H2] := 1;
    (* convert specified fraction of CM *)
    convU35CM IS_A fraction;
    convU35CM := 0.98;
    FIX convU35CM;
    U35.product.f[CM] = (1.0-convU35CM)*U35.feed.f[CM];    
    FREE U35.product.turnover;
    (* adiabatic *)
    QinU35 := 0 {kJ/s};
    FIX QinU35;
    FREE U35.delT;

    (* U36 Membrane *)
    U36.split[H2] := 0.8;
    (* adiabatic *)
    QinU36 := 0 {kJ/s};
    FIX QinU36;
    FREE U36.delT;

    (* U41 Air Mix *)
    (* adiabatic *)
    QinU41 := 0 {kJ/s};
    FIX QinU41;
    FREE U41.delT;

    (* U42 Methane Mix *)
    (* adiabatic *)
    QinU42 := 0 {kJ/s};
    FIX QinU42;
    FREE U42.delT;

    (* U43 CM rxn *)
    U43.stoichCoef[CM] := -1;
    U43.stoichCoef[O2] := -0.5;
    U43.stoichCoef[CD] := 1;
   (* completely use up CM *)
    U43.error_LostFlowOut := 0.0 {mol/s};
    FIX U43.error_LostFlowOut;
    FREE U43.turnover;
    (* adiabatic *)
    QinU43 := 0 {kJ/s};
    FIX QinU43;
    FREE U43.delT;

    (* U44 H2 rxn *)
    U44.stoichCoef[H2] := -1;
    U44.stoichCoef[O2] := 0.5;
    U44.stoichCoef[Wa] := 1;
   (* completely use up H2 *)
    U44.error_LostFlowOut := 0.0 {mol/s};
    FIX U44.error_LostFlowOut;
    FREE U44.turnover;
    (* adiabatic *)
    QinU44 := 0 {kJ/s};
    FIX QinU44;
    FREE U44.delT;

    (* U45 C1 rxn *)
    U45.stoichCoef[C1] := -1;
    U45.stoichCoef[O2] := -1.5;
    U45.stoichCoef[CD] := 1;
    U45.stoichCoef[Wa] := 1;
    (* completely use up C1 *)
    U45.error_LostFlowOut := 0.0 {mol/s};
    FIX U45.error_LostFlowOut;
    FREE U45.turnover;
    (* adiabatic *)
    QinU45 := 0 {kJ/s};
    FIX QinU45;
    FREE U45.delT;

    (* U51 Water Mix *)
    (* adiabatic *)
    QinU51 := 0 {kJ/s};
    FIX QinU51;
    FREE U51.delT;

    (* U52 Steam Hx Cold Side *)

    (* U53 Steam Hx Hot Side *)

    (* U54 Steam Split *)

    (* U55 Steam Split *)

    (* U61 Steam Mix *)

    (* U62 Flash *)
    (* Since water splits according to it vapor pressure,
      release the split factor for water in flash *)
    FREE U62.split[Wa];
    (* Equilibrium requires both outlet temperatures
      and pressures to be equal *)
    FREE U62.product2.T;
    FREE U62.product2.P;
    U62.product1.T := 459.6 {R} + 80 {R};
    U62.product1.P := 1.5 {atm};

    (* U63 H2 Split *)
    
    (* U22 Comp *)

    (* U23 Expander Ideal *)
    
    (* U24 Expander *)
    
    
    (* U52/U53 Steam Hx *)
    QinU52 = -QinU53;
    (* U52/U53 Steam Hx *)
    (* allow water flow into system to vary *)
    FREE S0051.flow;

    (* U31/U32 React Hx *)
    QinU31 = -QinU32;

    (* U62 Flash *)
    S6263.y[Wa]*P = S6251.state.phase['liquid1'].pure[Wa].VP;
    U62.product1.T = U62.product2.T;
    U62.product1.P = U62.product2.P;
    
    METHODS
    
    METHOD values;
	
	equil := TRUE;
	
	(* feed streams *)

	S0011.f[C1] := 0.97 {mol/s};
	S0011.f[C2] := 0.03 {mol/s};
	S0011.T := 300 {K};
	S0011.P := 1.05 {atm};
	
	S0041.f[O2] := 50 {mol/s};
	S0041.f[N2] := 200 {mol/s};
	S0041.T := 300 {K};
	S0041.P := 1.05 {atm};

	S0051.f[Wa] := 5.0 {mol/s};
	S0051.T := 300 {K};
	S0051.P := 1.05 {atm};
	
	S0042.f[C1] := 0.97 {mol/s};
	S0042.f[C2] := 0.03 {mol/s};
	S0042.T := 300 {K};
	S0042.P := 1.05 {atm};

	S6311x.f[H2] := 0.05 {mol/s};
	S6311x.f[Wa] := 0.001 {mol/s};
	S6311x.T := 300 {K};
	S6311x.P := 1.05 {atm};
	
	S6251x.f[Wa] := 1 {mol/s};
	S6251x.T := 300 {K};
	S6251x.P := 1.05 {atm};

    END values;

    METHOD specify;
	RUN U63.specify;
	RUN U62.specify;
	RUN U61.specify;
	RUN U24.specify;
	RUN U23.specify;
	RUN U53.specify;
	RUN U32.specify;
	RUN U45.specify;
	RUN U44.specify;
	RUN U43.specify;
	RUN U42.specify;
	RUN U41.specify;
	RUN U36.specify;
	RUN U35.specify;
	RUN U34.specify;
	RUN U33.specify;
	RUN U31.specify;
	RUN U25.specify;
	RUN U55.specify;
	RUN U13.specify;
	RUN U54.specify;
	RUN U52.specify;
	RUN U51.specify;
	RUN U22.specify;
	RUN U21.specify;
	RUN U12.specify;
	RUN U11.specify;
	
	(* special flag setting for units *)

	
    END specify;

END simpleH2Process;