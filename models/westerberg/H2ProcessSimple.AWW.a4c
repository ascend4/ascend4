REQUIRE "simpleUnits.AWW.a4c";

(* this REQUIRE statement will lead to many different files
  being loaded recursively.  simpleUnits REQUIREs other files
  and so forth.  The easiest way to follow this is to load
  this file into ASCEND and see all the files that are also
  loaded as a result.
  
  If you load this file into ASCEND, all the various types with which
  this model is created will be loaded.  You should be able to find
  the files in which each is defined. *)



(* ------------------------------------------------------------------
  
This file contains a model for the miniature hydrogen generation plant
that the students in 39-606 at Carnegie Mellon designed during the
Spring of 2002.  Feed to this plant is water and methane.  It produces
hydrogen as its main product The other major output is the furnace off
gases consisting of nitrogen, water and carbon dioxide.

We broke the model of the plant into seven areas to make it more
understandable and easier to debug.  We have typically used several
simple units to model an actual unit in the process.  For example we
model the furnace using two mixers (to bring in the air and the
methane feed) followed by three reactors, each of which burns the
carbon monoxide, the hydrogen and the methane to form water and carbon
dioxide.

We model each area in a very stylized manner.  For each simple unit we
use to model an area, we declare its heat input and its output
stream(s) before instancing the unit itself.  We collect any special
relations needed to complete the model for any of the units at the end
of the area model.

We include a values and a specify method for each area so that one can
solve each by itself.  This proved very useful for debugging the
model.  We chose area specifications to make the area models easy to
solve and not to be what we want finally for the overall process
model.

In the test model at the end, we form the overall model by instancing
the areas and then stating the added equations that define the desired
performance we wish for the overall process.  We take great care to
make clear the trading of what we want to be computed with we want to
be fixed to establish the desired overall model behavior.

Stream names are in the form Sij where i is a two digit integer
indicating the area and unit number of the source for the stream and j
the same for the target of the stream.  We use 00 to designate streams
that connect to the outside world -- i.e., feeds, products and
biproducts.

The areas are as follows.

area0: Plant feeds.  This section initialized the feeds to the plant
along with two recycle streams that are broken to make computations
faster.  One recycle is to bring back hydrogen so one can remove any
ethane in the methane feed while the other is a water recycle.  We
left these recycles unclosed as their flows are very small and have
little impact on the final solution.  Not closing them allows the
solver to solve the model quickly and reliably as a sequence of many
small sets of simultaneous equations.  One can update the
specifications for these recycles in this section by observing what
the model computes them to be in area6 -- or one could close them.

area1: Feed preparation.  This area of the plant has a mixer unit to
combine the hydrogen recycle with the methane feed.  The feed is
preheated before being sent to area2 to be compressed.

area2: Feed compression.  In this area of the plant the feed is
compressed to the pressure needed in the reactor section of the plant
The membrane needs a high pressure to function properly.  Four simple
units simulate the compressor: two for the compression side and two
for the steam turbine that powers it.

area3: Steam generation: Using the very hot off gases from the
furnace, this area generates steam to provide both needed heating and
the work needed for running the turbine that then drives the
compressor in area2.

area4: Reactor.  This area simulates a cracking unit, a reformer, and
a water gas shift reactor.  All these reactions occur in one unit in
the actual process.  Cracking converts ethane plus recycle hydrogen to
methane.  Reforming converts methane and water to carbon monoxide and
hydrogen, while the water gas shift step converts the just produced
carbon monoxide and water to hydrogen and carbon dioxide.  This
section then uses a membrane to remove the hydrogen from the reactor.
The membrane actually is in the reactor but we model it as a final
step.  The reactor overall is endothermic and requires heat, which it
gets from the furnace off gases.

area5: Furnace. This area simulates a furnace and the hot sides of the
two heat exchangers that use the heat from the furnace -- to produce
steam in the steam system (area3) and to heat the reactor (area4).
The furnace has both an air and a methane feed.  In the furnace the
excess methane, carbon monoxide and hydrogen from the reactor along
with the supplemental methane burn using oxygen from the air to form
water and carbon dioxide, producing a very hot exhaust gas.

area6: Hydrogen recovery.  This area receives the hydrogen from
reactor.  To enhance membrane separation performance, we model the
dilution of the hydrogen with steam to simulate the lowering of its
partial pressure on the downstream side of the membrane.  We then cool
the resulting stream and separate off most of the water as a liquid in
a flash unit.  Part of the hydrogen produced recycles back to the
original feed.  The rest is the plant's main product.

----------------------------------------------------------- *)

(* look in atoms.a4l for list of all defined veriable types *)

MODEL area0(
    compsSets WILL_BE set OF symbol_constant;
    comps[compsSets] WILL_BE set OF symbol_constant;
    cd[compsSets] WILL_BE components_data;
    phaseTypes WILL_BE set OF symbol_constant;
    pd[phaseTypes] WILL_BE phases_data;
    equil WILL_BE boolean;
);

    (* Area0 is the outside world.  Define feed and broken recycle streams here. *)

    (* it is tiring to type symbols as strings.  This move defines
      strings that this model will use throughout *)
    
    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;
    
    (* define components and component mixtures for process *)
    
    (* look in components.a4l for list of available components.
      There are several hundred listed -- i.e., all those in Reid,'
      Prausnitz and Polling. *)

    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';

    traceMF IS_A traceMoleFraction_constant;
    
    (* define streams for area0.
      Streams with names ending in x are broken recycle streams *)
    
    S0011 IS_A stream(cd['feed'], pd['V'], equil);     (* city gas to process *)
    S0031 IS_A stream(cd['water'], pd['L'], equil);    (* water to process *)
    S0051 IS_A stream(cd['air'], pd['V'], equil);      (* air to furnace *)
    S0052 IS_A stream(cd['feed'], pd['V'], equil);     (* city gas to furnace *)

    S6311x IS_A stream(cd['H2Prod'], pd['V'], equil);  (* broken H2 recycle *)
    S6231x IS_A stream(cd['water'], pd['L'], equil);   (* broken Wa recycle *)
    
    S0051.f[N2] = (79.0/21.0)*S0051.f[O2];

    METHODS
    
    METHOD default_self;
	RUN S0011.default_self;
	RUN S0031.default_self;
	RUN S0051.default_self;
	RUN S0052.default_self;
    END default_self;

    METHOD values;
	
	(* main city gas feed *)
	S0011.y[H2] := traceMF;
	S0011.y[C1] := 0.97;
	S0011.y[C2] := 0.03-2*traceMF;
	S0011.y[Wa] := traceMF;
	S0011.flow := 1 {mol/s};
	S0011.T := 300 {K};
	S0011.P := 1.05 {atm};
	
	(* water to steam generation system *)
	S0031.f[Wa] := 5.5 {mol/s};
	S0031.T := 300 {K};
	S0031.P := 1000 {psia};
	
	(* air to furnace *)
	S0051.f[O2] := 4.0 {mol/s};
	S0051.f[N2] := (79.0/21.0)*S0051.f[O2];
	S0051.T := 300 {K};
	S0051.P := 1.05 {atm};

	(* supplemental city gas to furnace *)
	S0052.y[H2] := S0011.y[H2];
	S0052.y[C1] := S0011.y[C1];
	S0052.y[C2] := S0011.y[C2];
	S0052.y[Wa] := S0011.y[Wa];
	S0052.flow := 1 {mol/s};
	S0052.T := 300 {K};
	S0052.P := 1.05 {atm};
	
	(* torn H2 recycle stream *)
	S6311x.f[H2] := 0.035 {mol/s};
	S6311x.f[Wa] := traceMF*S6311x.f[H2];
	S6311x.T := 300 {K};
	S6311x.P := 1.05 {atm};
	
	(* torn water recycle stream *)
	S6231x.f[Wa] := 1 {mol/s};
	S6231x.T := 300 {K};
	S6231x.P := 1.05 {atm};
    END values;

    METHOD specify;
	RUN S0011.specify;
	RUN S0031.specify;
	RUN S0051.specify;
	RUN S0052.specify;
	RUN S6311x.specify;
	RUN S6231x.specify;
	
	(* city gas spec *)
	S0011.y[H2].fixed := TRUE;
	S0011.y[C1].fixed := TRUE;
	S0011.y[C2].fixed := TRUE;
	S0011.flow.fixed := TRUE;
	S0011.f[comps['feed']].fixed := FALSE;

	(* air to furnace *)
	S0051.f[N2].fixed := FALSE;	

	(* supplemental city gas to furnace *)
	S0052.y[H2].fixed := TRUE;
	S0052.y[C1].fixed := TRUE;
	S0052.y[C2].fixed := TRUE;
	S0052.flow.fixed := TRUE;
	S0052.f[comps['feed']].fixed := FALSE;


    END specify;

END area0;

MODEL area1(
    compsSets WILL_BE set OF symbol_constant;
    comps[compsSets] WILL_BE set OF symbol_constant;
    cd[compsSets] WILL_BE components_data;
    phaseTypes WILL_BE set OF symbol_constant;
    pd[phaseTypes] WILL_BE phases_data;
    equil WILL_BE boolean;
    strmSet WILL_BE set OF symbol_constant;
    strms[strmSet] WILL_BE stream;
);

    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;
    
    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';
    
    traceMF IS_A traceMoleFraction_constant;

    (* feed prep *)
    
    (* U1 H2Mix *)
    QinU1 IS_A energy_rate;
    S1112 IS_A stream(cd['feed'], pd['V'], equil);
    U1 IS_A unitTwoInOneOut(QinU1, strms['0011'], strms['6311'], S1112);
    
    (* U2 Feed Hx Cold Side *)
    QinU2 IS_A energy_rate;
    S1222 IS_A stream(cd['feed'], pd['V'], equil);
    U2 IS_A unitOneInOneOut(QinU2, S1112, S1222);

    (* U3 Feed Hx Hot Side *)
    QinU3 IS_A energy_rate;
    S1300 IS_A stream(cd['water'], pd['L'], equil);
    U3 IS_A unitOneInOneOut(QinU3, strms['3313'], S1300);
    
    
    (* special unit relationships *)
    
    (* U1 H2 Mix *)
    (* U2 Feed Hx Cold Side *)
    (* U3 Feed Hx Hot Side *)
    
    METHODS
    
    METHOD default_self;
	RUN U1.default_self;
	RUN U2.default_self;
	RUN U3.default_self;
    END default_self;
    
    METHOD values;

	(* U1 H2 Mix *)
	S1112.T := 305 {K};

	(* U2 Feed Hx Cold Side *)
	S1222.T := 340 {K};
	S1300.T := 400 {K};

	(* U3 Feed Hx Hot Side *)
	S1300.f[Wa] := 0.034 {mol/s};

    END values;
    
    METHOD specify;

	(* specify units in reverse order for stream flows *)
	RUN U3.specify;
	RUN U2.specify;
	RUN U1.specify;

    (* U1 H2 Mix *)

    (* U2 Feed Hx Cold Side *)
    QinU2.fixed := FALSE;
    S1222.T.fixed := TRUE;

    (* U3 Feed Hx Hot Side *)
    QinU3.fixed := FALSE;
    U3.product.T.fixed := TRUE;
	
    END specify;

END area1;

MODEL area2(
    compsSets WILL_BE set OF symbol_constant;
    comps[compsSets] WILL_BE set OF symbol_constant;
    cd[compsSets] WILL_BE components_data;
    phaseTypes WILL_BE set OF symbol_constant;
    pd[phaseTypes] WILL_BE phases_data;
    equil WILL_BE boolean;
    strmSet WILL_BE set OF symbol_constant;
    strms[strmSet] WILL_BE stream;
);
    
    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;
    
    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';
    
    traceMF IS_A traceMoleFraction_constant;

    (* U1 Comp Ideal *)

    (* U1 Comp Ideal *)
    QinU1 IS_A energy_rate;
    S2100 IS_A stream(cd['feed'], pd['V'], equil);
    U1 IS_A unitOneInOneOut(QinU1, strms['1222'], S2100);

    (* U2 Comp *)
    QinU2 IS_A energy_rate;
    S2225 IS_A stream(cd['feed'], pd['V'], equil);
    U2 IS_A unitOneInOneOut(QinU2, strms['1222'], S2225);
    
    (* U3 Expander Ideal *)
    QinU3 IS_A energy_rate;
    S2300 IS_A stream(cd['water'], pd['V'], equil);
    U3 IS_A unitOneInOneOut(QinU3, strms['3424'], S2300);
    
    (* U4 Expander *)
    QinU4 IS_A energy_rate;
    S2461 IS_A stream(cd['water'], pd['V'], equil);
    U4 IS_A unitOneInOneOut(QinU4, strms['3424'], S2461);

    (* U5 Add Steam *)
    QinU5 IS_A energy_rate;
    S2541 IS_A stream(cd['react'], pd['V'], equil);
    U5 IS_A unitTwoInOneOut(QinU5, S2225, strms['3425'], S2541);


    (* special unit relations *)
    (* U1 Comp Ideal *)
    (* Isentropic requirement *)
    IsentropicComp: U1.feedMolarEntropy = U1.productMolarEntropy;
    
    (* U2 Comp *)
    EffU2 IS_A fraction;
    EffU2*QinU2 = QinU1;
    U2.product.P = U1.product.P;

    (* U3 Expander Ideal *)
    (* Isentropic requirement *)
    IsentropicExpander: U3.feedMolarEntropy = U3.productMolarEntropy;
    
    (* U4 Expander *)
    EffU4 IS_A fraction;
    EffU4*QinU4 = QinU3;
    U4.product.P = U3.product.P;

    (* U5 Add Steam *)

    METHODS
    
    METHOD default_self;
	RUN U1.default_self;
	RUN U2.default_self;
	RUN U3.default_self;
	RUN U4.default_self;
	RUN U5.default_self;
    END default_self;
    
    METHOD values;
	U1.product.P := 150 {psia};
	EffU2 := 0.95;
	U3.product.P := 100 {psia};
	EffU4 := 0.95;
	U5.product.T := 773.16 {K};
    END values;
  
    METHOD specify;
	RUN U5.specify;
	RUN U4.specify;
	RUN U3.specify;
	RUN U2.specify;
	RUN U1.specify;

	(* U1 Comp Ideal *)
	U1.product.P.fixed := TRUE;
	U1.delP.fixed := FALSE;
	(* release heat input as unit is isentropic *)
	QinU1.fixed := FALSE;
	
	(* U2 Comp *)
	EffU2.fixed := TRUE;
	(* pressure out same as for ideal unit *)
	U2.delP.fixed := FALSE;
	(* heat in related to ideal through an efficiency *)
	QinU2.fixed := FALSE;

	(* U3 Expander Ideal *)
	U3.product.P.fixed := TRUE;
	U3.delP.fixed := FALSE;
	(* release heat input as unit is isentropic *)
	QinU3.fixed := FALSE;

	(* U4 Expander *)
	EffU4.fixed := TRUE;
	(* pressure out same as for ideal unit *)
	U4.delP.fixed := FALSE;
	(* heat in related to ideal through an efficiency *)
	QinU4.fixed := FALSE;
	
	(* U5 Add Steam *)
	
    END specify;

END area2;

MODEL area3(
    compsSets WILL_BE set OF symbol_constant;
    comps[compsSets] WILL_BE set OF symbol_constant;
    cd[compsSets] WILL_BE components_data;
    phaseTypes WILL_BE set OF symbol_constant;
    pd[phaseTypes] WILL_BE phases_data;
    equil WILL_BE boolean;
    strmSet WILL_BE set OF symbol_constant;
    strms[strmSet] WILL_BE stream;
);
  
    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;
    
    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';
    
    traceMF IS_A traceMoleFraction_constant;

    (* U1 Water Mix *)
    QinU1 IS_A energy_rate;
    S3132 IS_A stream(cd['water'], pd['L'], equil);
    U1 IS_A unitTwoInOneOut(QinU1, strms['0031'], strms['6231'], S3132);

    (* U2 Steam Hx Cold Side *)
    QinU2 IS_A energy_rate;
    S3233 IS_A stream(cd['water'], pd['V'], equil);
    U2 IS_A unitOneInOneOut(QinU2, S3132, S3233);

    (* U3 Steam Split *)
    QinU3 IS_A energy_rate;
    S3334 IS_A stream(cd['water'], pd['V'], equil);
    S3313 IS_A stream(cd['water'], pd['V'], equil);
    U3 IS_A unitOneInTwoOut(QinU3, S3233, S3334, S3313);

    (* U4 Steam Split *)
    QinU4 IS_A energy_rate;
    S3424 IS_A stream(cd['water'], pd['V'], equil);
    S3425 IS_A stream(cd['water'], pd['V'], equil);
    U4 IS_A unitOneInTwoOut(QinU4, S3334, S3424, S3425);

    
    (* special unit relationships *)
    (* U1 Water Mix *)

    (* U2 Steam Hx Cold Side *)

    (* U3 Steam Split *)

    (* U4 Steam Split *)
    
    METHODS
    
    METHOD default_self;
	RUN U1.default_self;
	RUN U2.default_self;
	RUN U3.default_self;
	RUN U4.default_self;
    END default_self;
    
    METHOD values;
	(* U1 Water Mix *)

	(* U2 Steam Hx Cold Side *)
	U2.product.T := 1000 {K};

	(* U3 Steam Split *)
	U3.split[Wa] := 0.9;

	(* U4 Steam Split *)
	U4.split[Wa] := 0.3;
	
    END values;
    
    METHOD specify;
	RUN U4.specify;
	RUN U3.specify;
	RUN U2.specify;
	RUN U1.specify;

	(* U1 Water Mix *)

	(* U2 Steam Hx Cold Side *)
	U2.product.T.fixed := TRUE;
	U2.Qin.fixed := FALSE;
	
	(* U3 Steam Split *)

	(* U4 Steam Split *)
	
    END specify;

END area3;

MODEL area4(
    compsSets WILL_BE set OF symbol_constant;
    comps[compsSets] WILL_BE set OF symbol_constant;
    cd[compsSets] WILL_BE components_data;
    phaseTypes WILL_BE set OF symbol_constant;
    pd[phaseTypes] WILL_BE phases_data;
    equil WILL_BE boolean;
    strmSet WILL_BE set OF symbol_constant;
    strms[strmSet] WILL_BE stream;
);
    
    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;

    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';
    
    traceMF IS_A traceMoleFraction_constant;

    (* U1 Crack: C2 + H2 = 2 C1 - reactor *)
    QinU1 IS_A energy_rate;
    S4142 IS_A stream(cd['react'], pd['V'], equil);
    U1 IS_A unitOneInOneOut(QinU1, strms['2541'], S4142);

    (* U2 Reform: C1 + Wa = CM + 3H2 - reactor *)
    QinU2 IS_A energy_rate;
    S4243 IS_A stream(cd['react'], pd['V'], equil);
    U2 IS_A unitOneInOneOut(QinU2, S4142, S4243);

    (* U3 WGS: water gas shift: CM + Wa = CD + H2 - reactor *)
    QinU3 IS_A energy_rate;
    S4344 IS_A stream(cd['react'], pd['V'], equil);
    U3 IS_A unitOneInOneOut(QinU3, S4243, S4344);

    (* U4 membrane - reactor *)
    QinU4 IS_A energy_rate;
    S4451 IS_A stream(cd['react'], pd['V'], equil);
    S4461 IS_A stream(cd['H2Prod'], pd['V'], equil);
    U4 IS_A unitOneInTwoOut(QinU4, S4344, S4461, S4451);

    (* special unit relationships *)
    
    (* U1 Crack: C2 + H2 = 2C1 *)

    (* U2 Reform: C1 + Wa = CM + 3H2 *)
    (* convert specified fraction of C1 *)
    convU2C1 IS_A fraction;
    U2.product.f[C1] = (1.0-convU2C1)*U2.feed.f[C1];    

    (* U3 WGS: CM + Wa = CD + H2 *)
    (* convert specified fraction of CM *)
    convU3CM IS_A fraction;
    U3.product.f[CM] = (1.0-convU3CM)*U3.feed.f[CM];    

    (* U4 Membrane *)

    METHODS
    
    METHOD default_self;
	RUN U1.default_self;	
	RUN U2.default_self;	
	RUN U3.default_self;	
	RUN U4.default_self;	
    END default_self;
    
    METHOD values;

	(* U1 Crack: C2 + H2 = 2C1 *)
	U1.stoichCoef[C2] := -1;
	U1.stoichCoef[H2] := -1;
	U1.stoichCoef[C1] := 2;
	(* completely use up C2 *)
	U1.product.y[C2] := traceMF;
	U1.product.T := 773.16 {K};
	
	(* U2 Reform: C1 + Wa = CM + 3H2 *)
	U2.stoichCoef[C1] := -1;
	U2.stoichCoef[Wa] := -1;
	U2.stoichCoef[CM] := 1;
	U2.stoichCoef[H2] := 3;
	(* convert specified fraction of C1 *)
	convU2C1 := 0.8;
    
	(* U3 WGS: CM + Wa = CD + H2 *)
	U3.stoichCoef[CM] := -1;
	U3.stoichCoef[Wa] := -1;
	U3.stoichCoef[CD] := 1;
	U3.stoichCoef[H2] := 1;
	(* convert specified fraction of CM *)
	convU3CM := 0.98;
    
	(* U4 Membrane *)
	(* split indicates fraction that does
	  passes through membrane *)
	U4.split[H2] := 0.9;
	U4.split[Wa] := traceMF;
	
    END values;
    
    METHOD specify;

	RUN U4.specify;
	RUN U3.specify;
	RUN U2.specify;
	RUN U1.specify;

	(* U1 Crack: C2 + H2 = 2C1 *)
	U1.product.y[C2].fixed := TRUE;
	U1.turnover.fixed := FALSE;
	U1.product.T.fixed := TRUE;
	U1.Qin.fixed := FALSE;

	(* U2 Reform: C1 + Wa = CM + 3H2 *)
	convU2C1.fixed := TRUE;
	U2.turnover.fixed := FALSE;
	U2.delT.fixed := TRUE;
	U2.Qin.fixed := FALSE;
    
	(* U3 WGS: CM + Wa = CD + H2 *)
	convU3CM.fixed := TRUE;
	U3.turnover.fixed := FALSE;
	U3.delT.fixed := TRUE;
	U3.Qin.fixed := FALSE;
	
	(* U4 Membrane *)
	U4.delT1.fixed := TRUE;
	U4.Qin.fixed := FALSE;
	
    END specify;

END area4;

MODEL area5(
    compsSets WILL_BE set OF symbol_constant;
    comps[compsSets] WILL_BE set OF symbol_constant;
    cd[compsSets] WILL_BE components_data;
    phaseTypes WILL_BE set OF symbol_constant;
    pd[phaseTypes] WILL_BE phases_data;
    equil WILL_BE boolean;
    strmSet WILL_BE set OF symbol_constant;
    strms[strmSet] WILL_BE stream;
);
    
    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;
    
    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';
    
    traceMF IS_A traceMoleFraction_constant;

    (* U1 Air Mix - furnace*)
    QinU1 IS_A energy_rate;
    S5152 IS_A stream(cd['furnace'], pd['V'], equil);
    U1 IS_A unitTwoInOneOut(QinU1, strms['0051'], strms['4451'], S5152);
    
    (* U2 Methane Mix - furnace *)
    QinU2 IS_A energy_rate;
    S5253 IS_A stream(cd['furnace'], pd['V'], equil);
    U2 IS_A unitTwoInOneOut(QinU2, strms['0052'], S5152, S5253);
    
    (* U3 CM rxn: CM + 0.5O2 = CD - furnace *)
    QinU3 IS_A energy_rate;
    S5354 IS_A stream(cd['furnace'], pd['V'], equil);
    U3 IS_A unitOneInOneOut(QinU3, S5253, S5354);

    (* U4 H2 rxn: H2 + 0.5O2 = Wa - furnace *)
    QinU4 IS_A energy_rate;
    S5455 IS_A stream(cd['furnace'], pd['V'], equil);
    U4 IS_A unitOneInOneOut(QinU4, S5354, S5455);
    
    (* U5 C1 rxn: C1 + 1.5O2 = CD + Wa - furnace *)
    QinU5 IS_A energy_rate;
    S5556 IS_A stream(cd['furnace'], pd['V'], equil);
    U5 IS_A unitOneInOneOut(QinU5, S5455, S5556);
    
    (* U6 React Hx Hot Side *)
    QinU6 IS_A energy_rate;
    S5657 IS_A stream(cd['furnace'], pd['V'], equil);
    U6 IS_A unitOneInOneOut(QinU6, S5556, S5657);
    
    (* U7 Steam Hx Hot Side *)
    QinU7 IS_A energy_rate;
    S5700 IS_A stream(cd['furnace'], pd['V'], equil);
    U7 IS_A unitOneInOneOut(QinU7, S5657, S5700);


    (* special unit relationships *)
    (* U1 Air Mix *)
    (* U2 Methane Mix *)
    (* U3 CM rxn *)
    (* U4 H2 rxn *)
    (* U5 C1 rxn *)
    (* U6 React Hx Hot Side *)
    (* U7 Steam Hx Hot Side *)


    METHODS
    
    METHOD default_self;
	RUN U1.default_self;	
	RUN U2.default_self;	
	RUN U3.default_self;	
	RUN U4.default_self;	
	RUN U5.default_self;	
	RUN U6.default_self;	
	RUN U7.default_self;	
    END default_self;
    
    METHOD values;

	(* U1 Air Mix *)
	(* U2 Methane Mix *)
	(* U3 CM rxn: CM + 0.5O2 = CD - furnace *)
	U3.stoichCoef[CM] := -1;
	U3.stoichCoef[O2] := -0.5;
	U3.stoichCoef[CD] := 1;
	U3.product.y[CM] := traceMF;

	(* U4 H2 rxn: H2 + 0.5O2 = Wa - furnace *)
	U4.stoichCoef[H2] := -1;
	U4.stoichCoef[O2] := 0.5;
	U4.stoichCoef[Wa] := 1;
	U4.product.y[H2] := traceMF;
	
	(* U5 C1 rxn: C1 + 2O2 = CD + 2Wa - furnace *)
	U5.stoichCoef[C1] := -1;
	U5.stoichCoef[O2] := -2;
	U5.stoichCoef[CD] := 1;
	U5.stoichCoef[Wa] := 2;
	U5.product.y[C1] := traceMF;
    
    	(* U6 React Hx Hot Side *)
	(* fix outlet temperature *)
	U6.product.T := 1000 {K};
	
	(* U7 Steam Hx Hot Side *)
	U7.product.T := 400 {K};

    END values;
    
    METHOD specify;
	
	RUN U7.specify;
	RUN U6.specify;
	RUN U5.specify;
	RUN U4.specify;
	RUN U3.specify;
	RUN U2.specify;
	RUN U1.specify;

	(* special unit relationships *)
	(* U1 Air Mix *)
	(* U2 Methane Mix *)

	(* U3 CM rxn: CM + 0.5O2 = CD - furnace *)
	U3.product.y[CM].fixed := TRUE;
	U3.turnover.fixed := FALSE;

	(* U4 H2 rxn: H2 + 0.5O2 = Wa - furnace *)
	U4.product.y[H2].fixed := TRUE;
	U4.turnover.fixed := FALSE;

	(* U5 C1 rxn: C1 + 1.5O2 = CD + Wa - furnace *)
	U5.product.y[C1].fixed := TRUE;
	U5.turnover.fixed := FALSE;
	
	(* U6 React Hx Hot Side *)
	U6.product.T.fixed := TRUE;
	U6.Qin.fixed := FALSE;
    	
	(* U7 Steam Hx Hot Side *)
	U7.product.T.fixed := TRUE;
	U7.Qin.fixed := FALSE;

    END specify;

END area5;

MODEL area6(
    compsSets WILL_BE set OF symbol_constant;
    comps[compsSets] WILL_BE set OF symbol_constant;
    cd[compsSets] WILL_BE components_data;
    phaseTypes WILL_BE set OF symbol_constant;
    pd[phaseTypes] WILL_BE phases_data;
    equil WILL_BE boolean;
    strmSet WILL_BE set OF symbol_constant;
    strms[strmSet] WILL_BE stream;
);

    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;

    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';
    
    traceMF IS_A traceMoleFraction_constant;

    (* U1 Steam Mix *)
    QinU1 IS_A energy_rate;
    S6162 IS_A stream(cd['H2Prod'], pd['V'], equil);
    U1 IS_A unitTwoInOneOut(QinU1, strms['4461'], strms['2461'], S6162);

    (* U2 Flash *)
    QinU2 IS_A energy_rate;
    S6231 IS_A stream(cd['water'], pd['L'], equil);
    S6263 IS_A stream(cd['H2Prod'], pd['V'], equil);
    U2 IS_A unitOneInTwoOut(QinU2, S6162, S6263, S6231);
    
    (* U3 H2 Split *)
    QinU3 IS_A energy_rate;
    S6300 IS_A stream(cd['H2Prod'], pd['V'], equil);
    S6311 IS_A stream(cd['H2Prod'], pd['V'], equil);
    U3 IS_A unitOneInTwoOut(QinU3, S6263, S6300, S6311);
    
    (* special unit relationships *)
    (* U1 Steam Mix *)

    (* U2 Flash *)
    flashEqn: U2.product1.y[Wa]*U2.product1.P = U2.product2.phase['liquid1'].pure['water'].VP;

    (* U3 H2 Split *)
     
    METHODS
    
    METHOD default_self;
	RUN U1.default_self;
	RUN U2.default_self;
	RUN U3.default_self;
    END default_self;
    
    METHOD values;
	U2.product1.T := 353.15 {K};
	U3.split[H2] := 0.99;
	U3.split[Wa] := 0.99;
    END values;
    
    METHOD specify;
	RUN U3.specify;
	RUN U2.specify;
	RUN U1.specify;

	(* U1 Steam Mix *)

	(* U2 Flash *)
	U2.product1.T.fixed := TRUE;
	U2.Qin.fixed := FALSE;
	U2.split[Wa].fixed := FALSE;

	(* U3 H2 Split *)
	
    END specify;

END area6;
    
MODEL testSimpleH2Process;
    
    H2,O2,N2,C1,C2,CM,CD,Wa  IS_A symbol_constant;

    H2 :== 'hydrogen';
    O2 :== 'oxygen';
    N2 :== 'nitrogen';
    C1 :== 'methane';
    C2 :== 'ethane';
    CM :== 'carbon_monoxide';
    CD :== 'carbon_dioxide';
    Wa :== 'water';

    traceMF IS_A traceMoleFraction_constant;
    
    (* look in components.a4l for "components_data" model *)
    (* look in phases.a4l for "phases_data" model *)

    compsSets IS_A set OF symbol_constant;
    comps[compsSets] IS_A set OF symbol_constant;
    
    compsSets :== ['water','H2Prod','cityGas','air','feed','react','furnace'];
   
    (* all comps         [H2, O2, N2, C1, C2, CM, CD, Wa] *)
    comps['water']   :== [                            Wa];
    comps['H2Prod']  :== [H2,                         Wa];
    comps['cityGas'] :== [            C1, C2            ];
    comps['air']     :== [    O2, N2                    ];
    comps['feed']    :== [H2,         C1, C2,         Wa];
    comps['react']   :== [H2,         C1, C2, CM, CD, Wa];
    comps['furnace'] :== [H2, O2, N2, C1,     CM, CD, Wa];
    
    cdWater   IS_A components_data(comps['water'],   Wa);
    cdH2Prod  IS_A components_data(comps['H2Prod'],  Wa);
    cdCityGas IS_A components_data(comps['cityGas'], C1);
    cdAir     IS_A components_data(comps['air'],     N2);
    cdFeed    IS_A components_data(comps['feed'],    Wa);
    cdReact   IS_A components_data(comps['react'],   Wa);
    cdFurnace IS_A components_data(comps['furnace'], Wa);

    cd[compsSets2] ALIASES (cdWater, cdH2Prod, cdCityGas, cdAir, cdFeed, cdReact, cdFurnace)
    WHERE compsSets2 IS_A set OF symbol_constant
    WITH_VALUE ('water','H2Prod','cityGas','air','feed','react','furnace');
    
    pdV IS_A phases_data('V','Pitzer_vapor_mixture','none','none');
    pdL IS_A phases_data('L', 'none', 'UNIFAC_liquid_mixture','none');
    pdVL IS_A phases_data('VL','Pitzer_vapor_mixture',
    'UNIFAC_liquid_mixture','none');
    
    pd[phaseTypes] ALIASES (pdV, pdL, pdVL)
    WHERE phaseTypes IS_A set OF symbol_constant
    WITH_VALUE ('V','L','VL');
    
    equil IS_A boolean;

    a0 IS_A area0(compsSets, comps, cd, phaseTypes, pd, equil);

    a1Strms[a1StrmSet]
    ALIASES (a0.S0011, a3.S3313, a0.S6311x)
    WHERE a1StrmSet IS_A set OF symbol_constant
    WITH_VALUE ('0011', '3313', '6311');
    
    a1 IS_A area1(compsSets, comps, cd, phaseTypes, pd, equil,
    a1StrmSet, a1Strms);
    
    a2Strms[a2StrmSet]
    ALIASES (a1.S1222, a3.S3424, a3.S3425) 
    WHERE a2StrmSet IS_A set OF symbol_constant
    WITH_VALUE ('1222', '3424', '3425');
    
    a2 IS_A area2(compsSets, comps, cd, phaseTypes, pd, equil,
    a2StrmSet, a2Strms);

    a3Strms[a3StrmSet]
    ALIASES (a0.S0031, a0.S6231x)
    WHERE a3StrmSet IS_A set OF symbol_constant
    WITH_VALUE ('0031', '6231');
    
    a3 IS_A area3(compsSets, comps, cd, phaseTypes, pd, equil,
    a3StrmSet, a3Strms);

    a4Strms[a4StrmSet]
    ALIASES (a2.S2541)
    WHERE a4StrmSet IS_A set OF symbol_constant
    WITH_VALUE ('2541');
    
    a4 IS_A area4(compsSets, comps, cd, phaseTypes, pd, equil,
    a4StrmSet, a4Strms);

    a5Strms[a5StrmSet]
    ALIASES (a0.S0051, a0.S0052, a4.S4451)
    WHERE a5StrmSet IS_A set OF symbol_constant
    WITH_VALUE ('0051','0052','4451');
    
    a5 IS_A area5(compsSets, comps, cd, phaseTypes, pd, equil,
    a5StrmSet, a5Strms);
    
    a6Strms[a6StrmSet]
    ALIASES (a2.S2461,a4.S4461)
    WHERE a6StrmSet IS_A set OF symbol_constant
    WITH_VALUE ('2461','4461');
    
    a6 IS_A area6(compsSets, comps, cd, phaseTypes, pd, equil,
    a6StrmSet, a6Strms);
    
    
    (* special relations for overall model *)

    (* equate heat duties for heat exchangers *)
    (* reactor heat deficiency in total supplied by furnace *)
    a1.U2.Qin = -a1.U3.Qin;
    a3.U2.Qin = -a5.U7.Qin;
    reactorQinTotal IS_A energy_rate;
    reactorQinTotal = a4.U1.Qin + a4.U2.Qin + a4.U3.Qin + a4.U4.Qin;
    reactorQinTotal = -a5.U6.Qin;
    
    (* set water ratio into reactor *)
    (* ratio is relative to stoichiometric amount needed
      for complete conversion of methane to hydrogen *)
    ratioWaterIntoReactor IS_A factor;
    a2.U5.product.f[Wa] = ratioWaterIntoReactor*2.0*a2.U5.product.f[C1];
    
    (* equate heat duties of compressor and expander *)
    a2.U2.Qin = -a2.U4.Qin;

    (* air ratio into furnace *)
    ratioAirIntoFurnace IS_A factor;
    a5.U1.feed1.f[O2] = ratioAirIntoFurnace*
        (2*a5.U2.product.f[C1]+
         0.5*a5.U2.product.f[H2]+
	 0.5*a5.U2.product.f[CM]);
	 
    hydrogenToMethaneRatio IS_A factor;
    hydrogenToMethaneRatio*(a0.S0011.f[C1]+a0.S0052.f[C1]) =
         a6.U3.product1.f[H2];
    
    (* define objective *)
    H2ToC1Ratio: MAXIMIZE hydrogenToMethaneRatio;

    METHODS
	
    METHOD default_self;
	RUN a0.default_self;
	RUN a1.default_self;
	RUN a2.default_self;
	RUN a3.default_self;
	RUN a4.default_self;
	RUN a5.default_self;
	RUN a6.default_self;
    END default_self;

    METHOD values;
	equil := TRUE;
	RUN a0.values;
	RUN a1.values;
	RUN a2.values;
	RUN a3.values;
	RUN a4.values;
	RUN a5.values;
	RUN a6.values;
	
	(* input nontraditional specs here *)

	(* set exit temperature for reactor to 500 deg C *)
	a4.U4.product1.T := 773.15 {K};
	
	ratioWaterIntoReactor := 1.75;
	
	ratioAirIntoFurnace := 1.2;
	
	a6.U3.product1.f[H2] := 3.0 {mol/s};

    END values;
    
    METHOD specify;
	RUN a6.specify;
	RUN a5.specify;
	RUN a4.specify;
	RUN a2.specify;
	RUN a1.specify;
	RUN a3.specify;
	RUN a0.specify;
	
	(* input nontraditional specs here *)

	(* release stream split for a3.U3 *)
	a3.U3.split[Wa].fixed := FALSE;

	(* release exit temperature for heat exchangers *)
	a5.U6.product.T.fixed := FALSE;
	a4.U1.product.T.fixed := FALSE;

	(* release steam split ratio feeding Add Steam unit *)
	ratioWaterIntoReactor.fixed := TRUE;
	a3.U4.split[Wa].fixed := FALSE;
	
	(* release water flow into system *)
	a3.U1.feed1.f[Wa].fixed := FALSE;
	
	(* set air ratio to furnace *)
	ratioAirIntoFurnace.fixed := TRUE;
	a5.U1.feed1.f[O2].fixed := FALSE;

	(* remaining are specs we wish to meet *)
	
	(* release city gas flow to furnace *)
	a5.U2.feed1.flow.fixed := FALSE;
	
	(* set hydrogen production rate *)
	(* and release the flow of city gas in *)
	a6.U3.product1.f[H2].fixed := TRUE;
	a1.U1.feed1.flow.fixed := FALSE;
	a4.U4.product1.T.fixed := TRUE;
		
    END specify;
    
END testSimpleH2Process;


