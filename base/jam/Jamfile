#
# Jamfile to build Ascend4 base libraries
# (see http://www.freetype.org/jam/index.html)
#
# This file is part of the Ascend Build System.
#
# Copyright (C) 2005  Jerry D. St.Clair
#
# The Ascend Build System is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This program is distributed in hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139 USA.
# Check the file named COPYING.
#---------------------------------------------------------------------------
#
# UNDER CONSTRUCTION
#
# This Jamfile builds the Ascend base libraries using the jam* build
# tool.  Using generic Jambase and Jamrules_general files (located at
# ../../jam), it builds the Ascend base functionality as a set of static
# libraries.  It does not currently support building dynamic libraries,
# executables, or interface libraries.
#
# The Ascend jam build system currently supports building the libraries
# under Windows using the MSVC, Borland, MinGW, and Watcom** compilers,
# and under Linux with gcc.  With use of the customized ../.../jam/Jambase
# file, it should work with both the original and ftjam variants of jam.
# The system was developed primarily using ftjam.
#
# The libraries are built in ./CONFIGTYPE/COMPILER where
#     CONFIGTYPE = Debug, Release
#     COMPILER   = bcc, msvc, mingw, watcom, unix
#
# Installation of the libraries or headers is not supported at this time.
#-------------------------------------------------------------------------
#
# Build Instructions
#
# 1. jam must be installed and configured for the compiler in use.
#
# 2. Copy the ../../jam/Jamrules_general.in to ../../jam/Jamrules_general.
#
# 3. Manually edit Jamrules_general and (if necessary) the Jamfile to set
#    configuration and local directory options.
#
# 4. Run jam from using the provided Jambase:
#       jam -f ../../jam/Jambase libs
#
#-------------------------------------------------------------------------
# Notes:
#
# * jam is an open source, multi-platform build tool which is
#   available in several flavors.  These include the original
#   (http://www.perforce.com) and ftjam
#   (http://www.freetype.org/jam/index.html) variants, among others.
#
# ** Currently, Open Watcom 1.3 can compile the Ascend sources
#    and build the libraries.  However, it does not supply the required
#    IEEE math functions isnan() and copysign().  At present, Ascend does
#    not supply these, so the use must provide these functions to use
#    the libraries under Watcom.
#
#---------------------------------------------------------------------------

# TODO: remove if end up using SubDir rules
JAM_GENERAL_DIR = ..$(SLASH)..$(SLASH)jam ;
include $(JAM_GENERAL_DIR)$(SLASH)Jamrules_general ;

srcdir = ..$(SLASH)generic ;

# Build flags for Ascend base libraries
BUILD_COMPILER  = 1 ;
BUILD_GENERAL   = 1 ;
BUILD_SOLVER    = 1 ;
BUILD_UTILITIES = 1 ;
BUILD_PACKAGES  = 1 ;

# Ascend modules subdirectories
ASC_COMPILER_DIR  = $(srcdir)$(SLASH)compiler ;
ASC_GENERAL_DIR   = $(srcdir)$(SLASH)general ;
ASC_SOLVER_DIR    = $(srcdir)$(SLASH)solver ;
ASC_UTILITIES_DIR = $(srcdir)$(SLASH)utilities ;
ASC_PACKAGES_DIR  = $(srcdir)$(SLASH)packages ;

HDRS += $(srcdir) ;

DEPENDS all : libs ;
NOTFILE libs ;

# Location of old Ascend Tcl/Tk interface sources.
# Some solver modules include headers originally located in
# the Tcl/Tk-specific interface subdirectory.  Until the
# source is reorganized to decouple the base and interface
# components, we have to be able to find those headers
# TODO:  remove/rework when Tcl/Tk decoupled from base library
ASC_INTERFACE_ROOT = ..$(SLASH)..$(SLASH)tcltk98$(SLASH)generic ;

# Comment to compile without using the Epperly malloc debugger
#DEBUG_MALLOC = -DMALLOC_DEBUG ;

#  Location of the tcl.h and tk.h header files
# TODO:  remove when Tcl/Tk decoupled from base library
TK_HDRS = ..$(SLASH)..$(SLASH)..$(SLASH)Tcl$(SLASH)include ;

#=========================================================================
# Compiler module
#=========================================================================
if $(BUILD_COMPILER)
{
  ASC_COMPILER_SOURCES =
    anoncopy.c
    anonmerg.c
    anontype.c
    arrayinst.c
    ascCompiler.c
    ascParse.c
    atomsize.c
    atomvalue.c
    bintoken.c
    bit.c
    braced.c
    case.c
    check.c
    child.c
    childdef.c
    childio.c
    childinfo.c
    cmpfunc.c
    commands.c
    copyinst.c
    createinst.c
    destroyinst.c
    dimen.c
    dimen_io.c
    dump.c
    evaluate.c
    exprio.c
    exprs.c
    exprsym.c
    extcall.c
    extfunc.c
    extinst.c
    find.c
    forvars.c
    fractions.c
    freestore.c
    func.c
    initialize.c
    instance.c
    instance_io.c
    instantiate.c
    instmacro.c
    instquery.c
    interval.c
    library.c
    linkinst.c
    logrel_io.c
    logrel_util.c
    logrelation.c
    mathinst.c
    mergeinst.c
    module.c
    name.c
    nameio.c
    notate.c
    numlist.c
    packages.c
    parentchild.c
    parpend.c
    pending.c
    proc.c
    procframe.c
    procio.c
    prototype.c
    refineinst.c
    rel_common.c
    relation.c
    relation_io.c
    relation_util.c
    rootfind.c
    rounded.c
    safe.c
    scanner.c
    select.c
    setinst_io.c
    setinstval.c
    setio.c
    sets.c
    slist.c
    simlist.c
    statement.c
    statio.c
    switch.c
    symtab.c
    syntax.c
    temp.c
    tmpnum.c
    type_desc.c
    type_descio.c
    typedef.c
    typelint.c
    redirectFile.c
    units.c
    universal.c
    value_type.c
    visitinst.c
    visitlink.c
    vlist.c
    vlistio.c
    watchpt.c
    watchptio.c
    when.c
    when_io.c
    when_util.c
    ;

  SEARCH on $(ASC_COMPILER_SOURCES) = $(ASC_COMPILER_DIR) ;

  #----------------------------------------------------------------------
  # rounded.c needs a special define
  #----------------------------------------------------------------------
  CCFLAGS on rounded$(SUFOBJ) += -DSLOPPY ;

  #----------------------------------------------------------------------
  # ascParse.c & ascParse.h
  #
  # ascParse implements the Ascend grammar.  It is generated by
  # yacc with modification (e.g. by sed) to change the default
  # 'yy' prefixes to 'zz_'.  If yacc and sed are available in
  # the build environment (i.e. $(YACC) and $(SED) are non-null
  # in jam), ascParse.c and ascParse.h are generated using these
  # tools.  If not, copies of pre-generated files are used instead.
  #----------------------------------------------------------------------

  # ascParse.c needs a special define
  CCFLAGS on ascParse$(SUFOBJ) += -DYY_USE_CONST ;

  rule make_ascParse
  {
      if $(YACC) && $(SED)
      {
        Echo Generating ascParse from $(YACC) and $(SED) ;
        DEPENDS $(ascParse_c) $(ascParse_h) : $(ascParse_y) ;
        Yacc1 $(ascParse_c) $(ascParse_h) : $(ascParse_y) ;
        YaccMv $(ascParse_c) $(ascParse_h) : $(ascParse_y) ;
        yy_to_zz_c $(ascParse_c) : $(ascParse_y) ;
        yy_to_zz_h $(ascParse_h) : $(ascParse_y) ;
      }
      else
      {
        Echo Copying ascParse.* from ascParse.*.no.yacc ;
      	File $(ascParse_c) : ascParse.c.no.yacc ;
        File $(ascParse_h) : ascParse.h.no.yacc ;
      }

      # make the header dependent
      INCLUDES $(ascParse_c) : $(ascParse_h) ;

      Clean clean : $(ascParse_c) $(ascParse_h) ;
  }

  actions yy_to_zz_c
  {
  	$(SED) -e "/#ifndef YYSTYPE/,/#endif/d" -e "/^#line /d" -e "s\yy\zz_\g" -e "s\YY\ZZ_\g" $(1) > tempfile.tmp
  	$(MV) tempfile.tmp $(1)
  }

  actions yy_to_zz_h
  {
  	$(SED) -e "s\yy\zz_\g" -e "s\YY\ZZ_\g" $(1) > tempfile.tmp
  	$(MV) tempfile.tmp $(1)
  }

  ascParse_c = [ FGristSourceFiles ascParse.c ] ;
  ascParse_h = [ FGristSourceFiles ascParse.h ] ;
  ascParse_y = ascParse.y ;

  LOCATE on $(ascParse_c) = $(ASC_COMPILER_DIR) ;
  LOCATE on $(ascParse_h) = $(ASC_COMPILER_DIR) ;
  LOCATE on $(ascParse_y) = $(ASC_COMPILER_DIR) ;

  make_ascParse ;

  #----------------------------------------------------------------------
  # scanner.c
  #
  # scanner.c implements the Ascend lexical analyzer.  It is
  # generated by lex/flex if available in the build environment
  # (i.e. $(LEX) is non-null in jam).  If lex/flex is not available,
  # the a copy of a pre-generated file is used instead.
  #----------------------------------------------------------------------

  # scanner.c needs a special define (Watcom requires the '=""'. )
  CCFLAGS on scanner$(SUFOBJ) += -DYY_USE_CONST="" ;

  scanner_c = [ FGristSourceFiles scanner.c ] ; 
  scanner_h = scanner.h ;
  scanner_l = scanner.l ;
  LEXOPTS on $(scanner_c) = -Pzz_ ;

  LOCATE on $(scanner_c) = $(ASC_COMPILER_DIR) ;
  LOCATE on $(scanner_h) = $(ASC_COMPILER_DIR) ;
  LOCATE on $(scanner_l) = $(ASC_COMPILER_DIR) ;

  LEX_or_copy $(scanner_c) : $(scanner_l) : scanner_c_no_flex : $(scanner_h) ;

  #----------------------------------------------------------------------
  # Build the compiler library
  #----------------------------------------------------------------------
  LOCATE_TARGET = $(BUILD_DIR)$(SLASH)compiler ;
  SEARCH_SOURCE = $(ASC_COMPILER_DIR) ;

  Library $(ASC_COMPILER_LIBNAME) : $(ASC_COMPILER_SOURCES) ;
  MakeLocate $(ASC_COMPILER_LIB) : $(BUILD_DIR) ;

  DEPENDS libs : $(ASC_COMPILER_LIB) ;
}

#=========================================================================
# General module
#=========================================================================
if $(BUILD_GENERAL)
{
  ASC_GENERAL_SOURCES =
    dstring.c
    hashpjw.c
    list.c
    listio.c
    pool.c
    pretty.c
    stack.c
    table.c
    tm_time.c
    ;

  LOCATE_TARGET = $(BUILD_DIR)$(SLASH)general ;
  SEARCH_SOURCE = $(ASC_GENERAL_DIR) ;

  Library $(ASC_GENERAL_LIBNAME) : $(ASC_GENERAL_SOURCES) ;
  MakeLocate $(ASC_GENERAL_LIB) : $(BUILD_DIR) ;

  DEPENDS libs : $(ASC_GENERAL_LIB) ;
}

#=========================================================================
# Solver module
#=========================================================================
if $(BUILD_SOLVER)
{
  ASC_SOLVER_SOURCES =
    analyze.c
    bnd.c
    bndman.c
    calc.c
    cond_config.c
    conditional.c
    conopt.c
    discrete.c
    linsol.c
    linsolqr.c
    linutils.c
    logrel.c
    logrelman.c
    model_reorder.c
    mps.c
    mtx_basic.c
    mtx_linal.c
    mtx_perms.c
    mtx_query.c
    mtx_reorder.c
    mtx_use_only.c
    rel.c
    relman.c
    rootfind.c
    slv.c
    slv0.c
    slv1.c
    slv2.c
    slv3.c
    slv6.c
    slv7.c
    slv8.c
    slv9.c
    slv9a.c
    slvDOF.c
    slv_common.c
    slv_interface.c
    slv_stdcalls.c
    system.c
    var.c
    ;

  LOCATE_TARGET = $(BUILD_DIR)$(SLASH)solver ;
  SEARCH_SOURCE = $(ASC_SOLVER_DIR) ;

  Library $(ASC_SOLVER_LIBNAME) : $(ASC_SOLVER_SOURCES) ;
  MakeLocate $(ASC_SOLVER_LIB) : $(BUILD_DIR) ;
  ObjectCcFlags $(ASC_SOLVER_SOURCES) : $(SOLVER_DEFS) ;

  # TODO:  remove when Tcl/Tk interface decoupled from base library
  ObjectHdrs slv6.c  slv_interface.c : $(ASC_INTERFACE_ROOT) ;

  DEPENDS libs : $(ASC_SOLVER_LIB) ;
}

#=========================================================================
# Utilities module
#=========================================================================
if $(BUILD_UTILITIES)
{
  ASC_UTILITIES_SOURCES =
    ascDynaLoad.c
    ascEnvVar.c
    ascMalloc.c
    ascPanic.c
    ascPrint.c
    ascSignal.c
    mem.c
    readln.c
    set.c
    ;

  LOCATE_TARGET = $(BUILD_DIR)$(SLASH)utilities ;
  SEARCH_SOURCE = $(ASC_UTILITIES_DIR) ;

  Library $(ASC_UTILITIES_LIBNAME) : $(ASC_UTILITIES_SOURCES) ;
  MakeLocate $(ASC_UTILITIES_LIB) : $(BUILD_DIR) ;

  # TODO:  remove when Tcl/Tk decoupled from base library
  ObjectHdrs ascPrint.c : $(TK_HDRS) ;

  DEPENDS libs : $(ASC_UTILITIES_LIB) ;
}

#=========================================================================
# Packages module
#=========================================================================
if $(BUILD_PACKAGES)
{
  ASC_PACKAGES_SOURCES =
	  sensitivity.c 
    ascFreeAllVars.c
    ;

  LOCATE_TARGET = $(BUILD_DIR)$(SLASH)packages ;
  SEARCH_SOURCE = $(ASC_PACKAGES_DIR) ;

  Library $(ASC_PACKAGES_LIBNAME) : $(ASC_PACKAGES_SOURCES) ;
  MakeLocate $(ASC_PACKAGES_LIB) : $(BUILD_DIR) ;

  DEPENDS libs : $(ASC_PACKAGES_LIB) ;
}

#======================================================================
# SOLVERS / INTEGRATORS
#
#  If you are linking to MINOS or other external solvers, the solver
#  interface needs to know about it.
#  Set the comment flags as appropriate on the following definitions.
#  If the settings here do not match the libraries you link, you will
#  almost certainly get runtime errors if not link errors.
#======================================================================

# >>>>  UNDER CONSTRUCTION  <<<<

#  to build with slv, uncomment the next line
#SOLVER_DEFS += -DSTATIC_SLV ;

#  to build with optsqp, uncomment the next line
#SOLVER_DEFS += -DSTATIC_OPTSQP ;

#  to build with qrslv, uncomment the next line
SOLVER_DEFS += -DSTATIC_QRSLV ;

#  to build with mps, uncomment the next line
#SOLVER_DEFS += -DSTATIC_MPS ;

#  to build with ngslv, uncomment the next line
#SOLVER_DEFS += -DSTATIC_NGSLV ;

#  to build with cmslv (requires CONOPT), uncomment the next line
#SOLVER_DEFS += -DSTATIC_CMSLV ;

#  to build with lrslv, uncomment the next line
#SOLVER_DEFS += -DSTATIC_LRSLV ;

#  the configure script sets the following depending on its search for minos.
#  to force a build WITHOUT minos, comment the next line
#SOLVER_DEFS += -DSTATIC_MINOS ;
#
# name & location of the minos library
#MINOSLIB =  ;
#LOCATE on $(MINOSLIB) =  ;

# TODO the configure script sets the following depending on its search for conopt.
#  to force a build WITHOUT conopt, comment the next line
#SOLVER_DEFS += -DSTATIC_CONOPT ;
#
# name & location of the conopt library
#CONOPTLIB =  ;
#LOCATE on $(CONOPTLIB) =  ;

# TODO the configure script sets the following depending on its search for lsode.
#  to force a build WITHOUT lsode, comment the next line
SOLVER_DEFS += -DSTATIC_LSOD ;

