#  @configure_input@
#
#  This is a configuration file for ASCEND.
#  If it has the name "ConfigAscend.in", then it is a template
#  for the "ConfigAscend" configuration file.  To generate the
#  actual "ConfigAscend" file, run "./configure", which is a
#  configuration script generated by the "autoconf" program.
#  Constructs like @foo@ will be replaced in the actual
#  "ConfigAscend" configuration file.
#
#  This file contains the definitions and macros needed by all the
#  ascend sub-makefiles.
#
#  by Ben Allan June 25, 1994.
#  $Revision: 1.18 $
#  $Date: 1999/01/19 16:09:02 $
#  $Author: mthomas $
#  $Source: /afs/cs.cmu.edu/project/ascend/Repository/ascend4/ConfigAscend.in,v $
#
#  To build ASCEND you must set some configuration information in
#  this file and then type 'make'.
#

# tcl/tk basis
LIB_RUNTIME_DIR=@TCLCONFIG@
@NOTCLCONFIG@include $(LIB_RUNTIME_DIR)/tclConfig.sh
@NOTCLCONFIG@include $(LIB_RUNTIME_DIR)/tkConfig.sh

####>>>  C  <<<###############################################################

#  CC
#  your ansi-compliant C compiler and C preprocessor
#
CC = @CC@
CPP = @CPP@

#  CFLAGS
#  options for the C compilter
#  This is where optimization and debugging options should be set.
#
#  The flags which `configure' sets should be sufficient to compile
#  ascend; however for more error checking and warnings at compile
#  time, you may want to add the following to the CFLAGS variable.
#  Note that these flags are compiler and OS dependent.
#
#	Any GCC
#CCWARN = -ansi -Wall -Wshadow -W -pedantic -D_GNU_SOURCE
#	DEC Alpha OSF or Digital-Unix
#CCWARN = -std1 -verbose
#	DEC Ultrix
#CCWARN = -std -w0
#	HP/UX
#CCWARN = +w1
#	IBM AIX
#CCWARN = 
#	SGI IRIX
#CCWARN = +w
#	Sun Solaris (2.x)  (/opt/SUNWspro/bin/cc)
#CCWARN = -v -Xc
#	Sun SunOS (Solaris 1.x)  (/usr/lang/cc)
#CCWARN = -vc -Xc
#
CFLAGS = -O $(CCWARN)			# for optimization
CFLAGS = -g $(CCWARN)			# for debugging
CFLAGS = @CFLAGS@ $(CCWARN)

#  All switches to pass to the C compiler
#
CC_SWITCHES = $(INCLUDES) $(DEFINES) $(CFLAGS)

#  The list of includes.  DIR_SPECIFIC_INCS are includes that are specific
#  to a particular subdirectory of the ASCEND build
#
INCLUDES = $(ASC_INCS) $(DIR_SPECIFIC_INCS)

#  The list of defines.  DIR_SPECIFIC_DEFS are defines that are specific
#  to a particular subdirectory of the ASCEND build
#
DEFINES = $(CONFIGURE_DEFS) $(DIR_SPECIFIC_DEFS) \
	$(MOD_ASCMALLOC) $(FATFUNC) $(MEM_DECREASE)

#  DEBUGGER LIBRARIES
#  any special files/libraries needed for building a debugging version
#  of a binary
#
DEBUG_LIBS = @DEBUG_LIBS@

#  DEFINES
#  definitions that `configure' generates
#
CONFIGURE_DEFS = @DEFS@

#  AR
#  the archiver (normally /bin/ar)
#
AR = ar

#  RANLIB
#  set this to ":" on SysV systems; to "ranlib" elsewhere
#
RANLIB = @RANLIB@

#  LD
#  the linker/loader
#
LD = ld

#  YACC
#  On some old systems yacc writes some K&R extern definitions to
#  the .c file that it generates. This has caused havoc on at least
#  one system. Define your yacc here. For the Suns in particular
#  /usr/lang/SC1.0/ansi/yacc was required. If you cannot find an ansi
#  compatible yacc, delete the 'extern char *malloc(), realloc() definitions
#  if generated at the top of your .c created from the .y file.
#
YACC = @YACC@

#  LEX
#  We require the flex lexer
#
LEX = @LEX@
LEXLIB = @LEXLIB@

#  UNSIGNED CHARACTERS
#  Some compilers (notably AIX3.1 cc) default chars to be unsigned which
#  causes many things to break in file operations, particularly the 
#  detection of EOF conditions.  Uncomment one of the CHAR_SIGNS
#  if your compiler defaults char to be unsigned char.
#
#CHAR_SIGNS = -qchars=signed


####>>>  FILE UTILITIES  <<<##################################################

#  Basic File Utilities
#
CMP   = cmp
CP    = cp
ECHO  = echo
LN_S  = @LN_S@
MKDIR = mkdir
MV    = mv
RM    = rm -f
SED   = sed


####>>>  MATH  <<<############################################################

#  Some compilers need to be told where to find the math libraries
#
MATH_LIBS = @MATH_LIBS@


####>>>  X11  <<<#############################################################

#  The interface and 1 file in the solver directory need to know where the
#  include files and library for X11 are. If your C compiler doesn't know
#  automatically where the X files are, or if they are in a non-standard
#  place, set the following variables to point at them.  These should be
#  the same X files that Tk was built with on your system.
#  Most systems do not need these variables to be set.
#
#  The include files for X11:
X11_INCS = @X11_INCLUDES@

#  The libraries files for X11:
X11_LIBS = @X11_LIBRARIES@ -lX11 @X11_EXTRA_LIBS@ @X11_RUN_PATH@



####>>>  TCL / TK  <<<########################################################


#  Set the location of the Tcl/Tk libraries and include files.
#
#  The location of the libtk.a and libtcl.a libraries.
#  The order should be -ltk -ltcl
TCL_LIBRARY = @TCLLIB@
TK_LIBRARY  = @TKLIB@
TK_LIBS  = $(TK_LIBRARY) $(TCL_LIBRARY) $(TK_LD_SEARCH_FLAGS) $(DL_LIBS)

#  The location of the tcl.h and tk.h header files
TK_INCS  = -I@TCLINCLUDE@ @TK_HDR@

# If TK_LIBS and TK_INCS are not properly set, ASCEND cannot build.


#  We also need the TkTable widget which does not come as a
#  standard part of the Tcl/Tk distribution.  This library can
#  either be loaded statically or dynamically.  If the configure
#  script found libTktable.a, use static loading; otherwise, use
#  dynamic loading.
#
HAVE_TKTABLE = @HAVE_TKTABLE@
TKTABLE_LIB = @TKTABLE_LIB@


####>>>  SOLVERS / INTEGRATORS  <<<###########################################

#  If you are linking to MINOS or other external solvers, the solver
#  interface needs to know about it. 
#  Set the comment flags as appropriate on the following definitions.
#  If the settings here do not match the libraries you link, you will
#  almost certainly get runtime errors if not link errors.

#  to build with slv, uncomment the next line
#EXT_SLV = -DSTATIC_SLV

#  to build with optsqp, uncomment the next line
#AWW20041129:EXT_OPTSQP = @HAVE_OPTSQP@
#
#  location of the rsqp library
#AWW20041206:OPTSQPLIB = @OPTSQPLIB@

#  to build with qrslv, uncomment the next line
EXT_QRSLV = -DSTATIC_QRSLV

#  to build with mps, uncomment the next line
#EXT_MPS = -DSTATIC_MPS

#  to build with ngslv, uncomment the next line
#EXT_NGSLV = -DSTATIC_NGSLV

#  to build with cmslv, uncomment the next line
EXT_CMSLV = -DSTATIC_CMSLV

#  to build with lrslv, uncomment the next line
#EXT_LRSLV = -DSTATIC_LRSLV

#  the configure script sets the following depending on its search for minos.
#  to force a build WITHOUT minos, comment the next line
#EXT_MINOS = @HAVE_MINOS@
#
#  location of the minos library
#MINOSLIB = @MINOSLIB@

#  the configure script sets the following depending on its search for conopt.
#  to force a build WITHOUT conopt, comment the next line
#AWW20041129:EXT_CONOPT = @HAVE_CONOPT@
#
#  location of the conopt library
#AWW20041206:CONOPTLIB = @CONOPTLIB@

#  the configure script sets the following depending on its search for lsode.
#  to force a build WITHOUT lsode, comment the next line
EXT_LSOD = @HAVE_LSOD@
#
#  location of the lsode library
LSODLIB = @LSODLIB@

#  combine all the defines for the solver into a single variable
#AWW20041206:SOLVER_DEFS = $(EXT_SLV) $(EXT_OPTSQP) $(EXT_QRSLV) $(EXT_MPS) $(EXT_NGSLV) \
#AWW20041206:	$(EXT_CMSLV) $(EXT_LRSLV) $(EXT_MINOS) $(EXT_CONOPT) $(EXT_LSOD) \
#AWW20041206:	$(EXT_OPTSQP)
SOLVER_DEFS = $(EXT_QRSLV) $(EXT_LSOD) $(EXT_CMSLV) $(EXT_LRSLV) $(EXT_NGSLV) $(EXT_MINOS) $(EXT_CONOPT)




####>>>  PACKAGES  <<<########################################################

#  Build ascend with packages.
#  Packages are bits of compiled code that represent models, or solvers,
#  or, in general, any bits of external code.

#  Packages may be dynamically or statically linked/loaded. Add one or
#  the other defines : -DSTATIC_PACKAGES or -DDYNAMIC_PACKAGES
#
#HAVE_PACKAGES = -DSTATIC_PACKAGES
#HAVE_PACKAGES = -DDYNAMIC_PACKAGES

#  If statically linked, i.e. -DSTATIC_PACKAGES, then set PACK_LIBS
#  to where your external packages exist. If dynamically linked or
#  if you are building with NO_PACKAGES, leave PACK_LIBS empty.
#
PACK_LIBS = ../archive/libascpackages.a
#PACK_LIBS = 

#  The default behavor is to have packages, so if you don't want
#  packages, you have to uncomment the following line
#HAVE_PACKAGES = -DNO_PACKAGES


####>>>  SHARED OBJECTS  <<<##################################################

#  When using dynamic packages or no packages, the Makefile needs
#  to know how to make a shared object and what suffix the
#  shared object should have.
#
#  Library file(s) to link against for dynamic loading to work
DL_LIBS = @DL_LIBS@
#
#  Flags to pass to the C compiler when linking object files
#  into an executable application binary
LD_FLAGS = @LD_FLAGS@
#
#  Flags to pass to ld to tell the run-time linker where to find
#  shared objects
LD_SEARCH_FLAGS = @LD_SEARCH_FLAGS@
#
#  Flags to pass to the C compiler when compiling the components
#  of a shared library
SHLIB_CFLAGS = @SHLIB_CFLAGS@
#
#  Base command to use to combing object files into a shared library
SHLIB_LD = @SHLIB_LD@
#
#  Dependent libraries for the linker to scan when creating a shared
#  library
SHLIB_LD_LIBS = @SHLIB_LD_LIBS@
#
#  Suffix to use for the names of dynamically loadable objects.
SHLIB_SUFFIX = @SHLIB_SUFFIX@
#
#  Specifies everything that comes after libfoo in the shared library
#  "foo"
ASC_LIB_SUFFIX = @ASC_LIB_SUFFIX@


####>>>  F77  <<<#############################################################

#  F77
#  your f77 compiler
#
F77 = @F77@

#  Fortran compilation flags:
#  These are used for making the ASCEND libraries based on FORTRAN codes.
#  These should be set to get the best performance possible out of your
#  f77 compiler without optimizing away functions that are not obviously
#  called, as some compilers do by default.
#
F77FLAGS = -I4 -O
#
#  F77LIBS is for the base f77 libraries. If you are linking no f77
#  objects to ascend, it may be left undefined.
#  Set F77LIBS appropriate for your machine and desired loader behavior.
#
F77_LIBS = @F77LIBS@
#
#  F77_OPTS are for miscellaneous options, such as -tmpdir=
#
F77_OPTS = 
#
#  All the flags to pass to F77
#
F77_SWITCHES = $(F77FLAGS) $(F77_OPTS)

####>>>  FORTRAN LIBRARIES  <<<###############################################

#  If building ASCEND with MINOS or other FORTRAN based solvers/packages,
#  uncomment one of the FOR_LIBS definitions below to indicate the FORTRAN
#  libraries to link into ASCEND.
#
#  Set the BLAS and LINPACK library definitions to point at
#  machine specific libraries (if you have them) to get the
#  best speed out of ASCEND.
#
BLASLIB = @BLASLIB@
LPAKLIB = @LPAKLIB@

FOR_LIBS = $(LSODLIB) $(MINOSLIB) $(OPTSQPLIB) $(CONOPTLIB) \
	$(LPAKLIB) $(BLASLIB) \
	$(F77_LIBS)


####>>>  INSTALL  <<<#########################################################

#  Location to install program, libs, etc, and the install program

#  First, set INSTALL to the location of a BSD-compatible install program
#
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

#  Where to install information
#
#  prefix for platform dependent files:
exec_prefix = @exec_prefix@
#
#  prefix for platfrom independent files (.h, .tcl, .asc, etc)
prefix = @prefix@
#
#  directory for ascend binary
BIN_DIR = $(exec_prefix)/bin
#
#  directory for ascend scripts
SCRIPT_DIR = $(prefix)/bin
#
#  directory for ascend documentation
DOC_DIR = $(prefix)/doc
#
#  directory for ascend include files
INCLUDE_DIR = $(prefix)/include
#
#  directory for ascend info-style files
INFO_DIR = $(prefix)/info
#
#  directory for ascend platform-dependent libraries
LIB_DIR = $(exec_prefix)/lib
#
#  top level directory for ascend man pages
MAN_DIR = $(prefix)/man
#
#  directories for specific man pages
MAN1_DIR = $(MAN_DIR)/man1
MAN3_DIR = $(MAN_DIR)/man3
MAN5_DIR = $(MAN_DIR)/man5
MAN8_DIR = $(MAN_DIR)/man8
MANn_DIR = $(MAN_DIR)/mann
#
#  directory for ascend help files
HELP_DIR = $(prefix)/help
#
#  directory for ascend models (libraries & examples)
MODELS_DIR = $(prefix)/models
#
#  directory for ascend package code
PACK_DIR = $(prefix)/packages
#
#  directory for general tcl/tk code
TK_LIBRARY_DIR = $(prefix)/lib/tcl
#
#  directory for ascend specific tcl/tk code
ASCEND_TK_DIR = $(prefix)/TK


####>>>  CMU DEVELOPERS  <<<##################################################

#  The following flags control sources that are not part of the standard
#  distribution. Do not uncomment any of these lines unless you know
#  what you are doing; in particular, don't mess with these and then
#  expect us to be able to help you when it won't build.

#  Tom Epperly's malloc debugger:
#
# slow
#MOD_ASCMALLOC = -DMOD_ASCMALLOC -DMALLOC_DEBUG
# slower
#MOD_ASCMALLOC = -DMOD_ASCMALLOC -DMALLOC_DEBUG -DALLOCATED_TESTS

#  Damned expensive malloc debugger (sources not distributed):
#
# slowest
#DEBUG_MALLOC_LIBS = ../dbmalloc/libdbmalloc.a
#DEBUG_MALLOC = -DBEBUG_MALLOC

#  Find Dependencies:  makedepend/g++dep executable
#
# all dependencies
DEPEND = /usr/local/bin/makedepend
DEPEND = /usr/local/lib/ascend/etc/g++dep
#
# all but system dependencies
DEPEND_NOSYS = /usr/local/lib/ascend/etc/g++dep_nosys
# to make without-system-dependencies the default, uncomment the next line
#DEPEND = $(DEPEND_NOSYS)
#
# remove dependencies information version
DEPEND_RM = /usr/local/lib/ascend/etc/g++nodep
#
#  All switches to pass to the dependency generator
#
DEPEND_FLAGS = $(INCLUDES) $(DEFINES)


#  Tags
#
ETAGS = /usr/local/bin/etags
CTAGS = /usr/local/bin/ctags


# cflow, sparc only. on other platforms cflow and dot, if they exist,
# may need different switches. dot works well on sun/solaris/hpux OS.
# with a bit of hacking on usr/local/lib/ascend we could have dot on
# all but alphas since Ben has the sources. Finding cflow may be harder.
CFLFLAGS = -DNDEBUG -I.. -I. 
RCFLFLAGS = -DNDEBUG -I.. -I. -r

# replaces tabs with 2 blanks for human consumption, and eat externals
#CPRCOM = |/usr/5bin/pr -e2 -t | eatcflowext
# eat external function calls (fprintf, etc) only
CPRCOM = | eatcflowext

# eat external calls and convert to dot input format
CPSCOM = | eatcflowext | eatcflow2dot

# note sunos4 /bin/cflow is fatally stupid. use sys5 version
CFLOW = /usr/lang/cflow
# you probably don't have this. It's in my path (~ballan/bin/dot)
# dot can be stunningly slow on twisty files.
DOT = dot
# can also generate mif (-Tmif), etc. see dot man page.
DOTFLAGS = -Tps
# eatcflowext,eatcflow2dot are tcl script ben wrote. vagu:~ballan/bin
# dot is the proprietary lucent graph utility.


#  Purify
#
PURIFY = purify
QUANTIFY = quantify
#set dirs in the next 3 accordingly
PURIFY_OPTS = -always-use-cache-dir -cache-dir=/usr1/ballan/tmp/purify \
        -windows=no -inuse-at-exit=yes
PURIFY_OPTS = -always-use-cache-dir -cache-dir=/usr1/ballan/tmp/purify \
        -inuse-at-exit=yes
QUANTIFY_OPTS = $(PURIFY_OPTS) -record-system-calls=no
# use these if you haven't paid pureatria yet.
PURIFY_OPTS = 
QUANTIFY_OPTS = $(PURIFY_OPTS)


#  Pixie
#  (only available on the alpha)
#
PIXIE = pixie
PIXIE_OPTS = -pixie -heavy -lines -invocations -procedures
PIXIEDIR= a4


#  set the following to -DCHRIS_FUNC to get the extra fucn properties
#  needed for the Chris Welhelmy solver.
#
#FATFUNC = -DCHRIS_FUNC


#  if your machine's memory is allocated in decreasing order, set the
#  following to -DMEM_DECREASE to try to keep memory usage more compact
#
#MEM_DECREASE = -DMEM_DECREASE


####>>>  MISC  <<<############################################################

#  include files for ascend
#
#AWW: See comments in configure.in just before asc_include is set.  I am
#AWW: not sure why -I@asc_include@ is here, but I know the others are
#AWW: needed - based on those comments.
#AWW20041206: ASC_INCS = -I@asc_include@ -I..
ASC_INCS = -I@fullpathsrcdir@/../generic  -I@fullpathsrcdir@/../../tcltk98/generic -I..

#  library files for ascend
#
ASC_LIB_STEMS=if compiler solver utilities general
ASC_LIBS=$(ASC_LIB_STEMS:%=../archive/libasc%.a) $(PACK_LIBS)

#  The time/place stamp for the executable.
#  Reverse the comment flags if your cpp doesn't understand it
#
TIMESTAMP = -DTIMESTAMP="\"by `whoami`@`hostname`\""
#TIMESTAMP = -DTIMESTAMP="\"\""

#  Force emacs to treat this file as a Makefile
#
# Local Variables: ***
# mode:Makefile ***
# End: ***
