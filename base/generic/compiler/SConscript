Import('env')

csrcs = Split("""
	anoncopy.c anonmerg.c anontype.c arrayinst.c ascCompiler.c
	atomsize.c atomvalue.c bintoken.c bit.c braced.c
	case.c check.c child.c childdef.c childio.c childinfo.c cmpfunc.c
	commands.c copyinst.c createinst.c destroyinst.c
	dimen.c dimen_io.c dump.c
	evaluate.c exprio.c exprs.c exprsym.c extcall.c
	extfunc.c extinst.c find.c forvars.c fractions.c
	freestore.c func.c initialize.c instance.c instance_io.c
	instantiate.c instmacro.c instquery.c
	library.c linkinst.c logrel_io.c logrel_util.c
	logrelation.c mathinst.c mergeinst.c module.c name.c
	nameio.c notate.c numlist.c parentchild.c
	parpend.c pending.c plot.c proc.c procframe.c
	procio.c prototype.c qlfdid.c refineinst.c rel_common.c relation.c
	relation_io.c relation_util.c rootfind.c safe.c
	select.c setinst_io.c setinstval.c setio.c
	sets.c slist.c simlist.c statement.c statio.c switch.c
	symtab.c syntax.c temp.c tmpnum.c type_desc.c
	type_descio.c typedef.c typelint.c redirectFile.c
	units.c universal.c
	value_type.c visitinst.c visitlink.c vlist.c vlistio.c
	watchpt.c watchptio.c when.c when_io.c when_util.c
""")

# SLOPPY sources. This is a painful hack that should be fixed using 'config.h' style solution.

import platform
if env.has_key('HAVE_YACC'):
	parsersource = 'ascParse.y'
	parserheader = 'ascParse.h'
else:
	parsersource = 'ascParse_no_yacc.c'
	parserheader = env.Command('ascParse.h', 'ascParse_no_yacc.h',Copy('$TARGET', '$SOURCE'))

if env.has_key('HAVE_LEX'):
	scannersource = 'scanner.l'
else:
	scannersource = 'scanner_no_flex.c'

parser = env.SharedObject(target=['ascParse'], source=parsersource
	, YACCFLAGS=['-d','-pzz_']
)

scanner = env.SharedObject(target=['scanner'],source=scannersource
	, LEXFLAGS=['-Pzz_']
)

packages_env = env.Copy()
packages_env.Append(CPPDEFINES=[('ASC_SHLIBSUFFIX','\\"'+env['SHLIBSUFFIX']+'\\"'),('ASC_SHLIBPREFIX','\\"'+env['SHLIBPREFIX']+'\\"')])
packages = packages_env.SharedObject('packages.c')

objs = [parser,scanner,packages]

sloppy_csrcs = ['rounded.c','interval.c']

sloppy_env = env.Copy()
sloppy_env.Append(CPPDEFINES=['SLOPPY']);
for s in sloppy_csrcs:
	objs += sloppy_env.SharedObject(s)	

env.Depends(scanner,[parserheader])

for s in [csrcs]:
	objs += env.SharedObject(s)

Return('objs')
