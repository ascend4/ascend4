#define yy_create_buffer zz__create_buffer
#define yy_delete_buffer zz__delete_buffer
#define yy_scan_buffer zz__scan_buffer
#define yy_scan_string zz__scan_string
#define yy_scan_bytes zz__scan_bytes
#define yy_flex_debug zz__flex_debug
#define yy_init_buffer zz__init_buffer
#define yy_flush_buffer zz__flush_buffer
#define yy_load_buffer_state zz__load_buffer_state
#define yy_switch_to_buffer zz__switch_to_buffer
#define yyin zz_in
#define yyleng zz_leng
#define yylex zz_lex
#define yyout zz_out
#define yyrestart zz_restart
#define yytext zz_text
#define yywrap zz_wrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.81 95/03/20 14:02:24 vern Exp 
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifndef YY_USE_CONST
#ifndef const
#define const
#endif
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( const char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( const char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#ifdef VMS
#ifndef __VMS_POSIX
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
#else
FILE *yyin = stdin, *yyout = stdout;
#endif
#else
FILE *yyin = stdin, *yyout = stdout;
#endif
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, const char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( const char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yytext_ptr -= yy_more_len; \
	yyleng = (int) (yy_cp - yytext_ptr); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
static const short int yy_accept[512] =
    {   0,
      143,  143,  115,  115,    0,    0,  137,  137,  128,  128,
      147,  145,  143,  144,  145,  124,  121,   19,   20,   23,
       21,   13,   22,   14,   24,  139,   16,   15,   12,   10,
       11,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
       17,   18,   25,  131,   26,  115,  116,  117,  119,  146,
      123,  122,  137,  138,  146,  134,  136,  128,  129,  127,
      146,  143,  144,    9,  111,    4,  141,  141,  139,    0,
        5,    6,    1,    3,    8,    2,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,

      142,  142,   51,  142,  142,  142,  142,  142,  142,  142,
       61,  142,   63,  142,  142,  142,  142,  142,  142,   78,
       79,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,    0,
      130,  115,  116,    0,  117,  118,  117,  112,  119,  120,
      114,  119,    0,  123,  122,  137,  138,    0,  136,  132,
      133,  134,  135,  128,  129,  127,    0,  125,  126,    0,
      140,  141,    0,  141,    7,   27,  142,   29,   30,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,   53,  142,  142,  142,   58,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   76,  142,  142,  142,  142,  142,  142,  142,   88,
      142,  142,  142,  142,  142,   92,  142,  142,  142,  142,
      101,  142,  142,  142,  142,  142,  112,  113,    0,  141,
      142,  142,  142,   34,  142,   36,   37,   38,  142,  142,
      142,  142,  142,  142,   45,  142,  142,  142,  142,   52,
      142,  142,  142,  142,   59,  142,  142,  142,  142,  142,
       67,  142,  142,  142,  142,  142,  142,  142,  142,  142,
       82,  142,  142,  142,  142,  142,  142,  142,   93,   95,
      142,  142,   96,   97,  142,  142,  142,  142,  103,  142,

      142,  142,  109,  142,  142,  142,   33,   35,   39,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   56,  142,  142,  142,   65,  142,  142,  142,  142,
      142,  142,  142,   75,   77,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,   98,   99,  142,  102,
      104,  105,  142,  142,  142,  142,  142,   40,  142,  142,
      142,   44,  142,  142,  142,  142,   54,  142,  142,   60,
       62,  142,  142,  142,  142,  142,  142,   72,  142,  142,
       81,  142,  142,  142,  142,   87,  142,   90,  142,   94,
      142,  142,  142,  142,   28,  142,  142,  142,  142,  142,

      142,   47,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,   73,  142,  142,   83,   84,   85,   86,  142,
      142,  142,  106,  142,  142,  142,  142,  142,   42,   43,
      142,  142,  142,   55,  142,  142,  142,  142,   69,  142,
       71,   74,  142,  142,  142,  142,  142,  142,  142,   31,
      142,  142,  142,  142,   49,  142,  142,  142,  142,  142,
       80,   89,   91,  100,  142,  142,  142,  142,  142,   46,
       48,  142,  142,   64,  142,  142,  142,  142,  142,  110,
      142,   41,  142,  142,  142,  142,   70,  142,  142,   32,
      142,   57,   66,  142,  142,  142,   50,   68,  142,  142,

      142,  142,  142,  142,  107,  142,  142,  142,  142,  108,
        0
    } ;

static const int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,    1,   30,   30,   30,   30,

       52,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   53,   54,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const int yy_meta[56] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    3,    1,
        1,    1,    1,    1,    4,    1,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    5,    1,    1,
        4,    4,    6,    1,    5
    } ;

static const short int yy_base[527] =
    {   0,
        0,    0,   53,   54,   61,   62,   55,   56,   66,   67,
      501, 1459,   71, 1459,  480, 1459, 1459,  460, 1459, 1459,
     1459, 1459, 1459,   62, 1459,   65,   60, 1459,   62,  424,
      420,   92,   51,   84,  112,  106,   63,   91,   77,  119,
      130,   78,  134,   80,  139,  148,  133,  105,  147,  164,
     1459, 1459, 1459,   83, 1459,   85, 1459,  192,  173,   94,
     1459, 1459,  163, 1459,  417,  342, 1459,  191, 1459, 1459,
      330,  184, 1459, 1459, 1459, 1459,  182,  189,  195,  207,
     1459,  216, 1459, 1459, 1459, 1459,  152,  185,  197,  194,
      201,  212,  191,  198,  213,  228,  236,  225,  229,  217,

      247,  241,  214,  238,  254,  257,  243,  266,  267,  268,
      240,  270,  273,  269,  271,  285,  280,  275,  292,  286,
      295,  301,  308,  312,  313,  320,  315,  319,  323,  325,
      342,  327,  343,  326,  357,  358,  329,  366,  347,  228,
     1459,  379, 1459,  303,  393, 1459,  394,  230,  381, 1459,
     1459,  396,  404, 1459, 1459,  382, 1459,  221, 1459, 1459,
     1459,  202, 1459,  408, 1459, 1459,  175, 1459, 1459,  404,
     1459,  397,  131,  121, 1459,  377,  400,  391,  403,  408,
      410,  411,  412,  409,  414,  420,  417,  419,  440,  431,
      432,  435,  460,  442,  451,  421,  459,  462,  473,  443,

      463,  470,  480,  482,  475,  483,  485,  488,  494,  489,
      504,  510,  512,  492,  517,  515,  532,  531,  533,  527,
      536,  535,  537,  534,  539,  538,  541,  542,  554,  556,
      543,  558,  580,  565,  585,  587,  122, 1459,   81,   72,
      562,  589,  588,  560,  591,  593,  597,  604,  606,  605,
      612,  609,  617,  610,  608,  620,  611,  619,  632,  628,
      649,  636,  639,  650,  643,  652,  654,  661,  662,  666,
      663,  670,  665,  681,  673,  674,  667,  676,  682,  694,
      678,  707,  696,  713,  708,  711,  716,  723,  691,  724,
      725,  728,  726,  729,  735,  733,  738,  741,  737,  745,

      746,  739,  742,  753,  750,  766,  758,  768,  770,  780,
      772,  785,  776,  783,  792,  784,  796,  787,  788,  799,
      800,  803,  805,  809,  827,  807,  814,  815,  817,  829,
      830,  837,  842,  844,  847,  849,  854,  852,  857,  860,
      858,  855,  859,  862,  864,  869,  871,  872,  876,  875,
      884,  886,  897,  892,  901,  903,  913,  902,  910,  915,
      906,  909,  926,  918,  927,  921,  929,  930,  931,  940,
      941,  947,  948,  955,  956,  953,  964,  961,  959,  960,
      968,  972,  975,  988,  993,  973,  980,  979, 1001,  981,
      986, 1002, 1005, 1007, 1006, 1018, 1019, 1020, 1021, 1023,

     1030, 1026, 1031, 1027, 1032, 1028, 1036, 1052, 1039, 1061,
     1069, 1048, 1053, 1070, 1074, 1073, 1076, 1077, 1078, 1081,
     1086, 1087, 1082, 1083, 1085, 1090, 1096, 1111, 1095, 1099,
     1115, 1104, 1125, 1101, 1107, 1129, 1103, 1136, 1116, 1133,
     1138, 1141, 1149, 1153, 1142, 1154, 1150, 1155, 1156, 1157,
     1158, 1160, 1168, 1176, 1170, 1173, 1188, 1183, 1198, 1201,
     1179, 1181, 1184, 1202, 1203, 1214, 1208, 1205, 1210, 1213,
     1222, 1225, 1228, 1226, 1231, 1229, 1230, 1232, 1233, 1236,
     1245, 1247, 1252, 1257, 1254, 1259, 1256, 1260, 1263, 1271,
     1274, 1275, 1277, 1280, 1278, 1279, 1282, 1285, 1291, 1306,

     1287, 1312, 1320, 1289, 1301, 1308, 1303, 1317, 1324, 1326,
     1459, 1377, 1383, 1389, 1395,   79, 1401, 1407, 1413, 1419,
     1425, 1430, 1436, 1440, 1446, 1452
    } ;

static const short int yy_def[527] =
    {   0,
      511,    1,  512,  512,  513,  513,  514,  514,  515,  515,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  516,  516,  516,  516,  516,   34,  516,  516,  516,
       35,  516,  516,  516,  516,   35,  516,  516,  516,  516,
      511,  511,  511,  511,  511,  517,  511,  518,  519,  520,
      511,  511,  521,  511,  522,  523,  511,  524,  511,  511,
      525,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  511,
      511,  517,  511,  511,  518,  511,  518,  526,  519,  511,
      511,  519,  520,  511,  511,  521,  511,  522,  511,  511,
      511,  523,  511,  524,  511,  511,  525,  511,  511,  511,
      511,  511,  511,  511,  511,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  526,  511,  511,  511,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
        0,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511
    } ;

static const short int yy_nxt[1515] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   39,
       39,   39,   41,   42,   43,   44,   39,   45,   46,   47,
       48,   49,   50,   39,   39,   39,   51,   12,   52,   53,
       12,   39,   54,   55,   12,   57,   57,   64,   64,   58,
       58,   59,   59,   61,   61,   87,   62,   62,   69,   69,
       70,   70,   72,   73,   76,   81,   77,   78,   82,   79,
       83,   84,   88,  107,  140,  141,  240,  143,   95,   80,
       88,   87,   87,  144,   87,  240,  154,  108,   87,  155,

      109,   94,   65,   65,   96,   87,   87,   66,   66,   67,
       67,   97,  119,   71,   71,   89,   80,  124,   98,   87,
       87,   99,  110,   90,  238,   91,   87,   94,   94,   92,
       94,   93,  100,   87,   94,  174,  101,  104,  135,  105,
      102,   94,   94,  136,  111,  174,  103,   87,   87,  106,
      115,  112,  113,   87,  116,   94,   94,  114,  117,  120,
      133,   87,   94,  125,  118,  157,   87,  137,  127,   94,
      134,  121,  128,  122,  123,  150,  129,  169,   87,  126,
      151,  152,   88,   94,   94,   72,   73,  130,  131,   94,
      132,  138,  139,  165,  146,  166,   77,   94,  147,   87,

      148,  171,   94,  172,  163,   87,  170,   78,   87,   79,
      158,   87,   87,  170,   94,   87,  173,  159,  173,   80,
      176,  174,  177,  161,  178,  182,   87,   87,   87,  140,
      141,   87,  238,  170,  175,   94,  180,  183,  167,   87,
      170,   94,   87,   87,   94,  179,   80,   94,   94,  181,
       87,   94,   87,  190,   87,   87,  191,   87,  189,  184,
      187,   87,   94,   94,   94,  185,  186,   94,   87,  192,
      188,   87,  193,  194,  199,   94,  195,  196,   94,   94,
       87,   87,   87,   87,   87,   87,   94,   87,   94,   87,
       94,   94,  197,   94,   87,  204,  198,   94,  211,   87,

       87,  201,  202,  200,   94,  203,   87,   94,  205,   87,
      151,  144,  206,  210,  208,   87,   94,   94,   94,  207,
       94,   94,   87,   94,  209,   94,   87,   87,  213,   87,
       94,  212,  169,   87,   87,   94,   94,   87,  216,   87,
       87,   87,   94,   87,  163,   94,  215,  214,  217,  218,
      222,   94,  219,  220,  221,  227,   87,   87,   94,  224,
      232,   87,   94,   94,  225,   94,  229,  228,  223,   94,
       94,   87,   87,   94,  226,   94,   94,   94,  235,   94,
       87,  143,  231,  150,  157,  230,  236,  144,  511,  511,
      233,   87,   94,   94,  234,  146,  146,   94,  150,  511,

      147,  511,  511,  151,  152,   87,  154,   94,   94,  155,
      165,  172,  166,  239,   87,  239,   94,   87,  240,  161,
      241,  170,   87,   87,   87,   87,   87,   94,   87,  158,
      243,   87,  245,   87,   87,   87,  159,  247,   86,  249,
      246,   94,   85,  244,  248,   87,   87,  250,  170,   87,
       94,  254,  255,   94,   87,  167,   87,   87,  242,   94,
       94,   94,   94,  251,   94,   87,  259,   94,   75,   94,
       94,   94,  256,   87,   87,  260,   87,   87,  252,  253,
      257,   94,   94,  261,   87,   94,  262,   87,  258,   87,
       94,  266,   94,   94,   87,  265,   87,   87,   74,   87,

      511,   94,   87,   87,  263,  271,   87,  270,   87,   94,
       94,  264,   94,   94,  267,  269,  273,  276,   87,  268,
       94,  275,  272,   94,   87,   94,   87,  280,  277,   87,
       94,   87,   94,   94,  278,   94,  279,  511,  274,   94,
      281,   87,   94,  283,   94,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   94,   87,   87,   87,  282,  288,
       94,  289,   94,  284,  287,   94,  291,   94,   87,  290,
       87,  285,   87,  286,   87,  293,   87,   94,  294,   87,
      292,   94,   94,   94,   94,   94,   94,   94,   94,   94,
      295,   94,   94,   94,   87,  296,  301,  297,  298,   87,

      304,   87,   87,   87,   94,   87,   94,   87,   94,  305,
       94,   87,   94,  299,  303,   94,  302,  300,   87,   87,
       87,  308,   87,   87,   87,   87,   87,  310,  306,  511,
       94,   87,  307,   87,   87,   94,  309,   94,   94,   94,
      311,   94,   87,   94,  315,  313,   87,   94,  312,  314,
       87,  316,  317,   87,   94,   94,   94,   87,   94,   94,
       94,   94,   94,   87,   87,  318,   87,   94,   87,   94,
       94,  319,  323,  320,  322,   87,   87,   87,   94,   87,
       87,   87,   94,  511,   87,  325,   94,   87,   87,  321,
       87,  324,   87,   94,  328,   87,   87,  329,  334,   94,

       94,  326,   94,  327,   94,   87,  333,  332,   87,  330,
       87,   94,   94,   94,  335,   94,   94,   94,  331,  336,
       94,   87,   87,   94,   94,   87,   94,   87,   94,  339,
       87,   94,   94,  340,  337,  338,  341,   87,   87,   87,
       87,   94,   87,   87,   94,  344,   94,   87,  342,   87,
      346,   87,   87,   87,  343,   87,   87,   94,   94,   87,
       87,   94,  349,   94,   87,  350,   94,   87,  347,  351,
      352,  348,   87,   94,   94,  345,   94,  355,   94,   94,
       87,  356,   87,   94,   87,   94,   87,   94,   94,  353,
       87,   94,  354,  357,   87,   94,   94,   87,   87,   87,

       94,   87,   87,   94,  358,  360,   87,  362,   94,  361,
       87,  359,  363,   87,   87,  364,   94,   87,   94,   87,
       94,   87,   94,   87,  365,  366,   94,  367,   87,   87,
       94,   87,  368,   94,   94,   94,  370,   94,   94,  369,
      374,   87,   94,   87,   87,  375,   94,  372,  371,   94,
       94,   87,  373,   94,  377,   94,   87,   94,   87,   94,
      378,   87,  376,   87,   94,   94,   87,   94,   87,   87,
      379,   87,   87,   87,   87,  382,   87,   94,   87,   94,
       94,  383,  384,   87,  387,   87,   87,   94,  386,   87,
       87,  380,   94,  381,   94,  385,  390,   94,   87,   94,

       87,  388,   94,  389,   94,   94,   87,   94,   94,   94,
       94,   87,   94,  391,   94,   87,   87,   87,  392,   94,
       87,   94,   94,   87,   87,   94,   94,   87,  511,   87,
      393,  396,   87,  394,   94,   87,   94,  397,  398,  395,
       87,   87,   94,   87,   87,   87,  400,   94,  399,  404,
      405,   94,   94,   94,   87,   87,   94,  402,  406,   94,
       94,   87,   87,   94,  401,   94,  403,   87,   94,   87,
       87,   94,  408,   87,   87,   87,   94,   94,   87,   94,
       94,   94,   87,  409,  412,  407,   87,   87,  415,   87,
       94,   94,  411,   87,   87,   87,  416,   94,   94,  413,

       87,  410,   87,   94,  414,   94,   94,   87,  420,   94,
       94,   94,  418,  417,   94,   87,   87,  419,   94,   87,
       87,   87,   94,   94,  422,   94,  423,  425,  421,   94,
       94,   94,   87,   87,   87,   87,   94,   87,   94,  424,
       87,   87,   87,   94,   87,   87,   87,  430,  426,  511,
       87,   94,   94,   87,  428,   94,   94,   94,  431,  432,
      429,  433,   87,  434,  436,  435,   87,   87,   94,  427,
       94,   94,  438,   94,  437,   87,   94,   94,   94,  441,
       94,   94,   94,   87,   87,  439,   94,   87,   87,   94,
       87,   87,   87,  440,  442,   87,   87,   87,   94,   87,

       87,   87,   94,   94,   87,  444,  445,  446,  511,   87,
       87,   94,  443,   87,  450,   87,  449,   87,   87,   94,
       94,   87,  448,   94,   94,   87,   94,   94,   94,   87,
       87,   94,  447,   94,  451,   94,   94,   94,  454,   87,
       94,  456,  458,   87,  452,   94,   94,   87,  453,   94,
       87,   94,   87,   94,   94,   87,   87,   94,  455,  460,
      459,   94,  457,   87,   87,   94,   94,   87,   87,   87,
       87,   87,   87,  461,   87,   94,  462,  511,  468,   94,
      469,  463,   87,   94,   87,  464,   94,   87,   94,  465,
       87,   94,   94,   87,  470,   87,  467,   87,   87,   94,

       94,  472,   87,   94,   94,  466,   94,   94,   94,  471,
       94,  475,   87,  473,  474,   87,   87,   87,   94,   87,
       94,  476,   87,   94,   87,  477,   94,   87,   87,   94,
      478,   94,  480,   94,   94,  479,   87,  481,   94,   87,
       87,  482,   87,   87,   87,   87,   87,   87,   94,  483,
       87,   94,   94,   94,  484,   94,  488,  489,   94,   87,
       94,   87,  511,   94,   94,  485,   87,  487,   87,  490,
       87,   87,   94,   87,   87,   94,   94,   87,   94,  486,
       94,   94,   94,   94,  492,   87,   94,  493,   87,   87,
      491,   87,   87,   87,   87,   94,   87,   94,  494,   87,

      511,   87,   94,   87,   94,   87,   94,   94,  511,   94,
      495,  501,  497,  496,  498,   87,  499,   87,  500,  503,
       87,   94,   87,  508,   94,   94,   87,   94,   94,   94,
       94,   87,   94,  502,   87,   94,  504,   94,   87,  506,
       87,   94,  511,  511,  505,  511,  507,  511,  510,  509,
      511,   94,  511,   94,  511,  511,   94,  511,   94,  511,
      511,  511,   94,  511,  511,  511,  511,   94,  511,  511,
       94,  511,  511,  511,   94,  511,   94,   56,   56,   56,
       56,   56,   56,   60,   60,   60,   60,   60,   60,   63,
       63,   63,   63,   63,   63,   68,   68,   68,   68,   68,

       68,  142,  511,  142,  142,  142,  142,  145,  145,  145,
      145,  145,  145,  149,  511,  149,  149,  149,  149,  153,
      153,  153,  153,  153,  153,  156,  156,  156,  156,  156,
      160,  160,  160,  160,  160,  160,  162,  162,  162,  162,
      164,  164,  164,  164,  164,  164,  168,  168,  168,  168,
      168,  168,  237,  511,  511,  237,  237,  237,   11,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511
    } ;

static const short int yy_chk[1515] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    7,    8,    3,
        4,    3,    4,    5,    6,   33,    5,    6,    9,   10,
        9,   10,   13,   13,   24,   27,   24,   26,   27,   26,
       29,   29,  516,   37,   54,   54,  240,   56,   33,   26,
       37,   39,   42,   56,   44,  239,   60,   37,   34,   60,

       37,   33,    7,    8,   34,   38,   32,    7,    8,    7,
        8,   34,   42,    9,   10,   32,   26,   44,   34,   48,
       36,   34,   38,   32,  237,   32,   35,   39,   42,   32,
       44,   32,   35,   40,   34,  174,   35,   36,   48,   36,
       35,   38,   32,   48,   40,  173,   35,   47,   43,   36,
       41,   40,   40,   45,   41,   48,   36,   40,   41,   43,
       47,   49,   35,   45,   41,   63,   87,   49,   46,   40,
       47,   43,   46,   43,   43,   59,   46,  167,   50,   45,
       59,   59,   46,   47,   43,   72,   72,   46,   46,   45,
       46,   50,   50,   68,   58,   68,   77,   49,   58,   88,

       58,   78,   87,   78,  162,   93,   77,   79,   90,   79,
       63,   89,   94,   78,   50,   91,   80,   63,   80,   79,
       89,   80,   90,  158,   91,   93,   92,   95,  103,  140,
      140,  100,  148,   77,   82,   88,   92,   95,   68,   98,
       78,   93,   96,   99,   90,   91,   79,   89,   94,   92,
       97,   91,  104,   99,  111,  102,  100,  107,   98,   96,
       97,  101,   92,   95,  103,   96,   96,  100,  105,  101,
       97,  106,  101,  102,  107,   98,  104,  105,   96,   99,
      108,  109,  110,  114,  112,  115,   97,  113,  104,  118,
      111,  102,  106,  107,  117,  113,  106,  101,  118,  116,

      120,  109,  110,  108,  105,  112,  119,  106,  113,  121,
      144,  144,  113,  117,  115,  122,  108,  109,  110,  114,
      112,  115,  123,  113,  116,  118,  124,  125,  122,  127,
      117,  119,   71,  128,  126,  116,  120,  129,  125,  130,
      134,  132,  119,  137,   66,  121,  124,  123,  125,  125,
      128,  122,  125,  126,  127,  132,  131,  133,  123,  130,
      137,  139,  124,  125,  131,  127,  134,  133,  129,  128,
      126,  135,  136,  129,  131,  130,  134,  132,  139,  137,
      138,  142,  136,  149,  156,  135,  139,  142,  149,  149,
      138,  176,  131,  133,  138,  145,  147,  139,  152,  145,

      147,  145,  147,  152,  152,  178,  153,  135,  136,  153,
      164,  172,  164,  170,  177,  170,  138,  179,  170,   65,
      177,  172,  180,  184,  181,  182,  183,  176,  185,  156,
      181,  187,  183,  188,  186,  196,  156,  185,   31,  187,
      184,  178,   30,  182,  186,  190,  191,  188,  172,  192,
      177,  190,  191,  179,  189,  164,  194,  200,  180,  184,
      181,  182,  183,  189,  185,  195,  194,  187,   18,  188,
      186,  196,  192,  197,  193,  195,  198,  201,  189,  189,
      193,  190,  191,  197,  202,  192,  198,  199,  193,  205,
      189,  202,  194,  200,  203,  201,  204,  206,   15,  207,

       11,  195,  208,  210,  199,  207,  214,  206,  209,  197,
      193,  199,  198,  201,  203,  205,  208,  210,  211,  204,
      202,  209,  207,  199,  212,  205,  213,  214,  211,  216,
      203,  215,  204,  206,  212,  207,  213,    0,  208,  210,
      215,  220,  214,  216,  209,  218,  217,  219,  224,  222,
      221,  223,  226,  225,  211,  227,  228,  231,  215,  222,
      212,  223,  213,  217,  221,  216,  225,  215,  229,  224,
      230,  218,  232,  219,  244,  228,  241,  220,  229,  234,
      227,  218,  217,  219,  224,  222,  221,  223,  226,  225,
      230,  227,  228,  231,  233,  230,  234,  230,  232,  235,

      241,  236,  243,  242,  229,  245,  230,  246,  232,  242,
      244,  247,  241,  233,  236,  234,  235,  233,  248,  250,
      249,  245,  255,  252,  254,  257,  251,  250,  242,    0,
      233,  253,  243,  258,  256,  235,  249,  236,  243,  242,
      251,  245,  260,  246,  256,  253,  259,  247,  252,  254,
      262,  257,  258,  263,  248,  250,  249,  265,  255,  252,
      254,  257,  251,  261,  264,  259,  266,  253,  267,  258,
      256,  261,  266,  262,  264,  268,  269,  271,  260,  273,
      270,  277,  259,    0,  272,  268,  262,  275,  276,  263,
      278,  267,  281,  265,  272,  274,  279,  273,  277,  261,

      264,  269,  266,  270,  267,  289,  276,  275,  280,  274,
      283,  268,  269,  271,  278,  273,  270,  277,  274,  279,
      272,  282,  285,  275,  276,  286,  278,  284,  281,  283,
      287,  274,  279,  284,  280,  282,  285,  288,  290,  291,
      293,  289,  292,  294,  280,  288,  283,  296,  286,  295,
      292,  299,  297,  302,  287,  298,  303,  282,  285,  300,
      301,  286,  297,  284,  305,  298,  287,  304,  295,  300,
      301,  296,  307,  288,  290,  291,  293,  304,  292,  294,
      306,  305,  308,  296,  309,  295,  311,  299,  297,  302,
      313,  298,  303,  306,  310,  300,  301,  314,  316,  312,

      305,  318,  319,  304,  310,  312,  315,  314,  307,  313,
      317,  311,  315,  320,  321,  316,  306,  322,  308,  323,
      309,  326,  311,  324,  317,  318,  313,  319,  327,  328,
      310,  329,  320,  314,  316,  312,  323,  318,  319,  321,
      328,  325,  315,  330,  331,  329,  317,  325,  324,  320,
      321,  332,  327,  322,  331,  323,  333,  326,  334,  324,
      332,  335,  330,  336,  327,  328,  338,  329,  337,  342,
      333,  339,  341,  343,  340,  338,  344,  325,  345,  330,
      331,  339,  340,  346,  343,  347,  348,  332,  342,  350,
      349,  336,  333,  337,  334,  341,  346,  335,  351,  336,

      352,  344,  338,  345,  337,  342,  354,  339,  341,  343,
      340,  353,  344,  349,  345,  355,  358,  356,  353,  346,
      361,  347,  348,  362,  359,  350,  349,  357,    0,  360,
      353,  356,  364,  354,  351,  366,  352,  357,  359,  355,
      363,  365,  354,  367,  368,  369,  361,  353,  360,  366,
      368,  355,  358,  356,  370,  371,  361,  364,  369,  362,
      359,  372,  373,  357,  363,  360,  365,  376,  364,  374,
      375,  366,  373,  379,  380,  378,  363,  365,  377,  367,
      368,  369,  381,  374,  377,  372,  382,  386,  380,  383,
      370,  371,  376,  388,  387,  390,  382,  372,  373,  378,

      391,  375,  384,  376,  379,  374,  375,  385,  387,  379,
      380,  378,  384,  383,  377,  389,  392,  385,  381,  393,
      395,  394,  382,  386,  391,  383,  392,  394,  389,  388,
      387,  390,  396,  397,  398,  399,  391,  400,  384,  393,
      402,  404,  406,  385,  401,  403,  405,  400,  396,    0,
      407,  389,  392,  409,  398,  393,  395,  394,  401,  403,
      399,  404,  412,  405,  407,  406,  408,  413,  396,  397,
      398,  399,  409,  400,  408,  410,  402,  404,  406,  412,
      401,  403,  405,  411,  414,  410,  407,  416,  415,  409,
      417,  418,  419,  411,  414,  420,  423,  424,  412,  425,

      421,  422,  408,  413,  426,  420,  421,  422,    0,  429,
      427,  410,  415,  430,  426,  434,  425,  437,  432,  411,
      414,  435,  424,  416,  415,  428,  417,  418,  419,  431,
      439,  420,  423,  424,  427,  425,  421,  422,  432,  433,
      426,  435,  437,  436,  428,  429,  427,  440,  431,  430,
      438,  434,  441,  437,  432,  442,  445,  435,  433,  440,
      438,  428,  436,  443,  447,  431,  439,  444,  446,  448,
      449,  450,  451,  443,  452,  433,  444,    0,  451,  436,
      452,  445,  453,  440,  455,  446,  438,  456,  441,  447,
      454,  442,  445,  461,  453,  462,  449,  458,  463,  443,

      447,  455,  457,  444,  446,  448,  449,  450,  451,  454,
      452,  458,  459,  456,  457,  460,  464,  465,  453,  468,
      455,  459,  467,  456,  469,  460,  454,  470,  466,  461,
      465,  462,  467,  458,  463,  466,  471,  468,  457,  472,
      474,  469,  473,  476,  477,  475,  478,  479,  459,  472,
      480,  460,  464,  465,  473,  468,  478,  479,  467,  481,
      469,  482,    0,  470,  466,  475,  483,  477,  485,  481,
      487,  484,  471,  486,  488,  472,  474,  489,  473,  476,
      477,  475,  478,  479,  484,  490,  480,  485,  491,  492,
      483,  493,  495,  496,  494,  481,  497,  482,  486,  498,

        0,  501,  483,  504,  485,  499,  487,  484,    0,  486,
      488,  499,  491,  489,  494,  505,  495,  507,  496,  501,
      500,  490,  506,  507,  491,  492,  502,  493,  495,  496,
      494,  508,  497,  500,  503,  498,  502,  501,  509,  504,
      510,  499,    0,    0,  503,    0,  506,    0,  509,  508,
        0,  505,    0,  507,    0,    0,  500,    0,  506,    0,
        0,    0,  502,    0,    0,    0,    0,  508,    0,    0,
      503,    0,    0,    0,  509,    0,  510,  512,  512,  512,
      512,  512,  512,  513,  513,  513,  513,  513,  513,  514,
      514,  514,  514,  514,  514,  515,  515,  515,  515,  515,

      515,  517,    0,  517,  517,  517,  517,  518,  518,  518,
      518,  518,  518,  519,    0,  519,  519,  519,  519,  520,
      520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
      522,  522,  522,  522,  522,  522,  523,  523,  523,  523,
      524,  524,  524,  524,  524,  524,  525,  525,  525,  525,
      525,  525,  526,    0,    0,  526,  526,  526,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() (yy_more_flag = 1)
#define YY_MORE_ADJ yy_more_len
char *yytext;
#define INITIAL 0
/*
 *  ASCEND Lexing Program
 *  Version: $Revision: 1.17 $
 *  Version control file: $RCSfile: scanner.c.no.flex,v $
 *  Date last modified: $Date: 1999/01/19 16:15:29 $
 *  Last modified by: $Author: mthomas $
 *
 *  Generated from
 *    Version control file: RCSfile: scanner.l,v 
 *    Version: Revision: 1.38 
 *    Date last modified: Date: 98/04/21 23:49:44 
 *    Last modified by: Author: ballan 
 *  on HP-UX BAKER A.09.05 A 9000/715 via the commands:
 *    flex -Pzz_ -t -L scanner.l >! scanner.c.no.flex
 *
 *  This file is part of the Ascend Language Interpreter.
 *
 *  The Ascend Language Interpreter is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2 of the
 *  License, or (at your option) any later version.
 *
 *  The Ascend Language Interpreter is distributed in hope that it will be
 *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the program; if not, write to the Free Software Foundation,
 *  Inc., 675 Mass Ave, Cambridge, MA 02139 USA.  Check the file named
 *  COPYING.
 *
 *  This module is the input file for Flex (Lexical Analyzer
 *  Generator). Its goal is to convert a stream of characters into a
 *  stream of tokens.  It has been defined to be consistent with the
 *  routines required by the common compiler-compiler yacc.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "utilities/ascConfig.h"
#include "utilities/ascMalloc.h"
#include "compiler/compiler.h"
/* everything between here and the next comment is only here */
#include "compiler/fractions.h"
#include "compiler/dimen.h"
#include "compiler/functype.h"
#include "compiler/func.h"
#include "compiler/types.h"
#include "compiler/stattypes.h"
#include "compiler/fractions.h"
#include "compiler/proc.h"
/* because ascParse.h has a nasty union we can't digest without them. */
#include "compiler/ascParse.h"
/* these below we actually need */
#include "general/list.h"
#include "compiler/module.h"
#include "compiler/scanner.h"
#include "compiler/symtab.h"

#define YY_BREAK
/*  Defining yybreak as above means that all of our matches must end
 *  in break or return because the normal flex supplied yybreak will
 *  be preempted by our empty one.
 *  In cases where matches contain a conditional return, make sure a
 *  break follows in the failure case.
 */

#define ENDTOK 0
/*  Return value when we reach the end of the input.
 *  This to must be 0 or negative according to yacc
 */

#define MAX_REQUIRE_DEPTH 10
/*  The maximum number of REQUIREd file nesting we will accept.
 *  See RequireStack below.
 */

#define WORKBUF_INIT_SIZE 4095
/*  We need a temporary buffer to copy yytext into before returning
 *  to the scanner (see g_workbuf below).
 *  WORKBUF_INIT_SIZE is the initial size of g_workbuf
 */

static unsigned long zz_line = 1;
/*  The current line number;
 *  every match of newline (\n) needs to ++ this variable.
 */

static unsigned long start_line = 0;
/*  The ine number where an open-comment, open-brace, or
 *  open-double-quote occurs.  We use this to help in error reporting.
 */

static int CommentNestLevel = 0;
/*  Nesting level of (* comments *)
 */

static int BracesNestLevel = 0;
/*  Nesting level of {braced} expressions
 */

static int MatchedBackslash = 0;
/*  If this variable is positive, we matched a backslash \ in a DoubleQuote
 *  or BracedText state, and we should call ProcessBackslashes() to
 *  process them.
 */

static int RequireIndex = 0;
/*  The current nesting level of REQUIREd files
 */

static YY_BUFFER_STATE RequireStack[MAX_REQUIRE_DEPTH];
/* The Flex buffers used for the REQUIREd files
 */

static char *g_workbuf = NULL;
/*  We need a place to keep doubly-quoted-text and braced-text for passing
 *  it back to the parser.  yytext will not work since the parser may ask
 *  the scanner to read another token, at which point the value in yytext
 *  gets lost.
 *
 *  The initial size of g_workbuf is WORKBUF_INIT_SIZE, and g_workbuf
 *  doubles when it needs more space.
 *
 *  A call to CopyIntoWorkBuffer(yytext,yyleng) will copy yyleng characters
 *  of yytext into the working buffer.
 *
 *  Note that having a single work buffer will not work if we ever create
 *  yacc productions that scan multiple chunks of doubly-quoted-text and/or
 *  braced-text before acting on them.
 */


/*  Forward declaration of functions
 *  provided at the end of this file.
 */
static int Asc_ScannerPopBuffer(void);
static char *CopyIntoWorkBuffer(CONST char *, unsigned long);
static int Process_Backslashes(void);
static void ErrMsg_BracesEOF(void);
static void ErrMsg_CommentEOF(void);
static void ErrMsg_DoubleQuoteEOF(void);
static void ErrMsg_LongID(void);
static void ErrMsg_LongSymbol(void);
static void ErrMsg_SymbolEOF(void);
static void ErrMsg_SymbolEOL(void);
static void ErrMsg_UnexpectedChar(void);

#define Comment 1

#define Symbol 2

#define BracedText 3

#define DoubleQuote 4


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_more_len = 0;
		if ( yy_more_flag )
			{
			yy_more_len = yyleng;
			yy_more_flag = 0;
			}
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 512 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1459 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ return LEQ_T; }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ return GEQ_T; }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return NEQ_T; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return DOTDOT_T; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return DBLCOLON_T;}
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return ASSIGN_T; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return CASSIGN_T; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return BEQ_T ; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return BNE_T ; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return '=' ;}
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return '>' ;}
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return '<' ;}
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return ',' ;}
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return '.' ;}
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return ';' ;}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return ':' ;}
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return '[' ;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ']' ;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return '(' ;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return ')' ;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return '+' ;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return '-' ;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return '*' ;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return '/' ;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return '^' ;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return '|' ;}
	YY_BREAK
/****  Reserved Keywords  ****/
case 27:
YY_RULE_SETUP
{ return ADD_T			; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ALIASES_T		; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return AND_T			; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ANY_T			; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return AREALIKE_T		; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ARETHESAME_T		; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ARRAY_T		; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ATOM_T			; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return BREAK_T		; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return CALL_T			; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return CARD_T			; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return CASE_T			; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return CHECK_T		; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return CHOICE_T		; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return CONDITIONAL_T		; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return CONSTANT_T		; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return CONTINUE_T		; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return CREATE_T		; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return DATA_T			; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return DECREASING_T		; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return DEFAULT_T		; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return DEFINITION_T		; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return DIMENSION_T		; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return DIMENSIONLESS_T	; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return DO_T			; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return ELSE_T			; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return END_T			; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return EXPECT_T		; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return EXTERNAL_T		; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return FALSE_T		; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return FALLTHRU_T		; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return FOR_T			; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return FROM_T			; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return GLOBAL_T		; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return IF_T			; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return IMPORT_T		; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return IN_T			; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return INCREASING_T		; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return INPUT_T		; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return INTERSECTION_T		; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return ISA_T			; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return ISREFINEDTO_T		; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return MAXIMIZE_T		; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return MAXINTEGER_T		; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return MAXREAL_T		; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return METHOD_T		; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return METHODS_T		; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return MINIMIZE_T		; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return MODEL_T		; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return NOT_T			; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return NOTES_T		; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return OF_T			; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return OR_T			; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return OTHERWISE_T		; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ return OUTPUT_T		; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return PROD_T			; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return PROVIDE_T		; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return REFINES_T		; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return REPLACE_T		; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return REQUIRE_T		; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ return RETURN_T		; }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ return RUN_T			; }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ return SATISFIED_T		; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return SELECT_T		; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ return SUCHTHAT_T		; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ return SUM_T			; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ return SIZE_T			; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ return SWITCH_T		; }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ return STOP_T			; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return THEN_T			; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ return TRUE_T			; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ return UNION_T		; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ return UNITS_T		; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ return UNIVERSAL_T		; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ return USE_T			; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ return VALUE_T		; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ return WHEN_T			; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ return WHERE_T		; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ return WHILE_T		; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ return WILLBE_T		; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ return WILLBETHESAME_T	; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ return WILLNOTBETHESAME_T	; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ return WITH_T			; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ return WITH_VALUE_T		; }
	YY_BREAK
/*
	 *  Code to handle (* Comments *)
	 *
	 *  "(*" puts us into the Comment state.  Comments nest, so in the
	 *  Comment state we need to look for "(*" that increases the nesting
	 *  level and "*)" that will lower it.
	 *  Flex is faster if we match as much as possible, so we repeat
	 *  patterns with and without the "\n" (although it is more difficult
	 *  for the maintainer to understand) to avoid the overhead of a
	 *  separate "\n" rule.
	 *  Do NOT try to match \(\*+ since that causes "(****)" to parse
	 *  incorrectly.
	 */
case 111:
YY_RULE_SETUP
{
				  /*  Match "(" followed by "*" puts us into
				   *  the COMMENT state.  Don't use \*+ since
				   *  that will parse "(***)" incorrectly.
				   *  Initialize the nesting level.
				   *  Store the current line for ErrMsg use.
				   */
				  BEGIN (Comment);
				  CommentNestLevel = 1;
				  start_line = zz_line;
				  break;
				}
	YY_BREAK
case 112:
YY_RULE_SETUP
{
				  /*  Match "(" followed "*" followed by
				   *  anything that's not "(" nor "*".
				   *  Increase the commment nesting level.
				   */
				  CommentNestLevel++;
				  break;
				}
	YY_BREAK
case 113:
YY_RULE_SETUP
{
				  /*  Match "(" followed by "*" followed by
				   *  anything that's not "(" nor "*".
				   *  Increase the commment nesting level.
				   */
				  zz_line++;
				  CommentNestLevel++;
				  break;
				}
	YY_BREAK
case 114:
YY_RULE_SETUP
{
				  /*  Match anything not "*" or "(" followed
				   *  by one or more "*"s followed by ")".
				   *  This decreases the comment nesting level
				   *  and kicks us out if we're back to zero.
				   */
				  CommentNestLevel--;
				  if (CommentNestLevel == 0) {
				    BEGIN (INITIAL);
				  }
				  break;
				}
	YY_BREAK
case 115:
YY_RULE_SETUP
{
				  /*  Eat anything that's not a "*" nor a "("
				   */
				  break;
				}
	YY_BREAK
case 116:
YY_RULE_SETUP
{
				  /*  Eat anything that's not a "*" nor a "("
				   *  that is followed by a newline.
				   *  This rule also matches empty line.
				   */
				  zz_line++;
				  break;
				}
	YY_BREAK
case 117:
YY_RULE_SETUP
{
				  /*  Eat "("s not followed by "*"
				   */
				  break;
				}
	YY_BREAK
case 118:
YY_RULE_SETUP
{
				  /*  Eat "("s not followed by "*" plus a "\n"
				   */
				  zz_line++;
				  break;
				}
	YY_BREAK
case 119:
YY_RULE_SETUP
{
				  /*  Eat "*"s not followed by ")"
				   */
				  break;
				}
	YY_BREAK
case 120:
YY_RULE_SETUP
{
				  /*  Eat "*" not followed by ")" plus a "\n"
				   */
				  zz_line++;
				  break;
				}
	YY_BREAK
case YY_STATE_EOF(Comment):
{
				  /*  An EOF in a Comment means bad nesting.
				   *  Print an error and pop back a level
				   *  or return ENDTOK if no more input.
				   */
				  ErrMsg_CommentEOF();
				  CommentNestLevel = 0;
				  if ( Asc_ScannerPopBuffer() == 1 ) {
				    return ENDTOK;
				  }
				  break;
				}
	YY_BREAK
/*
	 *  Code to handle 'Symbols'
	 *
	 *  Symbols are simple: they are 'singely quoted strings' that
	 *  exist on a single line.  Look for anything that is not
	 *  a quote or a newline to get the text of the symbol.
	 */
case 121:
YY_RULE_SETUP
{
				  /*  A single quote (') in the INITIAL state
				   *  puts us into the Symbol state.
				   */
				  BEGIN (Symbol);
				  break;
				}
	YY_BREAK
case 122:
YY_RULE_SETUP
{
				  /*  Anything that is not a (') nor a newline
				   *  followed by a (') is the symbol's text.
				   *  Return to the INITIAL state, store the
				   *  symbol in the symbol table and return
				   *  SYMBOL_T to the parser.
				   */
				  BEGIN (INITIAL);
				  /*  strip off the final (')
				   */
				  yytext[--yyleng] = '\0';
				  if (yyleng > ZZ_MAXLEN) {
				    ErrMsg_LongSymbol();
				    break;
				  }
				  zz_lval.sym_ptr = AddSymbolL(yytext,yyleng);
				  return SYMBOL_T;
				}
	YY_BREAK
case 123:
YY_RULE_SETUP
{
				  /*  If we find a newline before a ('), the
				   *  symbol is unterminated.  Print an error
				   *  message and return to the INITIAL state.
				   */
				  ErrMsg_SymbolEOL();
				  zz_line++;
				  BEGIN(INITIAL);
				  break;
				}
	YY_BREAK
case YY_STATE_EOF(Symbol):
{
				  /*  If we find an EOF before a ('), the
				   *  symbol is unterminated.  Print an error
				   *  message and pop to the previously
				   *  REQUIREd file or return ENDTOK if the
				   *  pop fails due to no more input.
				   */
				  ErrMsg_SymbolEOF();
				  if ( Asc_ScannerPopBuffer() == 1 ) {
				    return ENDTOK;
				  }
				  break;
				}
	YY_BREAK
/*
	 *  Code to handle "Text in Double Quotes"
	 *
	 *  The DoubleQuote state begins with a double quote and ends
	 *  with a double quote; double quotes can be included by
	 *  escaping them with a backslash (e.g. \").  There is no
	 *  nesting level to worry about.
	 *  Flex is faster if we match as much as possible, so we repeat
	 *  patterns with and without the "\n" (although it is more difficult
	 *  for the maintainer to understand) to avoid the overhead of a
	 *  separate "\n" rule.
	 *  We want to keep the text, so we need to call yymore().
	 */
case 124:
YY_RULE_SETUP
{
				  /*  A double quote puts us into the
				   *  DoubleQuote state.  Save the line
				   *  number for error reporting.
				   */
				  BEGIN (DoubleQuote);
				  start_line = zz_line;
				  break;
				}
	YY_BREAK
case 125:
YY_RULE_SETUP
{
				  /*  A backslash \ in the DoubleQuote
				   *  state protects any character.
				   */
				  MatchedBackslash++;
				  yymore();
				  break;
				}
	YY_BREAK
case 126:
YY_RULE_SETUP
{
				  /*  A backslash \ in the DoubleQuote
				   *  state protects a newline.
				   */
				  MatchedBackslash++;
				  zz_line++;
				  yymore();
				  break;
				}
	YY_BREAK
case 127:
YY_RULE_SETUP
{
				  /*  A double quote in the DoubleQuote state
				   *  (that is not protected by backslash)
				   *  will put us back in the INITIAL state.
				   *  Process the string and return DQUOTE_T
				   *  to the parser.
				   */
				  BEGIN (INITIAL);
				  /*  Remove the final double quote
				   */
				  yytext[--yyleng] = '\0';
				  /*  Do backslash substitutions on the string
				   *  before returing it to the scanner.
				   */
				  if ( MatchedBackslash != 0 ) {
				    Process_Backslashes();
				    MatchedBackslash = 0;
				  }
				  zz_lval.dquote_ptr =
				      CopyIntoWorkBuffer(yytext,yyleng);
				  return DQUOTE_T;
				}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
				  /*  Match anything that is not backslash nor
				   *  doublequote and add it to the text.
				   */
				  yymore();
				  break;
				}
	YY_BREAK
case 129:
YY_RULE_SETUP
{
				  /*  Match anything that is not backslash nor
				   *  doublequote and add it to the text.
				   *  This also matches an empty line.
				   */
				  zz_line++;
				  yymore();
				  break;
				}
	YY_BREAK
case YY_STATE_EOF(DoubleQuote):
{
				  /*  End of File in a DoubleQuote state
				   *  means no matching double quote.
				   *  Print an error and pop next buffer
				   *  off the RequireStack or return ENDTOK
				   *  if there is no more input.
				   */
				  ErrMsg_DoubleQuoteEOF();
				  MatchedBackslash = 0;
				  if ( Asc_ScannerPopBuffer() == 1 ) {
				    return ENDTOK;
				  }
				  break;
				}
	YY_BREAK
/*
	 *  Code to handle { Text in Braces }
	 *
	 *  "{" puts us into the BracedText state.	Braces nest, so
	 *  in the BracedText state we need to look for "{" that increases
	 *  the nesting level and "}" that will lower it.
	 *  Flex is faster if we match as much as possible, so we repeat
	 *  patterns with and without the "\n" (although it is more difficult
	 *  for the maintainer to understand) to avoid the overhead of a
	 *  separate "\n" rule.
	 *  We want to keep the text we scan, so we have to call yymore().
	 */
case 130:
YY_RULE_SETUP
{ /*  A "{" puts us into the BracedText state.
				   *  If from the opening "{" to the first
				   *  newline is all whitespace, then ignore
				   *  it.
				   *  Initialize the nesting level.
				   *  Save the current line number for
				   *  error message reporting.
				   */
				  BEGIN (BracedText);
				  BracesNestLevel = 1;
				  start_line = zz_line;
				  zz_line++;
				  break;
				}
	YY_BREAK
case 131:
YY_RULE_SETUP
{
				  /*  A "{" puts us into the BracedText state.
				   *  Initialize the nesting level.
				   *  Save the current line number for
				   *  error message reporting.
				   */
				  BEGIN (BracedText);
				  BracesNestLevel = 1;
				  start_line = zz_line;
				  break;
				}
	YY_BREAK
case 132:
YY_RULE_SETUP
{
				  /*  A backslash \ in the BracedText state
				   *  protects any character and does not
				   *  affect the Nesting Level.
				   */
				  MatchedBackslash++;
				  yymore();
				  break;
				}
	YY_BREAK
case 133:
YY_RULE_SETUP
{
				  /*  A backslash \ in the BracedText state
				   *  protects a newline.
				   */
				  MatchedBackslash++;
				  zz_line++;
				  yymore();
				  break;
				}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
				  /*  A "{" in the braces state gets added to
				   *  the text and increase the nesting level.
				   */
				  BracesNestLevel++;
				  yymore();
				  break;
				}
	YY_BREAK
case 135:
YY_RULE_SETUP
{
				  /*  A "{" in the braces state gets added to
				   *  the text and increase the nesting level.
				   */
				  zz_line++;
				  BracesNestLevel++;
				  yymore();
				  break;
				}
	YY_BREAK
case 136:
YY_RULE_SETUP
{
				  /*  A "}" will reduce the nesting level.
				   *  If the nesting level is zero, go back to
				   *  the INITIAL level, save the text as a
				   *  Symbol, do the backslash substitution,
				   *  and return BRACEDTEXT_T to the
				   *  parse; otherwise, add the "}" to the
				   *  text and keep scanning.
				   */
				  BracesNestLevel--;
				  if (BracesNestLevel == 0) {
				    BEGIN (INITIAL);
				    /*	Remove the final "}"
				     */
				    yytext[--yyleng] = '\0';
				    /*	Do backslash substitutions on the text
				     *	before returing it to the scanner.
				     */
				    if ( MatchedBackslash != 0 ) {
				      Process_Backslashes();
				      MatchedBackslash = 0;
				    }
				    zz_lval.braced_ptr =
				        CopyIntoWorkBuffer(yytext,yyleng);
				    return BRACEDTEXT_T;
				  }
				  yymore();
				  break;
				}
	YY_BREAK
case 137:
YY_RULE_SETUP
{
				  /*  Match anything that is not "{" nor "}"
				   *  nor "\\"(backslash) and add it to text.
				   */
				  yymore();
				  break;
				}
	YY_BREAK
case 138:
YY_RULE_SETUP
{
				  /*  Match anything that is not "{" nor "}"
				   *  nor "\\"(backslash) followed by a "\n"
				   *  and add it to text.
				   *  This also matches an empty line.
				   */
				  zz_line++;
				  yymore();
				  break;
				}
	YY_BREAK
case YY_STATE_EOF(BracedText):
{
				  /*  End of File in braces means bad nesting.
				   *  Print an error message and pop to the
				   *  previously REQUIREd file or return
				   *  ENDTOK if no more input.
				   */
				  ErrMsg_BracesEOF();
				  BracesNestLevel = 0;
				  MatchedBackslash = 0;
				  if ( Asc_ScannerPopBuffer() == 1 ) {
				    return ENDTOK;
				  }
				  break;
				}
	YY_BREAK
/*
	 *  Code to handle Miscellaneous types.
	 *
	 */
case 139:
YY_RULE_SETUP
{
				  /*  An integer.  Defn near top of file.
				   */
				  zz_lval.int_value = atol(yytext);
				  return INTEGER_T;
				}
	YY_BREAK
case 140:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
				  /*  An integer as the first number in a
				   *  range (need to avoid parsing "1..2"
				   *  as the real numbers 1.0 and 0.2).
				   */
				  zz_lval.int_value = atol(yytext);
				  return INTEGER_T;
				}
	YY_BREAK
case 141:
YY_RULE_SETUP
{
				  /*  A real number.  Defn near top of file.
				   */
				  zz_lval.real_value = atof(yytext);
				  return REAL_T;
				}
	YY_BREAK
case 142:
YY_RULE_SETUP
{
				  /*  An identifier.  Defn near top of file.
				   */
				  if (yyleng >ZZ_MAXLEN) {
				    ErrMsg_LongID();
				    break;
				  }
				  zz_lval.id_ptr = AddSymbolL(yytext,yyleng);
				  return IDENTIFIER_T;
				}
	YY_BREAK
case 143:
YY_RULE_SETUP
{
				  /*  Ignore whitespace.  */
				  break;
				}
	YY_BREAK
case 144:
YY_RULE_SETUP
{
				  /*  Ignore whitespace.  */
				  zz_line++;
				  break;
				}
	YY_BREAK
case 145:
YY_RULE_SETUP
{
				  /*  Unknown character.  Print error
				   *  message and keep going.
				   */
				  ErrMsg_UnexpectedChar();
				  break;
				}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
{
				  /*  Print an error message if we
				   *  reached EOF in the middle of a
				   *  type definition.	Pop to the
				   *  previously REQUIREd file or return
				   *  ENDTOK if no more input.
				   */
				  Asc_ErrMsgTypeDefnEOF();
				  if ( Asc_ScannerPopBuffer() == 1 ) {
				    return ENDTOK;
				  }
				  break;
				}
	YY_BREAK
case 146:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 512 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 512 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 511);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( const char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
const char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( const char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
const char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( const char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, const char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
const char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	return (void *) realloc( ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

/*
 *  int zz_wrap(void);
 *
 *  This returns 1 if the scanner should stop parsing, or
 *  0 if the scanner should continue.  Flex requires this
 *  function unless %option noyywrap is defined.
 */
int
zz_wrap(void)
{
  return 1;
}


/*
 *  See the header file scanner.h for a description of this function.
 */
unsigned long
LineNum(void)
{
  return zz_line;
}


/*
 *  See the header file scanner.h for a description of this function.
 */
void
Asc_ScannerAssignFile(FILE *f, unsigned long linenum)
{
  yyin = f;
  zz_line = linenum;
  if ( RequireIndex == 0 ) {
    yyrestart(f);
  }
}

/*
 *  See the header file scanner.h for a description of this function.
 */
void
Asc_ScannerAssignString(void *yybs, unsigned long linenum, int first)
{
  /* yyin = f; */
  zz_line = linenum;
  yy_switch_to_buffer((YY_BUFFER_STATE)yybs);
  if (first) {
    BEGIN(INITIAL);
  }
  if ( RequireIndex == 0 ) {
    yyrestart((FILE *)NULL); /* ? ? ? should be reading from a string buffer... */
  }
}


/*
 *  See the header file scanner.h for a description of this function.
 */
int
Asc_ScannerPushBuffer(CONST char *filename)
{
  int status;        /* status returned from Asc_RequireModule */
  
  if ( RequireIndex >= MAX_REQUIRE_DEPTH ) {
    FPRINTF(ASCERR,
	    "Error:\tREQUIRE nested too deeply (%d levels) on line %s:%lu.\n"
	    "\tFile \"%s\" not read.\n",
	    RequireIndex,
	    Asc_ModuleBestName(Asc_CurrentModule()),
	    zz_line,
	    filename);
    return 1;
  }

  /*  The current Flex buffer is not on the RequireStack yet, so add it
   *  before calling Asc_OpenModule.  We need to increment RequireIndex
   *  before calling Asc_OpenModule due to the check in
   *  Asc_ScannerAssignFile.
   */
  RequireStack[RequireIndex++] = YY_CURRENT_BUFFER;

  Asc_RequireModule( filename, &status );
  if( status == 5 ) {
    /* already required */
    RequireIndex--;
    FPRINTF(ASCINF, "REQUIREd module \"%s\" already PROVIDEd\n", filename);
    return 1;
  }
  if( status == 4 ) {
    /* recursive require */
    RequireIndex--;
    FPRINTF(ASCWAR, "Asc-Warn: Recursive REQUIRE for module \"%s\", ignored\n",
            filename);
    return 1;
  }
  if ( status != 0 ) {
    /*  The open failed.  Decrement RequireIndex and print an error.
     */
    RequireIndex--;
    FPRINTF(ASCERR,
	    "Error:\tREQUIRE cannot open module \"%s\" on line %s:%lu\n",
	    filename,
	    Asc_ModuleBestName(Asc_CurrentModule()),
	    zz_line);
    return 2;
  }

  /*  Asc_OpenModule was successful, so print a message, switch to the
   *  new buffer in the INITIAL state.
   * SHOULD never reach here with a string buffer as they cannot be
   * REQUIREd.
   */
  PRINTF("REQUIREing file \"%s\"\n", filename);
  yy_switch_to_buffer(yy_create_buffer(zz_in,YY_BUF_SIZE));
  BEGIN (INITIAL);
  return 0;
}


/*
 *  int Asc_ScannerPopBuffer()
 *
 *  When we reach an End Of File (EOF) in the scanner, we call this
 *  function to pop us to the file which REQUIREd the file we just
 *  reached the end of and return 0.  If there are no more files on the
 *  RequireStack, return 1.
 */
static int
Asc_ScannerPopBuffer(void)
{
  Asc_CloseCurrentModule(); /* the current module may be NULL. */
  if ( RequireIndex == 0 ) {
    return 1;
  }

  yy_delete_buffer(YY_CURRENT_BUFFER);
  yy_switch_to_buffer( RequireStack[--RequireIndex] );
  BEGIN(INITIAL);
  return 0;
}

void Asc_ScannerReleaseStringBuffer(void *yybs)
{
  yy_delete_buffer((YY_BUFFER_STATE)yybs);
  yy_switch_to_buffer( RequireStack[--RequireIndex] );
  BEGIN(INITIAL);
}

void *Asc_ScannerCreateStringBuffer(CONST char *string, int len)
{
  /* we hope to god yy_scan_bytes does not change current buffer */
  YY_BUFFER_STATE yybs;
  /* push current, don't care its name or type. */
  RequireStack[RequireIndex++] = YY_CURRENT_BUFFER;
  yybs = yy_scan_bytes(string, len);
  assert(yybs);
  return (void *)yybs;
}

/*
 *  g_workbuf = CopyIntoWorkBuffer(str, len)
 *  char *g_workbuf;
 *  CONST char *str;
 *  unsigned long len;
 *
 *  Copy the string `str' having length `len' into the Scanner's Working
 *  Buffer g_workbuf and return g_workbuf if successful or NULL if
 *  unsuccessful (due to lack of memory).
 *  If g_workbuf is too short to hold `str', it is repeatably doubled until
 *  either it is big enough or memory is exhausted.
 *  We actually copy len+1 characters of `str' into g_workbuf so that the
 *  final \0 gets copied also.
 *  Global Effects: Modifies the contents of g_workbuf
 *                  Possibly changes the address of g_workbuf (on realloc)
 */
static char *
CopyIntoWorkBuffer(CONST char *str, unsigned long len)
{
  static size_t g_workbuf_len = WORKBUF_INIT_SIZE;  /* length of g_workbuf */

  assert(str[len]=='\0'); /* is this true for all yacc? */
  len++;  /* add one to make sure we have a final '\0' */
  if (( len >= g_workbuf_len ) || ( g_workbuf == NULL )) {
    while( len >= g_workbuf_len ) {
      g_workbuf_len *= 2;
    }
    if (g_workbuf == NULL ) {
      g_workbuf = (char*)ascmalloc( g_workbuf_len );
    } else {
      g_workbuf = (char*)ascrealloc( (void*)g_workbuf, g_workbuf_len );
    }
    if ( g_workbuf == NULL ) {
      return NULL;
    }
  }
  return strncpy(g_workbuf, str, len); /* does not add a NULL char */
}


extern void
Asc_DestroyScannerWorkBuffer(void)
{
  if (g_workbuf != NULL) {
    ascfree(g_workbuf);
  }
  g_workbuf = NULL;
}

void Asc_DestroyScannerInputBuffer(void)
{
  if (YY_CURRENT_BUFFER != NULL) {
    yy_delete_buffer(YY_CURRENT_BUFFER);
  }
}

/*
 *  int Process_Backslashes(void)
 *
 *  Covert any backslash \ escapes into the correct character.
 *  Operates on and modifies in place the value of yytext; yyleng
 *  is adjusted accordingly.  Returns the number of backslash
 *  substitutions made.  The following are supported:
 *      \a   (alert)
 *      \b   (backspace)
 *      \f   (formfeed)
 *      \n   (newline)
 *      \r   (carriage return)
 *      \t   (horizontal tab)
 *      \v   (vertical tab)
 *      \xhh (hexadecimal hh)              ***** NOT IMPLEMENTED *****
 *      \ooo (octal ooo where o == [0-7])  ***** NOT IMPLEMENTED *****
 *      \\n  (backslash before newline removes the backslash and newline)
 *      \.   (any other char produces that char)
 */
static int
Process_Backslashes(void)
{
  int old_index;
  int new_index;
  int substitution_count = 0;

  for (old_index=0, new_index=0; old_index<yyleng; old_index++) {
    if (yytext[old_index] != '\\') {
      yytext[new_index++] = yytext[old_index];
    } else {
      if (++old_index < yyleng) {
        switch(yytext[old_index]) {
        case 'a':
          yytext[new_index++] = '\a';
          substitution_count++;
          break;
        case 'b':
          yytext[new_index++] = '\b';
          substitution_count++;
          break;
        case 'f':
          yytext[new_index++] = '\f';
          substitution_count++;
          break;
        case 'n':
          yytext[new_index++] = '\n';
          substitution_count++;
          break;
        case 'r':
          yytext[new_index++] = '\r';
          substitution_count++;
          break;
        case 't':
          yytext[new_index++] = '\t';
          substitution_count++;
          break;
        case 'v':
          yytext[new_index++] = '\v';
          substitution_count++;
          break;
        case 'x':
          /* need to add processing for
	   * hexadecimal numbers \xhh here
           */
          yytext[new_index++] = yytext[old_index];
          substitution_count++;
          break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
          /* need to add processing for
	   * octal numbers \ooo here
           */
          yytext[new_index++] = yytext[old_index];
          substitution_count++;
          break;
        case '\n':
	  /*  Backslash at the end of the line removes
	   *  the slash and the newline from the result,
	   *  so no futher processing is needed.
	   */
	  substitution_count++;
	  break;
        default:
          yytext[new_index++] = yytext[old_index];
          substitution_count++;
          break;
        }
      }
    }
  }
  yytext[new_index] = '\0';
  yyleng = new_index;
  return substitution_count;
}


/*
 *  void ErrMsg_*(void)
 *
 *  The following all print error messages to the file handle ASCERR.
 *  The type of error is indicated by the function's name and the
 *  arguments to fprintf.
 */
static void
ErrMsg_BracesEOF(void)
{
  FPRINTF(ASCERR,
          "Error:\tEnd of file reached within a unit, data table, or "
	  "explanation.\n"
	  "\tNo close brace found for open brace on line %s:%lu\n",
	  Asc_ModuleBestName(Asc_CurrentModule()), start_line);
}


static void
ErrMsg_CommentEOF(void)
{
  FPRINTF(ASCERR,
          "Error:\tEnd of file reached within a comment.\n"
	  "\tNo close-comment found for comment starting on line %s:%lu\n",
	  Asc_ModuleBestName(Asc_CurrentModule()), start_line);
}


static void
ErrMsg_LongID(void)
{
  FPRINTF(ASCERR,
	  "Error:\tIdentifier too long on line %s:%lu.\n"
	  "\tIdentifier \"%s\" exceeds the maximum identifier size of %d\n",
	  Asc_ModuleBestName(Asc_CurrentModule()),
	  zz_line,
	  yytext,
	  ZZ_MAXLEN);
}


static void
ErrMsg_LongSymbol(void)
{
  FPRINTF(ASCERR,
	  "Error:\tSymbol too long on line %s:%lu.\n"
	  "\tSymbol %s exceeds the maximum symbol size of %d\n",
	  Asc_ModuleBestName(Asc_CurrentModule()),
	  zz_line,
	  yytext,
	  ZZ_MAXLEN);
}


static void
ErrMsg_DoubleQuoteEOF(void)
{
  FPRINTF(ASCERR,
          "Error:\tEnd of file reached with a double quoted string.\n"
	  "\tNo close quote found for the open quote on line %s:%lu\n",
	  Asc_ModuleBestName(Asc_CurrentModule()), start_line);
}


static void
ErrMsg_SymbolEOF(void)
{
  FPRINTF(ASCERR,
          "Error:\tEnd of file reached within a symbol.\n"
	  "\tNo close quote found for symbol on line %s:%lu\n",
	  Asc_ModuleBestName(Asc_CurrentModule()), zz_line);
}


static void
ErrMsg_SymbolEOL(void)
{
  FPRINTF(ASCERR,
          "Error:\tEnd of line reached within a symbol.\n"
	  "\tNo close quote found for symbol on line %s:%lu\n",
	  Asc_ModuleBestName(Asc_CurrentModule()), zz_line);
}


static void
ErrMsg_UnexpectedChar()
{
  FPRINTF(ASCERR,
	  "Error:\tUnexpected character \"%s\" in input on line %s:%lu.\n",
	  yytext,
	  Asc_ModuleBestName(Asc_CurrentModule()),
	  zz_line);
}
