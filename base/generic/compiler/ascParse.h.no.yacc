/*
 *  Ascend Grammar file
 *  by Tom Epperly
 *  Version: $Revision: 1.10 $
 *  Version control file: $RCSfile: ascParse.h.no.yacc,v $
 *  Date last modified: $Date: 1998/05/18 17:56:00 $
 *  Last modified by: $Author: mthomas $
 *
 *  Generated by 'yacc -d ascParse.y' on baker.edrc.cmu.edu
 *  ascParse.y CVS info:
 *  Version: Revision: 1.22 
 *  Version control file: RCSfile: ascParse.y,v 
 *  Date last modified: Date: 98/05/18 16:36:42 
 *  Last modified by: Author: ballan 
 *
 *  This file is part of the Ascend Language Interpreter.
 *
 *  Copyright (C) 1990, 1993, 1994 Thomas Guthrie Epperly
 *  Copyright (C) 1997 Benjamin Andrew Allan & Vicente Rico-Ramirez
 *  Copyright (C) 1998 Carnegie Mellon University
 *
 *  The Ascend Language Interpreter is free software; you can redistribute
 *  it and/or modify it under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of the
 *  License, or (at your option) any later version.
 *
 *  The Ascend Language Interpreter is distributed in hope that it will be
 *  useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the program; if not, write to the Free Software Foundation,
 *  Inc., 675 Mass Ave, Cambridge, MA 02139 USA.  Check the file named
 *  COPYING.
 *
 */

typedef union  {
  double real_value;
  long   int_value;
  struct fraction frac_value;
  symchar *id_ptr;
  CONST char *braced_ptr;	/* pointer for units, explanations, tables */
  symchar *sym_ptr;		/* pointer for symbols */
  CONST char *dquote_ptr;       /* for text in "double quotes" */
  struct Name *nptr;
  struct Expr *eptr;
  struct Set *sptr;
  struct VariableList *lptr;
  struct Statement *statptr;
  struct StatementList *slptr;
  struct SelectList *septr;
  struct SwitchList *swptr;
  struct WhenList *wptr;
  struct NoteTmp *notesptr;	/* change this once struct Notes is defined */
  struct gl_list_t *listp;
  struct InitProcedure *procptr;
  CONST dim_type *dimp;
  struct TypeDescription *tptr;
  struct UnitDefinition *udefptr;
  dim_type dimen;
  enum ForOrder order;
  enum ForKind fkind;
} ZZ_STYPE;
extern ZZ_STYPE zz_lval;
# define ADD_T 257
# define ALIASES_T 258
# define AND_T 259
# define ANY_T 260
# define AREALIKE_T 261
# define ARETHESAME_T 262
# define ARRAY_T 263
# define ATOM_T 264
# define BEQ_T 265
# define BNE_T 266
# define BREAK_T 267
# define CALL_T 268
# define CARD_T 269
# define CASE_T 270
# define CHOICE_T 271
# define CHECK_T 272
# define CONDITIONAL_T 273
# define CONSTANT_T 274
# define CONTINUE_T 275
# define CREATE_T 276
# define DATA_T 277
# define DECREASING_T 278
# define DEFAULT_T 279
# define DEFINITION_T 280
# define DIMENSION_T 281
# define DIMENSIONLESS_T 282
# define DO_T 283
# define ELSE_T 284
# define END_T 285
# define EXPECT_T 286
# define EXTERNAL_T 287
# define FALSE_T 288
# define FALLTHRU_T 289
# define FOR_T 290
# define FROM_T 291
# define GLOBAL_T 292
# define IF_T 293
# define IMPORT_T 294
# define IN_T 295
# define INPUT_T 296
# define INCREASING_T 297
# define INTERACTIVE_T 298
# define INTERSECTION_T 299
# define ISA_T 300
# define _IS_T 301
# define ISREFINEDTO_T 302
# define MAXIMIZE_T 303
# define MAXINTEGER_T 304
# define MAXREAL_T 305
# define METHODS_T 306
# define METHOD_T 307
# define MINIMIZE_T 308
# define MODEL_T 309
# define NOT_T 310
# define NOTES_T 311
# define OF_T 312
# define OR_T 313
# define OTHERWISE_T 314
# define OUTPUT_T 315
# define PATCH_T 316
# define PROD_T 317
# define PROVIDE_T 318
# define REFINES_T 319
# define REPLACE_T 320
# define REQUIRE_T 321
# define RETURN_T 322
# define RUN_T 323
# define SATISFIED_T 324
# define SELECT_T 325
# define SIZE_T 326
# define STOP_T 327
# define SUCHTHAT_T 328
# define SUM_T 329
# define SWITCH_T 330
# define THEN_T 331
# define TRUE_T 332
# define UNION_T 333
# define UNITS_T 334
# define UNIVERSAL_T 335
# define WHEN_T 336
# define WHERE_T 337
# define WHILE_T 338
# define WILLBE_T 339
# define WILLBETHESAME_T 340
# define WILLNOTBETHESAME_T 341
# define ASSIGN_T 342
# define CASSIGN_T 343
# define DBLCOLON_T 344
# define USE_T 345
# define LEQ_T 346
# define GEQ_T 347
# define NEQ_T 348
# define DOTDOT_T 349
# define WITH_T 350
# define VALUE_T 351
# define WITH_VALUE_T 352
# define REAL_T 353
# define INTEGER_T 354
# define IDENTIFIER_T 355
# define BRACEDTEXT_T 356
# define SYMBOL_T 357
# define DQUOTE_T 358
# define UMINUS_T 359
# define UPLUS_T 360
