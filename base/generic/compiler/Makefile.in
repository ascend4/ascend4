#  ASCEND Compiler Makefile
#  Tom Epperly
#  modified Kirk Abbott to accept the interface.


SHELL = /bin/sh
builddir = ..
srcdir = @fullpathsrcdir@/../generic/compiler
VPATH := @fullpathsrcdir@/../generic/compiler

LEX = @LEX@

#  The next variables are the primary executables and/or libraries that
#  this makefile is responsible for, and the default target of this
#  makefile.

EXECUTABLE = ascend

PURIFIED_EXEC = ascendp

QUANTIFIED_EXEC = ascendq

LIBRARY = libasccompiler.a


default: $(LIBRARY)



#  Defines and Includes that are specific to this directory

DIR_SPECIFIC_DEFS = 
DIR_SPECIFIC_INCS = 



#  The next variables list the source files (EXEC_SCRS) to compile
#  into the object files (EXEC_OBJS) that are linked with the
#  library files (EXEC_LIBS) to make EXECUTABLE

EXEC_SRCS = actype.c interface.c license.c main.c termsetup.c

EXEC_OBJS = actype.o interface.o license.o main.o termsetup.o \
		$(ARCHIVE)/libasccompiler.a $(ARCHIVE)/libascutilities.a \
		$(ARCHIVE)/libascgeneral.a

EXEC_LIBS = $(DEBUG_MALLOC_LIBS) $(MATH_LIBS) -ltermcap $(DEBUG_LIBS)



#  The next variables list the source files (LIB_SCRS) to compile
#  into the object files (LIB_OBJS) that are combined to make LIBRARY


LIB_OBJS = \
	anoncopy.o anonmerg.o anontype.o arrayinst.o ascCompiler.o \
	ascParse.o atomsize.o atomvalue.o bintoken.o bit.o braced.o \
	case.o check.o child.o childdef.o childio.o childinfo.o cmpfunc.o \
	commands.o copyinst.o createinst.o destroyinst.o \
	dimen.o dimen_io.o dump.o \
	evaluate.o exprio.o exprs.o exprsym.o extcall.o \
	extfunc.o extinst.o find.o forvars.o fractions.o \
	freestore.o func.o initialize.o instance.o instance_io.o \
	instantiate.o instmacro.o instquery.o interval.o \
	library.o linkinst.o logrel_io.o logrel_util.o \
	logrelation.o mathinst.o mergeinst.o module.o name.o \
	nameio.o notate.o numlist.o packages.o parentchild.o \
	parpend.o pending.o plot.o proc.o procframe.o \
	procio.o prototype.o qlfdid.o refineinst.o rel_common.o relation.o \
	relation_io.o relation_util.o rootfind.o rounded.o safe.o \
	scanner.o select.o setinst_io.o setinstval.o setio.o \
	sets.o slist.o simlist.o statement.o statio.o switch.o \
	symtab.o syntax.o temp.o tmpnum.o type_desc.o \
	type_descio.o typedef.o typelint.o redirectFile.o \
    units.o universal.o \
	value_type.o visitinst.o visitlink.o vlist.o vlistio.o \
	watchpt.o watchptio.o when.o when_io.o when_util.o

LIB_SRCS = $(LIB_OBJS:%.o=%.c)

#  The global makefile macros (ConfigAscend) and global rules (Makefile.Rules)
#  
include $(builddir)/ConfigAscend
include $(builddir)/Makefile.Rules



#  File specific rules

#  The parser needs some massaging to change the prefix from `yy' to `zz_'

ascParse.o: $(srcdir)/ascParse.y

ascParse.c ascParse.h: $(srcdir)/ascParse.y $(srcdir)/ascParse_no_yacc.c $(srcdir)/ascParse_no_yacc.h
	$(MAKE) @parser_src@

ascParse.c.from.yacc: $(srcdir)/ascParse.y
	$(YACC) -d $(srcdir)/ascParse.y
	$(RM) ascParse.h ascParse.c
	$(SED) -e "/#ifndef YYSTYPE/,/#endif/d" \
		-e "s/yy/zz_/g" -e "s/YY/ZZ_/g" < y.tab.c > ascParse.c
	$(SED) -e "s/yy/zz_/g" -e "s/YY/ZZ_/g" < y.tab.h > ascParse.h
	$(RM) y.tab.c y.tab.h

ascParse.c.from.c:
	$(CP) $(srcdir)/ascParse_no_yacc.c ascParse.c
	$(CP) $(srcdir)/ascParse_no_yacc.h ascParse.h

#  rounded needs a special define

rounded.o: $(srcdir)/rounded.h $(srcdir)/rounded.c $(srcdir)/compiler.h
	$(CC) -DSLOPPY $(CC_SWITCHES) -c $(srcdir)/rounded.c


#  The C file for the scanner (scanner.c) can either be generated by flex,
#  or it can come from a pregenerated C file.  The configure script will
#  set the $(MAKE) line under the ``scanner'' target to make either
#      scanner.c.from.flex   ---to generate the scanner using flex
#      scanner.c.from.c      ---to use the pregenerated C file
#  depending on the value of $(LEX).
# The scanner does not depend on btprolog.h, but we need to force it to
# be in the build tree.

scanner.o: $(srcdir)/scanner.l $(srcdir)/scanner_no_flex.c ./ascParse.h ./btprolog.h
	$(MAKE) @scanner_src@
	$(CC) $(CC_SWITCHES) -c scanner.c

scanner.c.from.flex: $(srcdir)/scanner.l ./ascParse.h
	$(LEX) -t -Pzz_ $(srcdir)/scanner.l > scanner.c

scanner.c.from.c: $(srcdir)/scanner_no_flex.c
	$(CP) $(srcdir)/scanner_no_flex.c scanner.c

scanner.c: $(srcdir)/scanner.l $(srcdir)/scanner_no_flex.c ./ascParse.h
	$(MAKE) @scanner_src@

btprolog.h:
	$(CP) $(srcdir)/btprolog.h .


#  This ensures that packages was built with -DNO_PACKAGES 
#  when building the stand-alone compiler

.no-packages: packages.o
	$(RM) $?
	$(MAKE) $? HAVE_PACKAGES=-DNO_PACKAGES
	$(ECHO) 'Made packages.o with -DNO_PACKAGES' > $@

packages.o: $(srcdir)/packages.c
	$(CC) $(HAVE_PACKAGES) $(CC_SWITCHES) -c $(srcdir)/packages.c


###==> standalone compiler <==##############################
#  uncomment the following lines if you want to build a standalone
#  compiler with NO_PACKAGES selected in ConfigAscend.
#HAVE_PACKAGES = -DNO_PACKAGES
#PACK_LIBS = 


#  Here is a target to build a stand alone version of the ASCEND
#  compiler.  It makes sure packages was built with -NO_PACKAGES,
#  and then builds ascend.
#
stand-alone: .no-packages
	$(MAKE) ascend PACK_LIBS=""


#  profiling stuff -- DEC alpha only
#
time:
	$(PIXIE) ascend
	cd $(PIXIEDIR); $(builddir)/ascend.pixie ./system
	$(RM) /tmp/time.ascend
	prof $(PIXIE_OPTS) ascend ascend.Addrs \
	$(PIXIEDIR)/ascend.Counts > /tmp/time.ascend



#  Files, in addition to the default, to remove when we `make clean'

clean::
	-$(RM) ascParse.h ascParse.c y.ascParse.c y.ascParse.h yacc.* \
		scanner.c fascend .no-packages



# DO NOT DELETE THIS LINE -- g++dep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.


# IF YOU PUT ANYTHING HERE IT WILL GO AWAY
#
