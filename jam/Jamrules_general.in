#
# General Jamrules support file for building Ascend4
# (see http://www.freetype.org/jam/index.html)
#
# This file is part of the Ascend Build System.
#
# Copyright (C) 2005  Jerry D. St.Clair
#
# The Ascend Build System is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This program is distributed in hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139 USA.
# Check the file named COPYING.
#---------------------------------------------------------------------------
#
# UNDER CONSTRUCTION
#
# This is a template Jamrules file which supports building the
# Ascend libraries and executables.  It contains general variable
# and rule definitions required for execution of jam in any of the
# source subdirectories.  The Ascend jam build system currently
# supports the MSVC, Borland, MinGW, and Watcom compilers
# (extension to gcc on Linux is on the TODO: list).
#
# This file is not currently customized by the configure mechanism,
# although this may be implemented in the future.
#
# Users should copy/rename this file to 'Jamrules', then modify
# the settings manually for their particular system.  Ascend
# cannot be built by jam unless the Jamrules file is present.
#
# User-customized Jamrules files should not be placed in version
# control.  Only the Jamrules.in template should be versioned.
#
#---------------------------------------------------------------------------

# Comment to compile with debugging & assertions enabled
NODEBUG = 1 ;

# Comment to compile without using the Epperly malloc debugger
#DEBUG_MALLOC = -DMALLOC_DEBUG ;

#---------------------------------------------------------------------------
# Options from here on should not require routine tweaking

# Tools required for complete build (comment out if not present).
# The build system works around their absence if necessary.
# Note that they are available for Windows, for example:
#     http://sourceforge.net/projects/gnuWin32
SED       = sed ;
YACC      = yacc ;
YACCFLAGS = -d ;
YACCFILES = y.tab ;
LEX       = flex ;

# Ascend base library names
ASC_COMPILER_LIBNAME  = libasc_compiler ;
ASC_GENERAL_LIBNAME   = libasc_general ;
ASC_SOLVER_LIBNAME    = libasc_solver ;
ASC_UTILITIES_LIBNAME = libasc_utilities ;
ASC_PACKAGES_LIBNAME  = libasc_packages ;

ASC_COMPILER_LIB  = $(ASC_COMPILER_LIBNAME)$(SUFLIB) ;
ASC_GENERAL_LIB   = $(ASC_GENERAL_LIBNAME)$(SUFLIB) ;
ASC_SOLVER_LIB    = $(ASC_SOLVER_LIBNAME)$(SUFLIB) ;
ASC_UTILITIES_LIB = $(ASC_UTILITIES_LIBNAME)$(SUFLIB) ;
ASC_PACKAGES_LIB  = $(ASC_PACKAGES_LIBNAME)$(SUFLIB) ;

ASC_BASE_LIBS =
  $(ASC_COMPILER_LIB)
  $(ASC_GENERAL_LIB)
  $(ASC_SOLVER_LIB)
  $(ASC_UTILITIES_LIB)
  $(ASC_PACKAGES_LIB)
  ;

#  Build ascend with packages.
#  Packages are bits of compiled code that represent models, or solvers,
#  or, in general, any bits of external code.  Packages may be dynamically
#  or statically linked/loaded, or may be turned off.
#  ALL BUT ONE of the following defines should be commented:
#
HAVE_PACKAGES  = STATIC_PACKAGES ;
#HAVE_PACKAGES = DYNAMIC_PACKAGES ;
#HAVE_PACKAGES = NO_PACKAGES ;

#  If statically linked, i.e. -DSTATIC_PACKAGES, then set PACK_LIBS
#  to where your external packages exist. If dynamically linked or
#  if you are building with NO_PACKAGES, leave PACK_LIBS empty.
#
PACK_LIBS = $(ASC_PACKAGES_LIB) ;

# FORTRAN support library names
ASC_BLAS_LIBNAME    = libblas ;
ASC_LINPACK_LIBNAME = liblinpack ;

ASC_BLAS_LIB    = $(ASC_BLAS_LIBNAME)$(SUFLIB) ;
ASC_LINPACK_LIB = $(ASC_LINPACK_LIBNAME)$(SUFLIB) ;

# Build directory - - will be qualified for compiler & build type
BUILD_DIR_ROOT = $(DOT) ;

# Comment for normal jam deletion of object files after building targets
KEEPOBJS = true ;

if $(NODEBUG)
{
  CCFLAGS += -DNDEBUG ;
  BUILD_SUBDIR = $(SLASH)Release ;
}
else
{
  BUILD_SUBDIR = $(SLASH)Debug ;
}

# platform- & complier-specific options
if $(NT)
{
  # Windows-specific defines
  CCFLAGS += -D_X86_=1 -DWIN32 -D_WIN32 -DASC_BUILD_LIB -D$(HAVE_PACKAGES) ;
  SUFSHR = .dll ;

  if $(BCCROOT) || ( $(TOOLSET) = BORLANDC )
  {
    FORTRAN = ;
    CCFLAGS   += -q -d -g0 -j0 -K -DMOD_ASCMALLOC ;
    CCWARN    = -w ;
    if $(NODEBUG)
    {
      CCDEBUG = -v- -O2 ;
    }
    else
    {
      CCDEBUG = -v -y -Od ;
    }
    C++FLAGS  = $(CCFLAGS) ;
    COFF2OMF = coff2omf ;  # add location if not in path
    BUILD_SUBDIR = $(BUILD_SUBDIR)$(SLASH)bcc ;
  }

  else if $(MSVCNT) || ( $(TOOLSET) = VISUALC )
  {
    FORTRAN = ;
    CCFLAGS   += /Ze ;
    CCWARN    = /W4 ;
    if $(NODEBUG)
    {
      CCDEBUG = /O2 ;
    }
    else
    {
      CCDEBUG = /Zi /Od ;
    }
    # Libraries are in different paths depending on VC version
    LINKFLAGS += /LIBPATH:$(VISUALC)\\lib /LIBPATH:$(VISUALC)\\PlatformSDK\\lib\\ ;
    LINKLIBS = advapi32.lib
               libc.lib
               oldnames.lib
               gdi32.lib
               user32.lib
               kernel32.lib ;
    BUILD_SUBDIR = $(BUILD_SUBDIR)$(SLASH)msvc ;
  }

  else if $(MINGW) || ( $(TOOLSET) = MINGW )
  {
    FORTRANFLAGS = -c -I4 -O ;
    F77_LIBS += $(MINGW)$(SLASH)lib$(SLASH)libg2c.a ;

    # uncomment to select desired warning level and ansi-strictness
    CCWARN += -Wall ;
    CCWARN += -W ;
    CCWARN += -pedantic ;
    #CCWARN += -Wshadow ;
    #CCWARN += -ansi ;

    if $(NODEBUG)
    {
      CCDEBUG = -O3 ;
    }
    else
    {
      CCDEBUG = -g -O0 ;
    }
    C++FLAGS  = $(CCFLAGS) ;
    BUILD_SUBDIR = $(BUILD_SUBDIR)$(SLASH)mingw ;
  }

  else if $(WATCOM) || ( $(TOOLSET) = WATCOM )
  {
    FORTRANFLAGS = /NOER ;
    CCFLAGS += /fr /dMOD_ASCMALLOC ;
    CCWARN    = /wx ;
    if $(NODEBUG)
    {
      CCDEBUG = /ox ;
      FORTRANFLAGS += /OX ;
    }
    else
    {
      CCDEBUG = /od /d2 ;
      FORTRANFLAGS += /OD /D2 ;
    }
    BUILD_SUBDIR = $(BUILD_SUBDIR)$(SLASH)watcom ;
  }
}

else if $(OS) = LINUX
{
  SUFSHR = .so ;
  CCFLAGS += -D$(HAVE_PACKAGES) ;
  FORTRANFLAGS = -c -I4 -O -lg2c ;

  # uncomment to select desired warning level and ansi-strictness
  CCWARN += -Wall ;
  CCWARN += -W ;
  CCWARN += -pedantic ;
  #CCWARN += -Wshadow ;
  #CCWARN += -ansi ;

  if $(NODEBUG)
  {
    CCDEBUG = -O3 ;
  }
  else
  {
    CCDEBUG = -g -O0 ;
  }
  BUILD_SUBDIR = $(BUILD_SUBDIR)$(SLASH)linux ;
}

CCFLAGS  += $(CCWARN) $(CCDEBUG) $(DEBUG_MALLOC) ;
C++FLAGS  = $(CCFLAGS) ;
BUILD_DIR = $(BUILD_DIR_ROOT)$(BUILD_SUBDIR) ;

#======================================================================
# Ascend-specific jam instructions
#======================================================================

#----------------------------------------------------------------------
# LEX_or_copy
#
# Generates a c source file using the lexer defined by $(LEX),
# or by copying a specified file if $(LEX) is not defined.
# The following parameters are used:
#
# 1   source file to generate
# 2   lex/flex definition file
# 3   pre-generated source file to copy if $(LEX) is empty
# 4   header file associated with the source file, if any
#----------------------------------------------------------------------
rule LEX_or_copy
{
    if $(LEX)
    {
      Echo Generating $(1) from $(LEX) ;
      DEPENDS $(1) : $(2) ;
      Lex_with_options $(1) : $(2) ;
    }
    else
    {
      Echo Copying $(1) from $(4) ;
    	File $(1) : $(3) ;
    }

    # make the header dependent
    if $(4)
    {
      INCLUDES $(1) : $(4) ;
    }

    Clean clean : $(1) ;
}

# run LEX using options specified in LEXOPTS
actions Lex_with_options
{
  $(LEX) $(LEXOPTS) -o$(1) $(2)
}


