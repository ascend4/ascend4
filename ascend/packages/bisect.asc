(* This file implements a bisection search *)

IMPORT Bisection FROM libbisect;
(* Bisection is the name of the init function *)

MODEL bisect__base;

   ninputs IS_A integer;
   x[1..ninputs] IS_A generic_real;
   x_par[1..ninputs] IS_A generic_real;
    
END bisect__base;   

MODEL bisect;

   b IS_A bisect__base;
   ninputs IS_A integer;
   x[1..ninputs] IS_A generic_real;
   x_par[1..ninputs] IS_A generic_real;

   (* wire up the terms *)
   
   ninputs, b.ninputs ARE_THE_SAME;
   FOR i IN [1..ninputs] CREATE
    x[i], b.x[i]         ARE_THE_SAME;
    x_par[i], b.x_par[i] ARE_THE_SAME;
   END;
   
   y[1..ninputs] IS_A generic_real; (* this is the result vector *)
   
END bisect;


MODEL test_bisect REFINES bisect;

   ninputs := 4;
   myset IS_A set OF symbol;
   myset := ['mary','jane','sue'];
   multipliers[myset]  IS_A generic_real;
   
   multipliers['mary'] := 1.0;
   multipliers['jane'] := 2.5;
   multipliers['sue']  := 3.9;      
   
   INITIALIZATION
   
   PROCEDURE set_values;
    x[1] := 2.3;
    x[2] := 0.5657;
    x[3] := 0.0;
    x[4] := 67.893;
   END set_values;
   
   PROCEDURE set_values_external;
     FOR i IN myset DO
        EXTERNAL do_set_values(x[1..ninputs],x_par[1..ninputs],
	    	    	       multipliers[i]);
     END;
   END set_values_external;
   
   PROCEDURE bisection;
     EXTERNAL do_bisection(x[1..ninputs],x_par[1..ninputs],y[1..ninputs]);   
   END bisection;
   
   PROCEDURE all;
     RUN set_values_external;
     RUN bisection;
   END all;
   
END test_bisect;
   
