#!/usr/bin/python scons
Import('env')

srcs = Split("""
	AscBitmaps.c AscPrintTcl.c BrowLogRel_io.c BrowWhen_io.c
	BrowserMethod.c BrowserProc.c BrowserQuery.c BrowserRel_io.c
	Commands.c DebugProc.c DisplayProc.c
	EnvVarProc.c HelpProc.c Integrators.c
	LibraryProc.c MtxProc.c ProbeProc.c Qlfdid.c
	ScriptProc.c Sensitivity.c SimsProc.c SlvProc.c
	SolverProc.c UnitsProc.c UserData.c
	tkConsole.c old_utils.c Driver.c
""")

tcl_env = env.Clone()

if env.get('HAVE_LEX'):
	typelexsource = tcl_env.CFile('typelex.l',LEXFLAGS = '-l -Ptyp_')
	# copy the file for later use when people don't have flex:
	if env.get('UPDATE_NO_YACC_LEX'):
		env.Command('typelex_no_lex.c',typelexsource,Copy('$TARGET','$SOURCE'))
else:
	typelexsource = 'typelex_no_lex.c'

if tcl_env.get('TCL_CPPPATH'):
	tcl_env.AppendUnique(CPPPATH=[tcl_env['TCL_CPPPATH']])

if tcl_env.get('TK_CPPPATH'):
	tcl_env.AppendUnique(CPPPATH=[tcl_env['TK_CPPPATH']])

tcl_env.AppendUnique(LIBS=['ascend'])
tcl_env.AppendUnique(LIBPATH=['#'])

if tcl_env.get('STATIC_TCLTK'):
	print "STATIC TCL/TK PROGRAM LINKAGE"
	srcs += ['$TCL_LIB','$TK_LIB','$TKTABLE_LIB']
	tcl_env.AppendUnique(LIBS=[tcl_env['X11_LIB']])
	tcl_env.AppendUnique(LIBPATH=[tcl_env['X11_LIBPATH']])

	if tcl_env['TKTABLE_LIBPATH']:
		tcl_env.Append(LIBPATH=tcl_env['TKTABLE_LIBPATH'])

	tcl_env.Program("ascend4",["main.c"] + srcs)
else:
	print "DYNAMIC TCL/TK PROGRAM LINKAGE"
	tcl_env.Append(LIBS=tcl_env['TCL_LIB'])
	tcl_env.Append(LIBS=tcl_env['TK_LIB'])

	if tcl_env.has_key('TCL_LIBPATH'):
		tcl_env.AppendUnique(LIBPATH=[tcl_env['TCL_LIBPATH']])
	if tcl_env.has_key('TK_LIBPATH'):
		tcl_env.AppendUnique(LIBPATH=[tcl_env['TK_LIBPATH']])

	ascendtcllib = tcl_env.SharedLibrary('ascendtcl',srcs + [typelexsource] )

	#tcl_so = tcl_env.Command(Copy('$SHLIBPREFIX$TCL_LIB$SHLIBSUFFIX','$TCL_LIBPATH/$SHLIBPREFIX$TCL_LIB$SHLIBSUFFIX'))
	#tk_so = tcl_env.Command(Copy('$SHLIBPREFIX$TK_LIB$SHLIBSUFFIX','$TK_LIBPATH/$SHLIBPREFIX$TK_LIB$SHLIBSUFFIX'))
	#tktable_so = tcl_env.Command(Copy('$SHLIBPREFIX$TKTABLE_LIB$SHLIBSUFFIX','$TKTABLE_LIBPATH/$SHLIBPREFIX$TKTABLE_LIB$SHLIBSUFFIX'))

	tcl_env.Prepend(LIBPATH=['.'])

	ascendtclprog = tcl_env.Program("ascend4",["main.c"]
		, LIBS = tcl_env['LIBS']+['ascendtcl']
	)

	if tcl_env.get('CAN_INSTALL'):
		env.InstallProgram(Dir(env.subst("$INSTALL_ROOT$INSTALL_BIN")),ascendtclprog)
		env.InstallShared(Dir(env.subst("$INSTALL_ROOT$INSTALL_LIB")),ascendtcllib)

		import glob

		tkdir = "$INSTALL_ROOT$INSTALL_TK"

		import os
		import os.path
	
		cd = os.getcwd()
		os.chdir(env.Dir("#tcltk/tk").abspath)

		files = {}

		for root, dirs, files in os.walk("."):
			#print root, "..."
			dest = Dir(env.subst(tkdir)+"/"+root)
			for name in files:
				env.InstallShared(dest,"#tcltk/tk/"+os.path.join(root, name))
				#print dest,"<---",os.path.join(root, name)

			if 'CVS' in dirs:
			    dirs.remove('CVS')  # don't visit CVS directories
			if '.svn' in dirs:
			    dirs.remove('.svn')  # don't visit .svn directories

		os.chdir(cd)

# vim: set syntax=python:

