interface Dimensions{
	static const unsigned MAX_DIMS = NUM_DIMENS;
	static const std::string BASEUNITS[MAX_DIMS];

	/// Return the string name of fundamental unit for the i-th dimension of measurement.
	static const std::string getBaseUnit(const unsigned &i);

	/// Construct a Dimension object fro mthe ASCEND internal data type
	Dimensions(const dim_type *d);

	/// Copy constructor
	Dimensions(const Dimensions &);

	/// Default constructor, required to keep std::vector happy
	Dimensions();

	/// Return the ASCEND internal datatype
	const dim_type *getInternalType();

	const std::string toString();

	// Comparison operators
	const bool operator<(const Dimensions &);
	const bool operator==(const Dimensions &);
	const bool operator!=(const Dimensions &);

	/// Get default units for the given dimension
	// const UnitsM getDefaultUnits(); # DEFINED IN PYTHON

	/// Get the user's preferred units for the given dimension
	//const UnitsM getUserUnits(); # DEFINED IN PYTHON

	/// Test for a dimensionless Dimension object
	const bool isDimensionless();

	/// Test for a wildcard ('don't care') Dimension object
	const bool isWild();

	/// Get the numerator part of the index in the i-th dimension (eg for Area, with i={length}, return 2)
	const short getFractionNumerator(const unsigned &i);

	/// Get the denominator part of the index in the i-th dimension
	const short getFractionDenominator(const unsigned &i);
};


