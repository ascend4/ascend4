# vim: ft=python ts=4 sw=4
"""
This is the Buildbot master.cfg configuration file. We keep it at
/srv/ascend/buildbot/master.
"""

from buildbot.plugins import *
import urllib.parse

ASCEND_SVN = "http://svn.ascend4.org/"

def SVNURL(branch):
	if branch is "trunk":
		return "%s%s" % (ASCEND_SVN,"trunk")
	else:
		return "%sbranches/%s" % (ASCEND_SVN,urllib.parse.quote_plus(branch))

ASCEND_SVN_INTERP = util.Transform(SVNURL,util.Interpolate("%(src::branch)s"))

#ASCEND_TESTS = "general_color general_dstring general_hashpjw general_list general_listio general_mem general_pool general_pretty general_stack general_table general_tm_time general_ospath general_env general_ltmatrix general_ascMalloc utilities_error utilities_ascDynaLoad utilities_ascEnvVar utilities_ascPrint utilities_ascSignal utilities_readln utilities_set linear_qrrank linear_mtx compiler_basics  compiler_expr  compiler_fixfree  compiler_fixassign packages_defaultall solver_slv_common solver_slvreq solver_qrslv solver_fprops solver_lrslv integrator_lsode".split()
# solver_ipopt

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

#------------------------------------------------------------------------------
####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
	worker.Worker("bot-ub1404"
		,"pwx2ub1404"
		,properties={'os':'ubuntu'}
		,max_builds=2
	)
]

WORKERS = ['bot-ub1404']

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

#------------------------------------------------------------------------------
####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
# ASCEND
c['change_source'].append(changes.PBChangeSource(
	passwd='ascend4bb'
))

# CUNIT
#CUNIT_SVN = "https://svn.code.sf.net/p/cunit/code/"
#CUNIT_SVN_INTERP = util.Interpolate("%(kw:svn)s%(src::branch)s",svn=CUNIT_SVN)

#c['change_source'].append(changes.SVNPoller(
#	repourl=CUNIT_SVN
#	,split_file=my_split_file_branches
#	,pollinterval=3600
#))

#from buildbot import revlinks
#c['revlink'] = revlinks.RevlinkMatch(
#	repo_urls=[r'http://svn.ascend4.org/(.*)',r'(.*)']
	#,revlink=r'http://code.ascend4.org/ascend/\1?view=revision&revision=%s'
#	,revlink=r'http://ascend4.org/stuff=\1'
#)
c['revlink'] = util.RevlinkMatch([r'http://svn.ascend4.org/(.*)'],
	r'http://code.ascend4.org/ascend?view=revision&revision=%s')

c['revlink'] = util.RevlinkMatch(
    repo_urls=[r'http://svn.ascend4.org/(.*)$'
               ,r'/srv/ascend/svn/ascend/(.*)$'
    ]
	,revlink=r'http://ascend4.org/r%s'
)

#------------------------------------------------------------------------------
####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'ascend' build

c['schedulers'] = []

# ASCEND SCHEDULERS

c['schedulers'].append(schedulers.AnyBranchScheduler(
	name='ascendsvn'
	,builderNames=['ascend','ascend-lcov']
	,treeStableTimer=2
))

c['schedulers'].append(schedulers.ForceScheduler(
	name='force_ascend'
	,builderNames=['ascend','ascend-lcov']
	,label='Force ASCEND build'
	,codebases=[
		util.CodebaseParameter(
			""
			,label="Repository"
			,branch=util.ChoiceStringParameter(
				name="branch"
				,choices=['trunk','relerrorlist']
				,default='trunk'
			)
			,revision=util.FixedParameter(name="revision",default="")
		)
	]
))


## CUNIT SCHEDULERS
#
#c['schedulers'].append(schedulers.ForceScheduler(
#	name="force_cunit"
#	,buttonName="force"
#	,builderNames=["cunit"]
#	,codebases=[
#		util.CodebaseParameter(
#		    "",
#		    name="svn",
#		    # will generate a combo box
#		    branch=util.ChoiceStringParameter(
#			name="branch"
#			,choices=["trunk"]+["branches/%s"%i for i in ["mingw64"]]
#			,default="branches/ming64"
#		    ),
#		    # following are hidden, but needed for the scheduling system
#		    revision=util.FixedParameter(name="revision", default=""),
#		    repository=util.FixedParameter(name="repository", default=""),
#		    project=util.FixedParameter(name="project", default=""),
#        )]
#))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

ascendsvnstep = steps.SVN(repourl=ASCEND_SVN_INTERP ,mode="incremental" ,haltOnFailure=True)
ascendcleanstep = steps.ShellCommand(name="clean",command=['/usr/bin/scons','-c'],haltOnFailure=True)
ascendteststep = steps.Test(name="test",command=["test/test_expectpass"],env={'LD_LIBRARY_PATH':'.:/usr/local/lib'},haltOnFailure=True)

# ASCEND CUNIT TESTS

ascendfactory = util.BuildFactory()
# svn up
ascendfactory.addStep(ascendsvnstep)
# clean
ascendfactory.addStep(ascendcleanstep)
# build
ascendfactory.addStep(steps.Compile(name="build"
	,command=["/usr/bin/scons","WITH_DOC_BUILD=0","MALLOC_DEBUG=1"
		,"ascend","models","solvers","test"
	],haltOnFailure=True
#	,warningPattern="^(.\*?):([0-9]+): [Ww]arning: (.\*)$"
#	,warningExtractor=steps.Compile.warnExtractFromRegexpGroups
))
# test
ascendfactory.addStep(ascendteststep)

c['builders'].append(util.BuilderConfig(
	name="ascend", workernames=WORKERS
	,factory=ascendfactory
))

# ASCEND LCOV COVERAGE

covfactory = util.BuildFactory()

LCOV = "/usr/local/bin/lcov"
GENHTML = "/usr/local/bin/genhtml"

from buildbot.steps.transfer import DirectoryUpload

covfactory.addSteps([
	ascendsvnstep
	,ascendcleanstep
	,steps.Compile(name="build"
		,command=["/usr/bin/scons","WITH_DOC_BUILD=0","MALLOC_DEBUG=1","GCOV=1","test","ascend","models","solvers"]
		,haltOnFailure=True)
	,steps.ShellCommand(name="zero",command=[LCOV,"-z","-d","."],haltOnFailure=True)
	,ascendteststep
	,steps.ShellCommand(name="lcov"
		,command=[LCOV,"-c","-d",".","-o","test/lcov1.info","-t","\"ASCEND CUnit Tests\"","--no-external","--exclude","*<stdout>"]
		,haltOnFailure=True)
	,steps.ShellCommand(name="genhtml"
		,command=[GENHTML,"-o","lcov-html","test/lcov1.info","--ignore-errors","source","--prefix",util.Property('builddir')]
		,haltOnFailure=True)
	,steps.ShellCommand(name="chmod",command=["/bin/chmod","a+rX","lcov-html","-R"],haltOnFailure=True)
	,DirectoryUpload(name="upload"
		,workersrc="lcov-html"
		,masterdest=util.Interpolate("~/lcov-upload/%(prop:buildername)s-%(prop:buildnumber)s")
		,url=util.Interpolate("lcov/%(prop:buildername)s-%(prop:buildnumber)s/")
#		,compress='gz'
		)
	])

c['builders'].append(util.BuilderConfig(
	name="ascend-lcov", workernames=WORKERS
	,factory=covfactory
))

#------------------------------------------------------------------------------
####### BUILDBOT SERVICES
#------------------------------------------------------------------------------
# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

#------------------------------------------------------------------------------
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "ASCEND"
c['titleURL'] = "http://xascend4.org/Buildbot"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://build.ascend4.org/"
#c['buildbotURL'] = "http://localhost:8020/"

# minimalistic config to activate new web UI
c['www'] = {
	'port':8020
	,'plugins': {
		'waterfall_view': True
#		,'console_view': True
#		,'grid_view': True
	 }
	,'allowed_origins':['*']
#	,'auth': util.HTPasswdAuth("/srv/ascend/apache2/svn.htpasswd")
}

#------------------------------------------------------------------------------
####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

#------------------------------------------------------------------------------
####### VALIDATION

import re
c['validation'] = {
    'branch' : re.compile(r'^[A-Za-z0-9][\w.+/~-]+$'),
    'revision' : re.compile(r'[1-9][0-9]+$'),
    'property_name' : re.compile(r'^[\w\.\-\/\~:]*$'),
    'property_value' : re.compile(r'^[\w\.\-\/\~:]*$'),
}



