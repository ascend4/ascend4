Import('test_env')
import platform

testsrcs = ['#test/'+i for i in Split("""
  assertimpl.c
  printutil.c
  redirectStdStreams.c
""")]

basesrcs = ['test_ascend_base.c']

srcs = []
for dir in ['general','utilities','solver','linear','compiler']:
	srcs += test_env['TESTSRCS_'+dir.upper()]

cpppath = ['#','#ascend']
if test_env.has_key('CUNIT_CPPPATH'):
	cpppath.append(test_env['CUNIT_CPPPATH'])

libpath = ['#', '#test', '#base/generic/test']
if test_env.has_key('CUNIT_LIBPATH'):
	libpath.append(test_env['CUNIT_LIBPATH'])
	#print "CUNIT_LIBPATH ---> ",libpath

cppdefines = []
if test_env.has_key('CPPDEFINES'):
	cppdefines += test_env.get('CPPDEFINES')
cppdefines += ['-DASC_SHARED']

libs = ['ascend','m','cunit']
if platform.system()!="Windows":
	libs += ['dl']

if test_env['WITH_UFSPARSE']:
	libs += ['cxsparse']

objs = []
for src in srcs+testsrcs:
	objs += test_env.SharedObject(src
		, CPPPATH = cpppath
	)

objs += test_env.SharedObject('test_ascend_base.c'
		, CPPPATH = cpppath
	)

#print "OBJS = "
#for o in objs:
#	print o

test_env.SharedLibrary('#/asctestsuite',objs
	, CPPPATH = cpppath
	, LIBS = libs
	, LIBPATH = libpath
	, CPPDEFINES = cppdefines
)

test_env.Program('test',['test.c']
	, CPPPATH = cpppath
	, LIBS = ['ascend','cunit','asctestsuite']
	, LIBPATH = libpath
)
